--- LuaExtension_orig.cxx	2016-10-16 04:59:54.000000000 +0200
+++ LuaExtension_lua.5.3.cxx	2017-03-27 03:24:56.000000000 +0200
@@ -24,6 +24,9 @@
 #include "IFaceTable.h"
 #include "SciTEKeys.h"
 
+//define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
+#define LUA_COMPAT_5_1
+
 extern "C" {
 #include "lua.h"
 #include "lualib.h"
@@ -119,11 +122,22 @@
 	lua_error(L);
 }
 
-inline int absolute_index(lua_State *L, int index) {
-	return ((index < 0) && (index != LUA_REGISTRYINDEX) && (index != LUA_GLOBALSINDEX))
-	       ? (lua_gettop(L) + index + 1) : index;
+// lua_absindex for LUA <5.1
+inline int absolute_index(lua_State* L, int index)
+{
+  if (index > LUA_REGISTRYINDEX && index < 0)
+    return lua_gettop (L) + index + 1;
+  else
+    return index;
 }
 
+/** 				
+* merge_table / clone_table / clear_table utilized to
+* "soft-replace" an existing global scope instead of using using new_table,
+* because then startup script would be bound to a different copy 
+* of the globals than the extension script.
+**/
+
 // copy the contents of one table into another returning the size
 static int merge_table(lua_State *L, int destTableIdx, int srcTableIdx, bool copyMetatable = false) {
 	int count = 0;
@@ -1226,18 +1240,23 @@
 }
 
 static void PublishGlobalBufferData() {
-	lua_pushliteral(luaState, "buffer");
+// release 1.62
+// A Lua table called 'buffer' is associated with each buffer
+// and can be used to maintain buffer-specific state.
+	lua_pushliteral(luaState, "buffer"); //object: buffer globalScope 
 	if (curBufferIndex >= 0) {
 		lua_pushliteral(luaState, "SciTE_BufferData_Array");
 		lua_rawget(luaState, LUA_REGISTRYINDEX);
+		// create new SciTE_BufferData_Array
 		if (!lua_istable(luaState, -1)) {
 			lua_pop(luaState, 1);
-
+			// Create new SciTE_BufferData_Array / append to LUA_REGISTRYINDEX
 			lua_newtable(luaState);
 			lua_pushliteral(luaState, "SciTE_BufferData_Array");
 			lua_pushvalue(luaState, -2);
 			lua_rawset(luaState, LUA_REGISTRYINDEX);
 		}
+		//  create new entry for current buffer in SciTE_BufferData_Array(idx) 
 		lua_rawgeti(luaState, -1, curBufferIndex);
 		if (!lua_istable(luaState, -1)) {
 			// create new buffer-data
@@ -1247,15 +1266,18 @@
 			lua_pushvalue(luaState, -1);
 			lua_rawseti(luaState, -3, curBufferIndex);
 		}
-		// Replace SciTE_BufferData_Array in the stack, leaving (buffer=-1, 'buffer'=-2)
+		// replace SciTE_BufferData_Array on the Stack leaving (buffer=-1, 'buffer'=-2))
+		// FIX_HERE LUA_GLOBALSINDEX
 		lua_replace(luaState, -2);
 	} else {
-		// for example, during startup, before any InitBuffer / ActivateBuffer
+	/// ensure that the luatable "buffer" will be empty during startup and before any InitBuffer / ActivateBuffer
 		lua_pushnil(luaState);
 	}
-	lua_rawset(luaState, LUA_GLOBALSINDEX);
+	//	was lua_settable(luaState, LUA_GLOBALSINDEX); //or lua_rawset(luaState, LUA_GLOBALSINDEX);		
+	lua_setglobal(luaState, "buffer");
 }
 
+
 static bool InitGlobalScope(bool checkProperties, bool forceReload = false) {
 	bool reload = forceReload;
 	if (checkProperties) {
@@ -1276,8 +1298,10 @@
 		if (!reload) {
 			lua_getfield(luaState, LUA_REGISTRYINDEX, "SciTE_InitialState");
 			if (lua_istable(luaState, -1)) {
-				clear_table(luaState, LUA_GLOBALSINDEX, true);
-				merge_table(luaState, LUA_GLOBALSINDEX, -1, true);
+		//FIX_HERE: 2xLUA_GLOBALSINDEX
+		//lua_getfield(luaState, LUA_REGISTRYINDEX,"_G");		
+				clear_table(luaState,LUA_RIDX_GLOBALS, true);
+				merge_table(luaState, LUA_RIDX_GLOBALS, -1, true);
 				lua_pop(luaState, 1);
 
 				// restore initial package.loaded state
@@ -1308,7 +1332,11 @@
 
 		// Don't replace global scope using new_table, because then startup script is
 		// bound to a different copy of the globals than the extension script.
-		clear_table(luaState, LUA_GLOBALSINDEX, true);
+		//FIX_HERE: LUA_GLOBALSINDEX
+		lua_pushglobaltable(luaState);
+		//lua_getfield(luaState, LUA_REGISTRYINDEX,"_G");
+		//lua_rawgeti(luaState, LUA_REGISTRYINDEX,LUA_RIDX_GLOBALS);
+		clear_table(luaState, -1, true);
 
 		// Lua 5.1: _LOADED is in LUA_REGISTRYINDEX, so it must be cleared before
 		// loading libraries or they will not load because Lua's package system
@@ -1317,7 +1345,7 @@
 		lua_setfield(luaState, LUA_REGISTRYINDEX, "_LOADED");
 
 	} else if (!luaDisabled) {
-		luaState = lua_open();
+		luaState = luaL_newstate();
 		if (!luaState) {
 			luaDisabled = true;
 			host->Trace("> Lua: scripting engine failed to initialise\n");
@@ -1404,7 +1432,10 @@
 		lua_pushcfunction(luaState, cf_global_metatable_index);
 		lua_setfield(luaState, -2, "__index");
 	}
-	lua_setmetatable(luaState, LUA_GLOBALSINDEX);
+	//Set above created table as new metatable for lua_globalstable (LUA_RIDX_GLOBALS)
+
+	//lua_setmetatable(luaState, LUA_REGISTRYINDEX);
+	lua_setmetatable(luaState, LUA_RIDX_GLOBALS);
 
 	if (checkProperties && reload) {
 		CheckStartupScript();
@@ -1430,11 +1461,16 @@
 		}
 	}
 
-	// Clone the initial state (including metatable) in the registry so that it can be restored.
+	// Clone the initial (globalsindex) state (including metatable) in the registry so that it can be restored.
 	// (If reset==1 this will not be used, but this is a shallow copy, not very expensive, and
 	// who knows what the value of reset will be the next time InitGlobalScope runs.)
-	clone_table(luaState, LUA_GLOBALSINDEX, true);
+	
+	//FIX_HERE: LUA_GLOBALSINDEX	
+	lua_pushglobaltable(luaState);
+	clone_table(luaState, -2, true);
+	
 	lua_setfield(luaState, LUA_REGISTRYINDEX, "SciTE_InitialState");
+	lua_pop(luaState,1);
 
 	// Clone loaded packages (package.loaded) state in the registry so that it can be restored.
 	lua_getfield(luaState, LUA_REGISTRYINDEX, "_LOADED");
@@ -1507,9 +1543,11 @@
 
 
 bool LuaExtension::InitBuffer(int index) {
-	//char msg[100];
-	//sprintf(msg, "InitBuffer(%d)\n", index);
-	//host->Trace(msg);
+	/* 
+	char msg[100];
+	sprintf(msg, "InitBuffer(%d)\n", index);
+	host->Trace(msg);
+	*/
 
 	if (index > maxBufferIndex)
 		maxBufferIndex = index;
@@ -1535,9 +1573,11 @@
 }
 
 bool LuaExtension::ActivateBuffer(int index) {
-	//char msg[100];
-	//sprintf(msg, "ActivateBuffer(%d)\n", index);
-	//host->Trace(msg);
+	/*
+	char msg[100];
+	sprintf(msg, "ActivateBuffer(%d)\n", index);
+	host->Trace(msg);
+	*/
 
 	// Probably don't need to do anything with Lua here.  Setting
 	// curBufferIndex is important so that InitGlobalScope knows
@@ -1586,15 +1626,24 @@
 }
 
 bool LuaExtension::OnExecute(const char *s) {
+// gets called when selecting a luaScript within the tools menu
+// pcalls string.find(s) -> if that succeeds, insert the function onto the stack and try to call_function(s).
 	bool handled = false;
+	std::string msg = "lua: selected Tools->";
+	msg.append(s);
+	msg.append("\n");
+	host->Trace(msg.c_str());
 
 	if (luaState || InitGlobalScope(false)) {
 		// May as well use Lua's pattern matcher to parse the command.
 		// Scintilla's RESearch was the other option.
 		int stackBase = lua_gettop(luaState);
-
-		lua_pushliteral(luaState, "string");
-		lua_rawget(luaState, LUA_GLOBALSINDEX);
+		//FIX_HERE LUA_GLOBALSINDEX
+		lua_pushnil(luaState);	
+		//	lua_rawgeti(luaState, LUA_REGISTRYINDEX,LUA_RIDX_GLOBALS);
+		//	lua_pushliteral(luaState, "string");
+		//	lua_rawget(luaState, LUA_RIDX_GLOBALS);			
+		lua_getglobal(luaState,"string");
 		if (lua_istable(luaState, -1)) {
 			lua_pushliteral(luaState, "find");
 			lua_rawget(luaState, -2);
@@ -1602,9 +1651,10 @@
 				lua_pushstring(luaState, s);
 				lua_pushliteral(luaState, "^%s*([%a_][%a%d_]*)%s*(.-)%s*$");
 				int status = lua_pcall(luaState, 2, 4, 0);
+		//FIX_HERE: assuming validate s  ?
 				if (status==0) {
-					lua_insert(luaState, stackBase+1);
-					lua_gettable(luaState, LUA_GLOBALSINDEX);
+				lua_insert(luaState, stackBase+1);	//function	
+				lua_getglobal(luaState,(s));	// functionName
 					if (!lua_isnil(luaState, -1)) {
 						if (lua_isfunction(luaState, -1)) {
 							// Try calling it and, even if it fails, short-circuit Filerx
@@ -1623,7 +1673,6 @@
 		} else {
 			host->Trace("> Lua: string library not loaded\n");
 		}
-
 		lua_settop(luaState, stackBase);
 	}
 
