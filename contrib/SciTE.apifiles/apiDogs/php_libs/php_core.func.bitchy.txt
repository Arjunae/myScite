##array_key_exists()
##array_pop()
array_intersect_assoc(array=$array1,array=$array2,array=$)
array_intersect_key(array=$array1,array=$array2,array=$)   <span class="function"><strong>array_intersect_key()</strong></span> returns an array   containing all the entries of <code class="parameter">array1</code>   which have keys that are present in all the arguments.  
##array_intersect_uassoc()
##array_intersect_ukey()
array_intersect(array=$array1,array=$array2,array=$)   <span class="function"><strong>array_intersect()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   that are present in all the arguments.   Note that keys are preserved.  
array_change_key_case(array=$array,int=$case)   Returns an array with all keys from <code class="parameter">array</code> lowercased   or uppercased. Numbered indices are left as is.  
array_chunk(array=$array,int=$size,bool=$preserve_keys)   Chunks an array into arrays with <code class="parameter">size</code> elements.   The last chunk may contain less than <code class="parameter">size</code> elements.  
##array_column()
array_combine(array=$keys,array=$values)   Creates an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> by using the values from the   <code class="parameter">keys</code> array as keys and the values from the   <code class="parameter">values</code> array as the corresponding values.  
array_count_values(array=$array)   <span class="function"><strong>array_count_values()</strong></span> returns an array using   the values of <code class="parameter">array</code> as keys and   their frequency in <code class="parameter">array</code> as values.  
array_diff_assoc(array=$array1,array=$array2,array=$)   Compares <code class="parameter">array1</code> against <code class="parameter">array2</code> and   returns the difference. Unlike <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> the array   keys are also used in the comparison.  
array_diff_key(array=$array1,array=$array2,array=$)   Compares the keys from <code class="parameter">array1</code> against the keys   from <code class="parameter">array2</code> and returns the difference.   This function is like <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> except the   comparison is done on the keys instead of the values.  
##array_diff_uassoc()
##array_diff_ukey()
array_diff(array=$array1,array=$array2,array=$)   Compares <code class="parameter">array1</code> against one or more other arrays and   returns the values in <code class="parameter">array1</code> that are not present in   any of the other arrays.  
##array_fill_keys()
##array_fill()
##array_filter()
array_flip(array=$array)   <span class="function"><strong>array_flip()</strong></span> returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> in flip   order, i.e. keys from <code class="parameter">array</code> become values and values   from <code class="parameter">array</code> become keys.  
array_key_first(array=$array)   Get the first key of the given <code class="parameter">array</code> without affecting   the internal array pointer.  
##array_keys()
##array_map()
array_merge_recursive(array=$array1,array=$)   <span class="function"><strong>array_merge_recursive()</strong></span> merges the elements of   one or more arrays together so that the values of one are appended   to the end of the previous one.  It returns the resulting array.  
array_merge(array=$array1,array=$)   Merges the elements of one or more arrays together so that the values of   one are appended to the end of the previous one. It returns the resulting   array.  
##array_multisort()
##array_pad()
array_product(array=$array)   <span class="function"><strong>array_product()</strong></span> returns the product of values   in an array.  
##array_push()
array_rand(array=$array,int=$num)   Picks one or more random entries out of an array, and returns the   key (or keys) of the random entries.   It uses a pseudo random number generator that is not suitable for   cryptographic purposes.  
##array_reduce()
array_replace_recursive(array=$array1,array=$)   <span class="function"><strong>array_replace_recursive()</strong></span> replaces the values of   <code class="parameter">array1</code> with the same values from all the following   arrays. If a key from the first array exists in the second array, its value   will be replaced by the value from the second array. If the key exists in the   second array, and not the first, it will be created in the first array.   If a key only exists in the first array, it will be left as is.    If several arrays are passed for replacement, they will be processed   in order, the later array overwriting the previous values.  
array_replace(array=$array1,array=$)   <span class="function"><strong>array_replace()</strong></span> replaces the values of   <code class="parameter">array1</code> with values having the same keys in each of the following   arrays. If a key from the first array exists in the second array, its value   will be replaced by the value from the second array. If the key exists in the   second array, and not the first, it will be created in the first array.   If a key only exists in the first array, it will be left as is.   If several arrays are passed for replacement, they will be processed   in order, the later arrays overwriting the previous values.  
array_reverse(array=$array,bool=$preserve_keys)   Takes an input <code class="parameter">array</code> and returns a new array with   the order of the elements reversed.  
##array_search()
##array_shift()
array_slice(array=$array,int=$offset,int=$length,bool=$preserve_keys)   <span class="function"><strong>array_slice()</strong></span> returns the sequence of elements   from the array <code class="parameter">array</code> as specified by the   <code class="parameter">offset</code> and <code class="parameter">length</code>   parameters.  
##array_splice()
array_sum(array=$array)   <span class="function"><strong>array_sum()</strong></span> returns the sum of values in an array.  
##array_udiff_assoc()
##array_udiff_uassoc()
##array_udiff()
##array_uintersect_assoc()
##array_uintersect_uassoc()
##array_uintersect()
array_unique(array=$array,int=$sort_flags)   Takes an input <code class="parameter">array</code> and returns a new array   without duplicate values.  
##array_unshift()
array_values(array=$array)   <span class="function"><strong>array_values()</strong></span> returns all the values from the   <code class="parameter">array</code> and indexes the array numerically.  
##array_walk_recursive()
##array_walk()
##array()
arsort(int=$sort_flags)   This function sorts an array such that array indices maintain their   correlation with the array elements they are associated with.  
asort(int=$sort_flags)   This function sorts an array such that array indices maintain   their correlation with the array elements they are associated   with.  This is used mainly when sorting associative arrays where   the actual element order is significant.  
##compact()
##count()
current(array=$array)   Every array has an internal pointer to its &quot;current&quot; element,   which is initialized to the first element inserted into the   array.  
##each()
##end()
extract(int=$flags,string=$prefix)   Import variables from an array into the current symbol table.  
##in_array()
key(array=$array)   <span class="function"><strong>key()</strong></span> returns the index element of the current array   position.  
krsort(int=$sort_flags)   Sorts an array by key in reverse order, maintaining key to data   correlations. This is useful mainly for associative arrays.  
ksort(int=$sort_flags)   Sorts an array by key, maintaining key to data correlations. This is   useful mainly for associative arrays.  
##list()
##natcasesort()
##natsort()
##next()
##prev()
##range()
##reset()
rsort(int=$sort_flags)   This function sorts an array in reverse order (highest to lowest).  
##shuffle()
sort(int=$sort_flags)   This function sorts an array.  Elements will be arranged from   lowest to highest when this function has completed.  
##uasort()
##uksort()
##usort()
call_user_method_array(string=$method_name,array=$params)
##call_user_method()
class_alias(string=$original,string=$alias,bool=$autoload)   Creates an alias named <code class="parameter">alias</code>   based on the user defined class <code class="parameter">original</code>.   The aliased class is exactly the same as the original class.  
class_exists(string=$class_name,bool=$autoload)   This function checks whether or not the given class has been defined.  
##get_called_class()
##get_class_methods()
get_class_vars(string=$class_name)   Get the default properties of the given class.  
get_class(object=$object)   Gets the name of the class of the given <code class="parameter">object</code>.  
##get_declared_classes()
##get_declared_interfaces()
get_object_vars(object=$object)   Gets the accessible non-static properties of the given    <code class="parameter">object</code> according to scope.  
##get_parent_class()
interface_exists(string=$interface_name,bool=$autoload)   Checks if the given interface has been defined.  
is_a(object=$object,string=$class_name,bool=$allow_string)   Checks if the given <code class="parameter">object</code> is of this class or has   this class as one of its parents.  
##is_subclass_of()
##method_exists()
##property_exists()
random_bytes(int=$length)   Generates an arbitrary length string of cryptographic random bytes that are   suitable for cryptographic use, such as when generating salts, keys or   initialization vectors.  
random_int(int=$min,int=$max)   Generates cryptographic random integers that are suitable for use where   unbiased results are critical, such as when shuffling a deck of cards for a   poker game.  
checkdate(int=$month,int=$day,int=$year)   Checks the validity of the date formed by the arguments. A date   is considered valid if each parameter is properly defined.  
##date_default_timezone_get()
date_default_timezone_set(string=$timezone_identifier)   <span class="function"><strong>date_default_timezone_set()</strong></span> sets the default timezone   used by all date/time functions.  
date_parse_from_format(string=$format,string=$date)   Returns associative array with detailed info about given date.  
date_parse(string=$date)
date_sun_info(int=$time,float=$latitude,float=$longitude)
date_sunrise(int=$timestamp,int=$format,float=$latitude,float=$longitude,float=$zenith,float=$gmt_offset)   <span class="function"><strong>date_sunrise()</strong></span> returns the sunrise time for a given   day (specified as a <code class="parameter">timestamp</code>) and location.  
date_sunset(int=$timestamp,int=$format,float=$latitude,float=$longitude,float=$zenith,float=$gmt_offset)    <span class="function"><strong>date_sunset()</strong></span> returns the sunset time for a given    day (specified as a <code class="parameter">timestamp</code>) and location.   
date(string=$format,int=$timestamp)   Returns a string formatted according to the given format string using the   given integer <code class="parameter">timestamp</code> or the current time   if no timestamp is given.  In other words, <code class="parameter">timestamp</code>   is optional and defaults to the value of <span class="function"><a href="function.time.php" class="function">time()</a></span>.  
getdate(int=$timestamp)   Returns an associative <span class="type"><a href="language.types.array.php" class="type array">array</a></span> containing the date   information of the <code class="parameter">timestamp</code>, or the current   local time if no <code class="parameter">timestamp</code> is given.  
gettimeofday(bool=$return_float)   This is an interface to gettimeofday(2). It returns an   associative array containing the data returned from the system   call.  
gmdate(string=$format,int=$timestamp)   Identical to the <span class="function"><a href="function.date.php" class="function">date()</a></span> function except that   the time returned is Greenwich Mean Time (GMT).   
gmmktime(int=$hour,int=$minute,int=$second,int=$month,int=$day,int=$year,int=$is_dst)   Identical to <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span> except the passed parameters represents a    GMT date. <span class="function"><strong>gmmktime()</strong></span> internally uses <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>   so only times valid in derived local time can be used.  
gmstrftime(string=$format,int=$timestamp)   Behaves the same as <span class="function"><a href="function.strftime.php" class="function">strftime()</a></span> except that the   time returned is Greenwich Mean Time (GMT). For example, when run   in Eastern Standard Time (GMT -0500), the first line below prints   &quot;Dec 31 1998 20:00:00&quot;, while the second prints &quot;Jan 01 1999   01:00:00&quot;.  
idate(string=$format,int=$timestamp)   Returns a number formatted according to the given format string using the   given integer <code class="parameter">timestamp</code> or the current local time   if no timestamp is given. In other words, <code class="parameter">timestamp</code>   is optional and defaults to the value of <span class="function"><a href="function.time.php" class="function">time()</a></span>.  
localtime(int=$timestamp,bool=$is_associative)   The <span class="function"><strong>localtime()</strong></span> function returns an array   identical to that of the structure returned by the C function   call.  
microtime(bool=$get_as_float)   <span class="function"><strong>microtime()</strong></span> returns the current Unix timestamp with   microseconds. This function is only available on operating systems that   support the gettimeofday() system call.  
mktime(int=$hour,int=$minute,int=$second,int=$month,int=$day,int=$year,int=$is_dst)   Returns the Unix timestamp corresponding to the arguments   given. This timestamp is a long integer containing the number of   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time   specified.  
strftime(string=$format,int=$timestamp)   Format the time and/or date according to locale settings. Month and weekday   names and other language-dependent strings respect the current locale set   with <span class="function"><a href="function.setlocale.php" class="function">setlocale()</a></span>.  
strptime(string=$date,string=$format)     <span class="function"><strong>strptime()</strong></span> returns an array with the     <code class="parameter">date</code> parsed, or <strong><code>FALSE</code></strong> on error.    
strtotime(string=$time,int=$now)
##time()
timezone_name_from_abbr(string=$abbr,int=$gmtOffset,int=$isdst)
##timezone_version_get()
chdir(string=$directory)   Changes PHP&#039;s current directory to    <code class="parameter">directory</code>.  
chroot(string=$directory)   Changes the root directory of the current process to   <code class="parameter">directory</code>, and changes the current   working directory to &quot;/&quot;.  
closedir(resource=$dir_handle)   Closes the directory stream indicated by   <code class="parameter">dir_handle</code>. The stream must have previously   been opened by <span class="function"><a href="function.opendir.php" class="function">opendir()</a></span>.  
dir(string=$directory,resource=$context)   A pseudo-object oriented mechanism for reading a directory.  The   given <code class="parameter">directory</code> is opened.  
##getcwd()
opendir(string=$path,resource=$context)   Opens up a directory handle to be used in subsequent   <span class="function"><a href="function.closedir.php" class="function">closedir()</a></span>, <span class="function"><a href="function.readdir.php" class="function">readdir()</a></span>, and   <span class="function"><a href="function.rewinddir.php" class="function">rewinddir()</a></span> calls.  
readdir(resource=$dir_handle)   Returns the name of the next entry in the directory. The   entries are returned in the order in which they are stored by   the filesystem.  
scandir(string=$directory,int=$sorting_order,resource=$context)   Returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> of files and directories from the   <code class="parameter">directory</code>.  
debug_backtrace(int=$options,int=$limit)   <span class="function"><strong>debug_backtrace()</strong></span> generates a PHP backtrace.  
debug_print_backtrace(int=$options,int=$limit)     <span class="function"><strong>debug_print_backtrace()</strong></span> prints a PHP backtrace. It     prints the function calls, included/required files and     <span class="function"><a href="function.eval.php" class="function">eval()</a></span>ed stuff.    
##error_clear_last()
##error_get_last()
error_log(string=$message,int=$message_type,string=$destination,string=$extra_headers)   Sends an error message to the web server&#039;s error log or to a file.  
error_reporting(int=$level)   The <span class="function"><strong>error_reporting()</strong></span> function sets the   <a href="errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a>   directive at runtime.  PHP has many levels of errors, using   this function sets that level for the duration (runtime) of   your script. If the optional <code class="parameter">level</code> is   not set, <span class="function"><strong>error_reporting()</strong></span> will just return   the current error reporting level.  
##restore_error_handler()
##restore_exception_handler()
##set_error_handler()
##set_exception_handler()
trigger_error(string=$error_msg,int=$error_type)   Used to trigger a user error condition, it can be used in conjunction   with the built-in error handler, or with a user defined function that has   been set as the new error handler   (<span class="function"><a href="function.set-error-handler.php" class="function">set_error_handler()</a></span>).   
escapeshellarg(string=$arg)   <span class="function"><strong>escapeshellarg()</strong></span> adds single quotes around a string   and quotes/escapes any existing single quotes allowing you to pass a   string directly to a shell function and having it be treated as a single   safe argument.  This function should be used to escape individual   arguments to shell functions coming from user input.  The shell functions   include <span class="function"><a href="function.exec.php" class="function">exec()</a></span>, <span class="function"><a href="function.system.php" class="function">system()</a></span> and the   <a href="language.operators.execution.php" class="link">backtick operator</a>.  
escapeshellcmd(string=$command)   <span class="function"><strong>escapeshellcmd()</strong></span> escapes any characters in a   string that might be used to trick a shell command into executing   arbitrary commands.  This function should be used to make sure   that any data coming from user input is escaped before this data   is passed to the <span class="function"><a href="function.exec.php" class="function">exec()</a></span> or   <span class="function"><a href="function.system.php" class="function">system()</a></span> functions, or to the <a href="language.operators.execution.php" class="link">backtick   operator</a>.  
exec(string=$command)   <span class="function"><strong>exec()</strong></span> executes the given   <code class="parameter">command</code>.  
proc_nice(int=$increment)   <span class="function"><strong>proc_nice()</strong></span> changes the priority of the current   process by the amount specified in <code class="parameter">increment</code>. A   positive <code class="parameter">increment</code> will lower the priority of the   current process, whereas a negative <code class="parameter">increment</code>   will raise the priority.  
proc_open(string=$cmd,array=$descriptorspec,string=$cwd,array=$env,array=$other_options)     <span class="function"><strong>proc_open()</strong></span> is similar to <span class="function"><a href="function.popen.php" class="function">popen()</a></span>     but provides a much greater degree of control over the program execution.    
shell_exec(string=$cmd)   This function is identical to the <a href="language.operators.execution.php" class="link">backtick operator</a>.  
system(string=$command)   <span class="function"><strong>system()</strong></span> is just like the C version of the   function in that it executes the given   <code class="parameter">command</code> and outputs the result.  
basename(string=$path,string=$suffix)   Given a string containing the path to a file or directory, this function   will return the trailing name component.  
##chgrp()
##chown()
clearstatcache(bool=$clear_realpath_cache,string=$filename)   When you use <span class="function"><a href="function.stat.php" class="function">stat()</a></span>, <span class="function"><a href="function.lstat.php" class="function">lstat()</a></span>, or   any of the other functions listed in the affected functions list (below),   PHP caches the information those functions return in order to provide   faster performance. However, in certain cases, you may want to clear the   cached information. For instance, if the same file is being checked   multiple times within a single script, and that file is in danger of   being removed or changed during that script&#039;s operation, you may elect to   clear the status cache.  In these cases, you can use the   <span class="function"><strong>clearstatcache()</strong></span> function to clear the information   that PHP caches about a file.  
copy(string=$source,string=$dest,resource=$context)   Makes a copy of the file <code class="parameter">source</code> to   <code class="parameter">dest</code>.  
dirname(string=$path,int=$levels)   Given a string containing the path of a file or directory, this function   will return the parent directory&#039;s path that is   <code class="parameter">levels</code> up from the current directory.  
disk_free_space(string=$directory)   Given a string containing a directory, this function will return the   number of bytes available on the corresponding filesystem or disk   partition.  
disk_total_space(string=$directory)   Given a string containing a directory, this function will return the total   number of bytes on the corresponding filesystem or disk partition.  
fclose(resource=$handle)   The file pointed to by <code class="parameter">handle</code> is closed.  
fflush(resource=$handle)   This function forces a write of all buffered output to the resource   pointed to by the file <code class="parameter">handle</code>.  
fgetc(resource=$handle)   Gets a character from the given file pointer.  
fgetcsv(resource=$handle,int=$length,string=$delimiter,string=$enclosure,string=$escape)   Similar to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span> except that   <span class="function"><strong>fgetcsv()</strong></span> parses the line it reads for fields in   <acronym title="Comma Separated Value">CSV</acronym> format and returns an array containing the fields   read.  
fgets(resource=$handle,int=$length)   Gets a line from file pointer.  
fgetss(resource=$handle,int=$length,string=$allowable_tags)   Identical to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span>, except that   <span class="function"><strong>fgetss()</strong></span> attempts to strip any NUL bytes, HTML and PHP tags from   the text it reads.  
file_exists(string=$filename)   Checks whether a file or directory exists.  
file_get_contents(string=$filename,bool=$use_include_path,resource=$context,int=$offset,int=$maxlen)    This function is similar to <span class="function"><a href="function.file.php" class="function">file()</a></span>, except that   <span class="function"><strong>file_get_contents()</strong></span> returns the file in a    <span class="type"><a href="language.types.string.php" class="type string">string</a></span>, starting at the specified <code class="parameter">offset</code>    up to <code class="parameter">maxlen</code> bytes. On failure,    <span class="function"><strong>file_get_contents()</strong></span> will return <strong><code>FALSE</code></strong>.  
##file_put_contents()
file(string=$filename,int=$flags,resource=$context)   Reads an entire file into an array.  
fileatime(string=$filename)
filectime(string=$filename)   Gets the inode change time of a file.  
filegroup(string=$filename)   Gets the file group. The group ID is returned in numerical format, use   <span class="function"><a href="function.posix-getgrgid.php" class="function">posix_getgrgid()</a></span> to resolve it to a group name.  
fileinode(string=$filename)   Gets the file inode.  
filemtime(string=$filename)   This function returns the time when the data blocks of a file were being   written to, that is, the time when the content of the file was changed.  
fileowner(string=$filename)   Gets the file owner.  
fileperms(string=$filename)   Gets permissions for the given file.  
filesize(string=$filename)   Gets the size for the given file.  
filetype(string=$filename)   Returns the type of the given file.  
flock(resource=$handle,int=$operation)   <span class="function"><strong>flock()</strong></span> allows you to perform a simple reader/writer   model which can be used on virtually every platform (including most Unix   derivatives and even Windows).  
fnmatch(string=$pattern,string=$string,int=$flags)   <span class="function"><strong>fnmatch()</strong></span> checks if the passed <code class="parameter">string</code> would   match the given shell wildcard <code class="parameter">pattern</code>.  
fopen(string=$filename,string=$mode,bool=$use_include_path,resource=$context)   <span class="function"><strong>fopen()</strong></span> binds a named resource, specified by   <code class="parameter">filename</code>, to a stream.   
fpassthru(resource=$handle)   Reads to EOF on the given file pointer from the current position and   writes the results to the output buffer.  
fputcsv(resource=$handle,array=$fields,string=$delimiter,string=$enclosure,string=$escape_char)   <span class="function"><strong>fputcsv()</strong></span> formats a line (passed as a   <code class="parameter">fields</code> array) as CSV and write it (terminated by a   newline) to the specified file <code class="parameter">handle</code>.   
fread(resource=$handle,int=$length)   <span class="function"><strong>fread()</strong></span> reads up to   <code class="parameter">length</code> bytes from the file pointer   referenced by <code class="parameter">handle</code>. Reading stops as soon as one   of the following conditions is met:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      <code class="parameter">length</code> bytes have been read     </span>    </li>    <li class="listitem">     <span class="simpara">      EOF (end of file) is reached     </span>    </li>    <li class="listitem">     <span class="simpara">      a packet becomes available or the <a href="function.socket-set-timeout.php" class="link">      socket timeout</a> occurs (for network streams)     </span>    </li>    <li class="listitem">     <span class="simpara">      if the stream is read buffered and it does not represent a plain file, at      most one read of up to a number of bytes equal to the chunk size (usually      8192) is made; depending on the previously buffered data, the size of the      returned data may be larger than the chunk size.     </span>    </li>   </ul>  
fscanf(resource=$handle,string=$format)   The function <span class="function"><strong>fscanf()</strong></span> is similar to   <span class="function"><a href="function.sscanf.php" class="function">sscanf()</a></span>, but it takes its input from a file   associated with <code class="parameter">handle</code> and interprets the   input according to the specified <code class="parameter">format</code>, which is   described in the documentation for <span class="function"><a href="function.sprintf.php" class="function">sprintf()</a></span>.   
fseek(resource=$handle,int=$offset,int=$whence)   Sets the file position indicator for the file referenced by   <code class="parameter">handle</code>. The new position, measured in bytes   from the beginning of the file, is obtained by adding   <code class="parameter">offset</code> to the position specified by   <code class="parameter">whence</code>.  
fstat(resource=$handle)   Gathers the statistics of the file opened by the file   pointer <code class="parameter">handle</code>. This function is similar to the   <span class="function"><a href="function.stat.php" class="function">stat()</a></span> function except that it operates   on an open file pointer instead of a filename.  
ftell(resource=$handle)   Returns the position of the file pointer referenced by <code class="parameter">handle</code>.  
ftruncate(resource=$handle,int=$size)   Takes the filepointer, <code class="parameter">handle</code>, and truncates the file to   length, <code class="parameter">size</code>.  
fwrite(resource=$handle,string=$string,int=$length)
glob(string=$pattern,int=$flags)   The <span class="function"><strong>glob()</strong></span> function searches for all the pathnames   matching <code class="parameter">pattern</code> according to the rules used by   the libc glob() function, which is similar to the rules used by common   shells.  
is_dir(string=$filename)   Tells whether the given filename is a directory.  
is_executable(string=$filename)   Tells whether the filename is executable.  
is_file(string=$filename)   Tells whether the given file is a regular file.  
is_link(string=$filename)   Tells whether the given file is a symbolic link.  
is_readable(string=$filename)   Tells whether a file exists and is readable.  
is_uploaded_file(string=$filename)   Returns <strong><code>TRUE</code></strong> if the file named by <code class="parameter">filename</code> was   uploaded via HTTP POST. This is useful to help ensure that a   malicious user hasn&#039;t tried to trick the script into working on   files upon which it should not be working--for instance,   <var class="filename">/etc/passwd</var>.  
is_writable(string=$filename)   Returns <strong><code>TRUE</code></strong> if the <code class="parameter">filename</code> exists and is   writable.  The filename argument may be a directory name allowing you   to check if a directory is writable.  
##lchgrp()
##lchown()
link(string=$target,string=$link)   <span class="function"><strong>link()</strong></span> creates a hard link.  
linkinfo(string=$path)   Gets information about a link.    
lstat(string=$filename)   Gathers the statistics of the file or symbolic link named by   <code class="parameter">filename</code>.    
mkdir(string=$pathname,int=$mode,bool=$recursive,resource=$context)   Attempts to create the directory specified by pathname.   
move_uploaded_file(string=$filename,string=$destination)   This function checks to ensure that the file designated by   <code class="parameter">filename</code> is a valid upload file (meaning   that it was uploaded via PHP&#039;s HTTP POST upload mechanism). If   the file is valid, it will be moved to the filename given by   <code class="parameter">destination</code>.  
parse_ini_file(string=$filename,bool=$process_sections,int=$scanner_mode)   <span class="function"><strong>parse_ini_file()</strong></span> loads in the   ini file specified in <code class="parameter">filename</code>,   and returns the settings in it in an associative array.  
pathinfo(string=$path,int=$options)   <span class="function"><strong>pathinfo()</strong></span> returns information about   <code class="parameter">path</code>: either an associative array or a string,   depending on <code class="parameter">options</code>.  
pclose(resource=$handle)   Closes a file pointer to a pipe opened by <span class="function"><a href="function.popen.php" class="function">popen()</a></span>.  
popen(string=$command,string=$mode)   Opens a pipe to a process executed by forking the command given   by <code class="parameter">command</code>.  
readfile(string=$filename,bool=$use_include_path,resource=$context)   Reads a file and writes it to the output buffer.  
readlink(string=$path)   <span class="function"><strong>readlink()</strong></span> does the same as the readlink C function.  
##realpath_cache_get()
##realpath_cache_size()
realpath(string=$path)   <span class="function"><strong>realpath()</strong></span> expands all symbolic links and   resolves references to <em>/./</em>, <em>/../</em> and extra <em>/</em> characters in   the input <code class="parameter">path</code> and returns the canonicalized   absolute pathname.    
rename(string=$oldname,string=$newname,resource=$context)   Attempts to rename <code class="parameter">oldname</code> to   <code class="parameter">newname</code>, moving it between directories if necessary.   If renaming a file and <code class="parameter">newname</code> exists,   it will be overwritten. If renaming a directory and   <code class="parameter">newname</code> exists,   this function will emit a warning.  
rewind(resource=$handle)   Sets the file position indicator for <code class="parameter">handle</code>   to the beginning of the file stream.  
rmdir(string=$dirname,resource=$context)   Attempts to remove the directory named by <code class="parameter">dirname</code>.   The directory must be empty, and the relevant permissions must permit this.   A <strong><code>E_WARNING</code></strong> level error will be generated on failure.  
stat(string=$filename)   Gathers the statistics of the file named by   <code class="parameter">filename</code>.  If <code class="parameter">filename</code> is a   symbolic link, statistics are from the file itself, not the symlink.  
symlink(string=$target,string=$link)   <span class="function"><strong>symlink()</strong></span> creates a symbolic link to the existing   <code class="parameter">target</code> with the specified name   <code class="parameter">link</code>.  
tempnam(string=$dir,string=$prefix)   Creates a file with a unique filename, with access permission set to 0600, in the specified directory.   If the directory does not exist or is not writable, <span class="function"><strong>tempnam()</strong></span> may   generate a file in the system&#039;s temporary directory, and return   the full path to that file, including its name.  
##tmpfile()
touch(string=$filename,int=$time,int=$atime)   Attempts to set the access and modification times of the file named in the   <code class="parameter">filename</code> parameter to the value given in   <code class="parameter">time</code>.    Note that the access time is always modified, regardless of the number   of parameters.  
umask(int=$mask)   <span class="function"><strong>umask()</strong></span> sets PHP&#039;s umask to   <code class="parameter">mask</code> &amp; 0777 and returns the old   umask. When PHP is being used as a server module, the umask   is restored when each request is finished.  
unlink(string=$filename,resource=$context)   Deletes <code class="parameter">filename</code>.  Similar to the Unix C unlink()   function. An <strong><code>E_WARNING</code></strong> level error will be generated on   failure.  
##filter_input_array()
##filter_input()
##filter_list()
##filter_var_array()
##filter_var()
##call_user_func_array()
##call_user_func()
create_function(string=$args,string=$code)   Creates an anonymous function from the parameters passed, and   returns a unique name for it.  
##forward_static_call_array()
##forward_static_call()
func_get_arg(int=$arg_num)   Gets the specified argument from a user-defined function&#039;s argument list.  
##func_get_args()
##func_num_args()
function_exists(string=$function_name)   Checks the list of defined functions, both built-in (internal) and   user-defined, for <code class="parameter">function_name</code>.   
get_defined_functions(bool=$exclude_disabled)   Gets an array of all defined functions.  
##register_shutdown_function()
##register_tick_function()
##hash_algos()
##hash_copy()
hash_equals(string=$known_string,string=$user_string)   Compares two strings using the same time whether they&#039;re equal or not.  
hash_file(string=$algo,string=$filename,bool=$raw_output)
##hash_final()
hash_hkdf(string=$algo,string=$ikm,int=$length,string=$info,string=$salt)
##hash_hmac_algos()
hash_hmac_file(string=$algo,string=$filename,string=$key,bool=$raw_output)
hash_hmac(string=$algo,string=$data,string=$key,bool=$raw_output)
hash_init(string=$algo,int=$options,string=$key)
hash_pbkdf2(string=$algo,string=$password,string=$salt,int=$iterations,int=$length,bool=$raw_output)
##hash_update_stream()
hash(string=$algo,string=$data,bool=$raw_output)
##assert_options()
##assert()
##cli_get_process_title()
cli_set_process_title(string=$title)   Sets the process title visible in tools such as <strong class="command">top</strong> and   <strong class="command">ps</strong>. This function is available only in   <a href="features.commandline.php" class="link">CLI</a> mode.  
dl(string=$library)   Loads the PHP extension given by the parameter   <code class="parameter">library</code>.  
extension_loaded(string=$name)   Finds out whether the extension is loaded.  
##gc_enabled()
##get_current_user()
get_defined_constants(bool=$categorize)   Returns the names and values of all the constants currently defined.   This includes those created by extensions as well as those created with   the <span class="function"><a href="function.define.php" class="function">define()</a></span> function.  
get_extension_funcs(string=$module_name)   This function returns the names of all the functions defined in   the module indicated by <code class="parameter">module_name</code>.  
##get_include_path()
##get_included_files()
get_loaded_extensions(bool=$zend_extensions)   This function returns the names of all the modules compiled and   loaded in the PHP interpreter.  
##get_magic_quotes_gpc()
##get_magic_quotes_runtime()
get_resources(string=$type)   Returns an array of all currently active <span class="type"><a href="language.types.resource.php" class="type resource">resource</a></span>s, optionally   filtered by resource type.  
getenv(string=$varname,bool=$local_only)   Gets the value of an environment variable.  
##getlastmod()
getopt(string=$options,array=$longopts)   Parses options passed to the script.  
getrusage(int=$who)   This is an interface to <strong class="command">getrusage(2)</strong>. It gets data returned   from the system call.   
ini_get_all(string=$extension,bool=$details)   Returns all the registered configuration options.  
ini_get(string=$varname)   Returns the value of the configuration option on success.  
ini_restore(string=$varname)   Restores a given configuration option to its original value.  
ini_set(string=$varname,string=$newvalue)   Sets the value of the given configuration option.  The configuration option   will keep this new value during the script&#039;s execution, and will be restored   at the script&#039;s ending.  
memory_get_usage(bool=$real_usage)   Returns the amount of memory, in bytes, that&#039;s currently being   allocated to your PHP script.  
##php_ini_loaded_file()
##php_ini_scanned_files()
##php_logo_guid()
##php_sapi_name()
php_uname(string=$mode)   <span class="function"><strong>php_uname()</strong></span> returns a description of the operating   system PHP is running on.  This is the same string you see at the very   top of the <span class="function"><a href="function.phpinfo.php" class="function">phpinfo()</a></span> output.  For the name of just   the operating system, consider using the <strong><code>PHP_OS</code></strong>   constant, but keep in mind this constant will contain the operating   system PHP was <em class="emphasis">built</em> on.  
phpcredits(int=$flag)   This function prints out the credits listing the PHP developers,   modules, etc. It generates the appropriate HTML codes to insert   the information in a page.   
phpinfo(int=$what)   Outputs a large amount of information about the current state of  PHP.    This includes information about PHP compilation options and extensions,   the PHP version, server information and environment (if compiled as a   module), the PHP environment, OS version information, paths, master and   local values of configuration options, HTTP headers, and the PHP License.  
phpversion(string=$extension)   Returns a string containing the version of the currently running PHP   parser or extension.  
putenv(string=$setting)   Adds <code class="parameter">setting</code> to the server environment.  The   environment variable will only exist for the duration of the current   request. At the end of the request the environment is restored to its   original state.  
##restore_include_path()
set_include_path(string=$new_include_path)   Sets the <a href="ini.core.php#ini.include-path" class="link">include_path</a>   configuration option for the duration of the script.    
set_magic_quotes_runtime(bool=$new_setting)   Set the current active configuration setting of <a href="info.configuration.php#ini.magic-quotes-runtime" class="link">magic_quotes_runtime</a>.  
##sys_get_temp_dir()
version_compare(string=$version1,string=$version2,string=$version1,string=$version2,string=$operator)   <span class="function"><strong>version_compare()</strong></span> compares two &quot;PHP-standardized&quot;   version number strings.  
##zend_logo_guid()
##zend_thread_id()
##zend_version()
ezmlm_hash(string=$addr)
##mail()
##abs()
base_convert(string=$number,int=$frombase,int=$tobase)   Returns a string containing <code class="parameter">number</code>   represented in base <code class="parameter">tobase</code>.  The base in   which <code class="parameter">number</code> is given is specified in   <code class="parameter">frombase</code>.  Both   <code class="parameter">frombase</code> and <code class="parameter">tobase</code>   have to be between 2 and 36, inclusive.  Digits in numbers with a   base higher than 10 will be represented with the letters a-z,   with a meaning 10, b meaning 11 and z meaning 35.   The case of the letters doesn&#039;t matter, i.e.   <code class="parameter">number</code> is interpreted case-insensitively.  
bindec(string=$binary_string)   Returns the decimal equivalent of the binary number represented by   the <code class="parameter">binary_string</code> argument.  
ceil(float=$value)
cos(float=$arg)   <span class="function"><strong>cos()</strong></span> returns the cosine of the <code class="parameter">arg</code>   parameter.  The <code class="parameter">arg</code> parameter is in radians.  
decbin(int=$number)   Returns a string containing a binary representation of the given   <code class="parameter">number</code> argument.  
dechex(int=$number)   Returns a string containing a hexadecimal representation of the given   unsigned <code class="parameter">number</code> argument.  
decoct(int=$number)   Returns a string containing an octal representation of the given   <code class="parameter">number</code> argument. The largest number that can be   converted depends on the platform in use. For 32-bit platforms this is   usually <em>4294967295</em> in decimal resulting in   <em>37777777777</em>. For 64-bit platforms this is usually   <em>9223372036854775807</em> in decimal resulting in   <em>777777777777777777777</em>.  
deg2rad(float=$number)   This function converts <code class="parameter">number</code> from degrees   to the radian equivalent.  
exp(float=$arg)   Returns <strong><code>e</code></strong> raised to the power of <code class="parameter">arg</code>.  
floor(float=$value)
fmod(float=$x,float=$y)   Returns the floating point remainder of dividing the dividend   (<code class="parameter">x</code>) by the divisor (<code class="parameter">y</code>).   The remainder (<var class="varname"><var class="varname">r</var></var>) is defined as: x = i * y + r, for    some integer <var class="varname"><var class="varname">i</var></var>. If <code class="parameter">y</code> is   non-zero, <var class="varname"><var class="varname">r</var></var> has the same sign as   <code class="parameter">x</code> and a magnitude less than the magnitude of   <code class="parameter">y</code>.  
hexdec(string=$hex_string)   Returns the decimal equivalent of the hexadecimal number   represented by the <code class="parameter">hex_string</code> argument.   <span class="function"><strong>hexdec()</strong></span> converts a hexadecimal string to a   decimal number.   
intdiv(int=$dividend,int=$divisor)   Returns the integer quotient of the division of <code class="parameter">dividend</code> by <code class="parameter">divisor</code>.  
is_nan(float=$val)   Checks whether <code class="parameter">val</code> is &#039;not a number&#039;,    like the result of <em>acos(1.01)</em>.  
##max()
##min()
##mt_getrandmax()
mt_rand(int=$min,int=$max)
mt_srand(int=$seed,int=$mode)   Seeds the random number generator with   <code class="parameter">seed</code> or with a random value   if no <code class="parameter">seed</code> is given.  
octdec(string=$octal_string)   Returns the decimal equivalent of the octal number   represented by the <code class="parameter">octal_string</code> argument.  
##pi()
##pow()
rad2deg(float=$number)   This function converts <code class="parameter">number</code> from radian   to degrees.  
rand(int=$min,int=$max)
round(float=$val,int=$precision,int=$mode)   Returns the rounded value of <code class="parameter">val</code> to   specified <code class="parameter">precision</code>   (number of digits after the decimal point).   <code class="parameter">precision</code> can also be negative or zero (default).  
sin(float=$arg)   <span class="function"><strong>sin()</strong></span> returns the sine of the <code class="parameter">arg</code>   parameter.  The <code class="parameter">arg</code> parameter is in radians.  
sqrt(float=$arg)   Returns the square root of <code class="parameter">arg</code>.  
srand(int=$seed)   Seeds the random number generator with <code class="parameter">seed</code>   or with a random value if no <code class="parameter">seed</code> is given.  
tan(float=$arg)   <span class="function"><strong>tan()</strong></span> returns the tangent of the <code class="parameter">arg</code>   parameter.  The <code class="parameter">arg</code> parameter is in radians.  
constant(string=$name)
##define()
defined(string=$name)   Checks whether the given constant exists and is defined.  
eval(string=$code)   Evaluates the given <code class="parameter">code</code> as PHP.  
exit(string=$status,int=$status)   Terminates execution of the script.   <a href="function.register-shutdown-function.php" class="link">Shutdown functions</a>   and <a href="language.oop5.decon.php#language.oop5.decon.destructor" class="link">object destructors</a>   will always be executed even if <em>exit</em> is called.  
get_browser(string=$user_agent,bool=$return_array)   Attempts to determine the capabilities of the user&#039;s browser, by looking   up the browser&#039;s information in the <var class="filename">browscap.ini</var>   file.  
##__halt_compiler()
highlight_string(string=$str,bool=$return)
hrtime(bool=$get_as_number)
ignore_user_abort(bool=$value)   Sets whether a client disconnect should cause a script to be aborted.  
##pack()
php_check_syntax(string=$filename)   Performs a syntax (lint) check on the specified    <code class="parameter">filename</code> testing for scripting errors.  
php_strip_whitespace(string=$filename)   Returns the PHP source code in <code class="parameter">filename</code> with   PHP comments and whitespace removed. This may be useful for determining the   amount of actual code in your scripts compared with the amount of comments.   This is similar to using <strong class="command">php -w</strong> from the   <a href="features.commandline.php" class="link">commandline</a>.  
sapi_windows_vt100_support(resource=$stream,bool=$enable)   If <code class="parameter">enable</code> is omitted, the function return <strong><code>TRUE</code></strong> if the stream <code class="parameter">stream</code> has has VT100 control codes enabled, <strong><code>FALSE</code></strong> otherwise.  
sleep(int=$seconds)
##sys_getloadavg()
time_nanosleep(int=$seconds,int=$nanoseconds)   Delays program execution for the given number of   <code class="parameter">seconds</code> and <code class="parameter">nanoseconds</code>.  
time_sleep_until(float=$timestamp)   Makes the script sleep until the specified   <code class="parameter">timestamp</code>.   
uniqid(string=$prefix,bool=$more_entropy)   Gets a prefixed unique identifier based on the current time in   microseconds.  
unpack(string=$format,string=$data,int=$offset)   Unpacks from a binary string into an array according to the given   <code class="parameter">format</code>.   
usleep(int=$micro_seconds)   Delays program execution for the given number of microseconds.  
##define_syslog_variables()
dns_get_record(string=$hostname,int=$type,bool=$raw)   Fetch DNS Resource Records associated with the given   <code class="parameter">hostname</code>.  
fsockopen(string=$hostname,int=$port,float=$timeout)   Initiates a socket connection to the resource specified by   <code class="parameter">hostname</code>.  
gethostbyaddr(string=$ip_address)   Returns the host name of the Internet host specified by   <code class="parameter">ip_address</code>.  
gethostbyname(string=$hostname)   Returns the IPv4 address of the Internet host specified by   <code class="parameter">hostname</code>.  
gethostbynamel(string=$hostname)   Returns a list of IPv4 addresses to which the Internet host   specified by <code class="parameter">hostname</code> resolves.   
##gethostname()
getprotobyname(string=$name)   <span class="function"><strong>getprotobyname()</strong></span> returns the protocol number   associated with the protocol <code class="parameter">name</code> as per   <var class="filename">/etc/protocols</var>.  
getservbyname(string=$service,string=$protocol)   <span class="function"><strong>getservbyname()</strong></span> returns the Internet port   which corresponds to <code class="parameter">service</code> for the   specified <code class="parameter">protocol</code> as per   <var class="filename">/etc/services</var>.  
##header_register_callback()
header_remove(string=$name)   Removes an HTTP header previously set using <span class="function"><a href="function.header.php" class="function">header()</a></span>.  
header(string=$header,bool=$replace,int=$http_response_code)   <span class="function"><strong>header()</strong></span> is used to send a raw <acronym title="Hypertext Transfer Protocol">HTTP</acronym>   header. See the <a href="http://www.faqs.org/rfcs/rfc2616" class="link external">&raquo;&nbsp;HTTP/1.1 specification</a>   for more information on <acronym title="Hypertext Transfer Protocol">HTTP</acronym> headers.  
##headers_list()
##headers_sent()
http_response_code(int=$response_code)    Gets or sets the HTTP response status code.  
inet_ntop(string=$in_addr)
inet_pton(string=$address)   This function converts a human readable IPv4 or IPv6 address (if PHP   was built with IPv6 support enabled) into an address family appropriate   32bit or 128bit binary structure.  
ip2long(string=$ip_address)   The function <span class="function"><strong>ip2long()</strong></span> generates an long integer   representation of IPv4 Internet network address from its Internet   standard format (dotted string) representation.   
setcookie(string=$name,string=$value,int=$expires,string=$path,string=$domain,bool=$secure,bool=$httponly,string=$name,string=$value,array=$options)   <span class="function"><strong>setcookie()</strong></span> defines a cookie to be sent along with the   rest of the HTTP headers. Like other headers, cookies must be sent   <em class="emphasis">before</em> any output from your script (this is a   protocol restriction). This requires that you place calls to this function   prior to any output, including <em>&lt;html&gt;</em> and   <em>&lt;head&gt;</em> tags as well as any whitespace.  
syslog(int=$priority,string=$message)   <span class="function"><strong>syslog()</strong></span> generates a log message that will be   distributed by the system logger.  
##ob_end_clean()
##ob_end_flush()
##ob_get_clean()
##ob_get_contents()
##ob_get_flush()
##ob_get_length()
ob_gzhandler(string=$buffer,int=$mode)   <span class="function"><strong>ob_gzhandler()</strong></span> is intended to be used as a callback   function for <span class="function"><a href="function.ob-start.php" class="function">ob_start()</a></span> to help facilitate sending   gz-encoded data to web browsers that support compressed web pages.     Before <span class="function"><strong>ob_gzhandler()</strong></span> actually sends compressed data,   it determines what type of content encoding the browser will accept   (&quot;gzip&quot;, &quot;deflate&quot; or none at all) and will return its output accordingly.   All browsers are supported since it&#039;s up to the browser to send the   correct header saying that it accepts compressed web pages. If a browser   doesn&#039;t support compressed pages this function returns <strong><code>FALSE</code></strong>.  
##ob_list_handlers()
##ob_start()
output_add_rewrite_var(string=$name,string=$value)   This function adds another name/value pair to the URL rewrite mechanism.   The name and value will be added to URLs (as GET parameter) and forms   (as hidden input fields) the same way as the session ID when transparent   URL rewriting is enabled with <a href="session.configuration.php#ini.session.use-trans-sid" class="link">session.use_trans_sid</a>.   
##output_reset_rewrite_vars()
password_hash(string=$password,int=$algo,array=$options)   <span class="function"><strong>password_hash()</strong></span> creates a new password hash using a strong one-way hashing   algorithm. <span class="function"><strong>password_hash()</strong></span> is compatible with <span class="function"><a href="function.crypt.php" class="function">crypt()</a></span>.   Therefore, password hashes created by <span class="function"><a href="function.crypt.php" class="function">crypt()</a></span> can be used with   <span class="function"><strong>password_hash()</strong></span>.  
password_needs_rehash(string=$hash,int=$algo,array=$options)   This function checks to see if the supplied hash implements the algorithm   and options provided. If not, it is assumed that the hash needs to be   rehashed.  
password_verify(string=$password,string=$hash)   Verifies that the given hash matches the given password.  
ereg_replace(string=$pattern,string=$replacement,string=$string)
ereg(string=$pattern,string=$string)
eregi_replace(string=$pattern,string=$replacement,string=$string)   This function is identical to <span class="function"><a href="function.ereg-replace.php" class="function">ereg_replace()</a></span>   except that this ignores case distinction when matching   alphabetic characters.  
eregi(string=$pattern,string=$string)   This function is identical to <span class="function"><a href="function.ereg.php" class="function">ereg()</a></span> except that it   ignores case distinction when matching alphabetic characters.  
split(string=$pattern,string=$string,int=$limit)   Splits a <code class="parameter">string</code> into array by regular expression.  
spliti(string=$pattern,string=$string,int=$limit)   Splits a <code class="parameter">string</code> into array by regular expression.  
sql_regcase(string=$string)   Creates a regular expression for a case insensitive match.  
session_cache_expire(string=$new_cache_expire)   <span class="function"><strong>session_cache_expire()</strong></span> returns the current setting of   <em>session.cache_expire</em>.   
session_cache_limiter(string=$cache_limiter)   <span class="function"><strong>session_cache_limiter()</strong></span> returns the name of the   current cache limiter.  
session_create_id(string=$prefix)   <span class="function"><strong>session_create_id()</strong></span> is used to create new   session id for the current session. It returns collision free   session id.  
##session_destroy()
##session_gc()
session_name(string=$name)   <span class="function"><strong>session_name()</strong></span> returns the name of the current   session. If <code class="parameter">name</code> is given,   <span class="function"><strong>session_name()</strong></span> will update the session name and return   the <em class="emphasis">old</em> session name.  
session_regenerate_id(bool=$delete_old_session)   <span class="function"><strong>session_regenerate_id()</strong></span> will replace the current   session id with a new one, and keep the current session information.  
##session_set_save_handler()
session_start(array=$options)   <span class="function"><strong>session_start()</strong></span> creates a session or resumes the   current one based on a session identifier passed via a GET or POST   request, or passed via a cookie.  
##class_implements()
##class_parents()
##class_uses()
##iterator_apply()
##iterator_count()
##iterator_to_array()
##spl_autoload_register()
##spl_classes()
spl_object_hash(object=$obj)   This function returns a unique identifier for the object. This id can be   used as a hash key for storing objects, or for identifying an object, as long   as the object is not destroyed. Once the object is destroyed, its hash may    be reused for other objects.  
spl_object_id(object=$obj)   This function returns a unique identifier for the object. The object id is   unique for the lifetime of the object. Once the object is destroyed, its id   may be reused for other objects. This behavior is similar to   <span class="function"><a href="function.spl-object-hash.php" class="function">spl_object_hash()</a></span>.  
stream_bucket_prepend(resource=$brigade,object=$bucket)    This function can be called to prepend a bucket to a bucket brigade. It    is typically called from <span class="methodname"><a href="php-user-filter.filter.php" class="methodname">php_user_filter::filter()</a></span>.  
stream_context_create(array=$options,array=$params)   Creates and returns a stream context with any options supplied in   <code class="parameter">options</code> preset.  
stream_context_get_default(array=$options)
stream_context_get_options(resource=$stream_or_context)
stream_context_get_params(resource=$stream_or_context)   Retrieves parameter and options information from the stream or context.  
stream_context_set_default(array=$options)
stream_copy_to_stream(resource=$source,resource=$dest,int=$maxlength,int=$offset)   Makes a copy of up to <code class="parameter">maxlength</code> bytes   of data from the current position (or from the   <code class="parameter">offset</code> position, if specified) in   <code class="parameter">source</code> to <code class="parameter">dest</code>. If   <code class="parameter">maxlength</code> is not specified, all remaining content in   <code class="parameter">source</code> will be copied.  
##stream_filter_append()
stream_filter_register(string=$filtername,string=$classname)   <span class="function"><strong>stream_filter_register()</strong></span> allows you to implement   your own filter on any registered stream used with all the other   filesystem functions (such as <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>,   <span class="function"><a href="function.fread.php" class="function">fread()</a></span> etc.).  
stream_filter_remove(resource=$stream_filter)   Removes a stream filter previously added to a stream with   <span class="function"><a href="function.stream-filter-prepend.php" class="function">stream_filter_prepend()</a></span> or   <span class="function"><a href="function.stream-filter-append.php" class="function">stream_filter_append()</a></span>.  Any data remaining in the   filter&#039;s internal buffer will be flushed through to the next filter before   removing it.  
stream_get_contents(resource=$handle,int=$maxlength,int=$offset)    Identical to <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span>, except that   <span class="function"><strong>stream_get_contents()</strong></span> operates on an already open   stream resource and returns the remaining contents in a string, up to   <code class="parameter">maxlength</code> bytes and starting at the specified   <code class="parameter">offset</code>.  
##stream_get_filters()
stream_get_meta_data(resource=$stream)   Returns information about an existing <code class="parameter">stream</code>.  
##stream_get_transports()
##stream_get_wrappers()
##stream_is_local()
stream_isatty(resource=$stream)   Determines if stream <code class="parameter">stream</code> refers to a valid terminal type device.   This is a more portable version of <span class="function"><a href="function.posix-isatty.php" class="function">posix_isatty()</a></span>, since it works on Windows systems too.  
