bool bbcode_add_element ( resource $bbcode_container , string $tag_name , array $tag_rules ) Adds a tag to an existing BBCode_Container tag_set using tag_rules. 
bool bbcode_add_smiley ( resource $bbcode_container , string $smiley , string $replace_by ) Adds a smiley to the parser 
resource bbcode_create ([ array $bbcode_initial_tags = NULL ] ) This function returns a new BBCode Resource used to parse BBCode strings. 
bool bbcode_destroy ( resource $bbcode_container ) This function closes the resource opened by bbcode_create(). 
string bbcode_parse ( resource $bbcode_container , string $to_parse ) This function parse the string to_parse following the rules in the bbcode_container created by bbcode_create() 
bool bbcode_set_arg_parser ( resource $bbcode_container , resource $bbcode_arg_parser ) Attaches another parser to the bbcode_container. This parser is used only when arguments must be parsed. If this function is not used, the default argument parser is the parser itself. 
bool bbcode_set_flags ( resource $bbcode_container , int $flags [, int $mode = BBCODE_SET_FLAGS_SET ] ) Set or alter parser options 
bool msession_connect ( string $host , string $port ) 
int msession_count ( void ) 
bool msession_create ( string $session [, string $classname [, string $data ]] ) 
bool msession_destroy ( string $name ) 
void msession_disconnect ( void ) 
array msession_find ( string $name , string $value ) 
array msession_get_array ( string $session ) 
string msession_get_data ( string $session ) 
string msession_get ( string $session , string $name , string $value ) 
string msession_inc ( string $session , string $name ) 
array msession_list ( void ) 
array msession_listvar ( string $name ) Used for searching sessions with common attributes. 
int msession_lock ( string $name ) 
string msession_plugin ( string $session , string $val [, string $param ] ) 
string msession_randstr ( int $param ) 
void msession_set_array ( string $session , array $tuples ) 
bool msession_set_data ( string $session , string $value ) 
bool msession_set ( string $session , string $name , string $value ) 
int msession_timeout ( string $session [, int $param ] ) 
string msession_uniq ( int $param [, string $classname [, string $data ]] ) 
int msession_unlock ( string $session , int $key ) 
Instantiating the Runkit_Sandbox class creates a new thread with its own scope and program stack. Using a set of options passed to the constructor, this environment may be restricted to a subset of what the primary interpreter can do and provide a safer environment for executing user supplied code.  Note: Sandbox support (required for runkit_lint(), runkit_lint_file(), and the Runkit_Sandbox class) is only available as of PHP 5.1.0 or specially patched versions of PHP 5.0, and requires that thread safety be enabled. See the README file included in the runkit package for more information.
void Runkit_Sandbox_Parent::__construct ( void ) 
bool runkit_class_adopt ( string $classname , string $parentname ) 
bool runkit_class_emancipate ( string $classname ) 
bool runkit_constant_add ( string $constname , mixed $value ) 
bool runkit_constant_redefine ( string $constname , mixed $newvalue ) 
bool runkit_constant_remove ( string $constname ) 
bool runkit_function_add ( string $funcname , string $arglist , string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL ]] ) bool runkit_function_add ( string $funcname , Closure $closure [, string $doc_comment = NULL ] )
bool runkit_function_copy ( string $funcname , string $targetname ) 
bool runkit_function_redefine ( string $funcname , string $arglist , string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL ]] ) 
bool runkit_function_remove ( string $funcname ) Note: By default, only userspace functions may be removed, renamed, or modified. In order to override internal functions, you must enable the runkit.internal_override setting in php.ini. 
bool runkit_function_rename ( string $funcname , string $newname ) Note: By default, only userspace functions may be removed, renamed, or modified. In order to override internal functions, you must enable the runkit.internal_override setting in php.ini. 
bool runkit_import ( string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS ] ) Similar to include however any code residing outside of a function or class is simply ignored. Additionally, depending on the value of flags, any functions or classes which already exist in the currently running environment may be automatically overwritten by their new definitions. 
bool runkit_lint_file ( string $filename ) 
bool runkit_lint ( string $code ) 
bool runkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL ]] ) bool runkit_method_add ( string $classname , string $methodname , Closure $closure [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL ]] )
bool runkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] ) 
bool runkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL ]] ) 
bool runkit_method_remove ( string $classname , string $methodname ) Note: This function cannot be used to manipulate the currently running (or chained) method. 
bool runkit_method_rename ( string $classname , string $methodname , string $newname ) Note: This function cannot be used to manipulate the currently running (or chained) method. 
bool runkit_return_value_used ( void ) 
mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] ) 
array runkit_superglobals ( void ) 
bool rpm_close ( resource $rpmr ) rpm_close() will close an RPM file pointer. 
mixed rpm_get_tag ( resource $rpmr , int $tagnum ) rpm_get_tag() will retrieve a given tag from the RPM file's header and return it. 
bool rpm_is_valid ( string $filename ) rpm_is_valid() will test an RPM file for validity as an RPM file. This is not the same as rpm_open() as it only checks the file for validity but does not return a file pointer to be used by further functions. 
resource rpm_open ( string $filename ) rpm_open() will open an RPM file and will determine if the file is a valid RPM file. 
string rpm_version ( void ) rpm_version() will return the current version of the rpmreader extension. 
resource radius_acct_open ( void ) 
bool radius_add_server ( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries ) radius_add_server() may be called multiple times, and it may be used together with radius_config(). At most 10 servers may be specified. When multiple servers are given, they are tried in round-robin fashion until a valid response is received, or until each server's max_tries limit has been reached. 
resource radius_auth_open ( void ) 
bool radius_close ( resource $radius_handle ) It is not needed to call this function because php frees all resources at the end of each request. 
bool radius_config ( resource $radius_handle , string $file ) Before issuing any Radius requests, the library must be made aware of the servers it can contact. The easiest way to configure the library is to call radius_config(). radius_config() causes the library to read a configuration file whose format is described in » radius.conf. 
bool radius_create_request ( resource $radius_handle , int $type ) 
string radius_cvt_addr ( string $data ) 
int radius_cvt_int ( string $data ) 
string radius_cvt_string ( string $data ) 
string radius_demangle_mppe_key ( resource $radius_handle , string $mangled ) When using MPPE with MS-CHAPv2, the send- and recv-keys are mangled (see » RFC 2548), however this function is useless, because I don't think that there is or will be a PPTP-MPPE implementation in PHP. 
string radius_demangle ( resource $radius_handle , string $mangled ) Some data (Passwords, MS-CHAPv1 MPPE-Keys) is mangled for security reasons, and must be demangled before you can use them. 
mixed radius_get_attr ( resource $radius_handle ) Like Radius requests, each response may contain zero or more attributes. After a response has been received successfully by radius_send_request(), its attributes can be extracted one by one using radius_get_attr(). Each time radius_get_attr() is called, it gets the next attribute from the current response. 
string radius_get_tagged_attr_data ( string $data ) If a tagged attribute has been returned from radius_get_attr(), radius_get_tagged_attr_data() will return the data from the attribute. 
int radius_get_tagged_attr_tag ( string $data ) If a tagged attribute has been returned from radius_get_attr(), radius_get_tagged_attr_data() will return the tag from the attribute. 
array radius_get_vendor_attr ( string $data ) If radius_get_attr() returns RADIUS_VENDOR_SPECIFIC, radius_get_vendor_attr() may be called to determine the vendor. 
bool radius_put_addr ( resource $radius_handle , int $type , string $addr [, int $options = 0 [, int $tag ]] ) 
bool radius_put_attr ( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]] ) 
bool radius_put_int ( resource $radius_handle , int $type , int $value [, int $options = 0 [, int $tag ]] ) 
bool radius_put_string ( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]] ) 
bool radius_put_vendor_addr ( resource $radius_handle , int $vendor , int $type , string $addr ) 
bool radius_put_vendor_attr ( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]] ) 
bool radius_put_vendor_int ( resource $radius_handle , int $vendor , int $type , int $value [, int $options = 0 [, int $tag ]] ) 
bool radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]] ) 
string radius_request_authenticator ( resource $radius_handle ) The request authenticator is needed for demangling mangled data like passwords and encryption-keys. 
string radius_salt_encrypt_attr ( resource $radius_handle , string $data ) 
int radius_send_request ( resource $radius_handle ) 
string radius_server_secret ( resource $radius_handle ) The shared secret is needed as salt for demangling mangled data like passwords and encryption-keys. 
string radius_strerror ( resource $radius_handle ) If Radius-functions fail then they record an error message. This error message can be retrieved with this function. 
bool bcompiler_load_exe ( string $filename ) Reads data from a bcompiler exe file and creates classes from the bytecodes. 
bool bcompiler_load ( string $filename ) Reads data from a bzcompressed file and creates classes from the bytecodes. 
bool bcompiler_parse_class ( string $class , string $callback ) Reads the bytecodes of a class and calls back to a user function. 
bool bcompiler_read ( resource $filehandle ) Reads data from a open file handle and creates classes from the bytecodes. 
bool bcompiler_write_class ( resource $filehandle , string $className [, string $extends ] ) Reads the bytecodes from PHP for an existing class, and writes them to the open file handle. 
bool bcompiler_write_constant ( resource $filehandle , string $constantName ) Reads the bytecodes from PHP for an existing constant, and writes them to the open file handle. 
bool bcompiler_write_exe_footer ( resource $filehandle , int $startpos ) 
bool bcompiler_write_file ( resource $filehandle , string $filename ) This function compiles specified source file into bytecodes, and writes them to the open file handle. 
bool bcompiler_write_footer ( resource $filehandle ) Writes the single character \x00 to indicate End of compiled data. 
bool bcompiler_write_function ( resource $filehandle , string $functionName ) Reads the bytecodes from PHP for an existing function, and writes them to the open file handle. Order is not important, (eg. if function b uses function a, and you compile it like the example below, it will work perfectly OK). 
bool bcompiler_write_functions_from_file ( resource $filehandle , string $fileName ) Searches for all functions declared in the given file, and writes their correspondent bytecodes to the open file handle. 
bool bcompiler_write_header ( resource $filehandle [, string $write_ver ] ) Writes the header part of a bcompiler file. 
bool bcompiler_write_included_filename ( resource $filehandle , string $filename ) 
bool fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code ) Adds a script to the FDF, which Acrobat then adds to the doc-level scripts of a document, once the FDF is imported into it. 
bool fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename ) 
void fdf_close ( resource $fdf_document ) Closes the FDF document. 
resource fdf_create ( void ) 
bool fdf_enum_values ( resource $fdf_document , callable $function [, mixed $userdata ] ) 
int fdf_errno ( void ) 
string fdf_error ([ int $error_code = -1 ] ) Gets a textual description for the FDF error code given in error_code. 
bool fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename ) Gets the appearance of a field (i.e. the value of the /AP key) and stores it in a file. 
array fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath ) Extracts a file uploaded by means of the "file selection" field fieldname and stores it under savepath. 
string fdf_get_encoding ( resource $fdf_document ) Gets the value of the /Encoding key. 
string fdf_get_file ( resource $fdf_document ) Gets the value of the /F key. 
int fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags ) 
mixed fdf_get_opt ( resource $fdf_document , string $fieldname [, int $element = -1 ] ) 
string fdf_get_status ( resource $fdf_document ) Gets the value of the /STATUS key. 
mixed fdf_get_value ( resource $fdf_document , string $fieldname [, int $which = -1 ] ) Gets the value for the requested field. 
string fdf_get_version ([ resource $fdf_document ] ) Return the FDF version for the given document, or the toolkit API version number if no parameter is given. 
void fdf_header ( void ) This is a convenience function to set appropriate HTTP headers for FDF output. It sets the Content-type: to application/vnd.fdf. 
string fdf_next_field_name ( resource $fdf_document [, string $fieldname ] ) Gets the name of the field after the given field. This name can be used with several functions. 
resource fdf_open_string ( string $fdf_data ) 
resource fdf_open ( string $filename ) 
bool fdf_remove_item ( resource $fdf_document , string $fieldname , int $item ) 
string fdf_save_string ( resource $fdf_document ) Returns the FDF document as a string. 
bool fdf_save ( resource $fdf_document [, string $filename ] ) Saves a FDF document. 
bool fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number ) Sets the appearance of a field (i.e. the value of the /AP key). 
bool fdf_set_encoding ( resource $fdf_document , string $encoding ) Sets the character encoding for the FDF document. 
bool fdf_set_file ( resource $fdf_document , string $url [, string $target_frame ] ) Selects a different PDF document to display the form results in then the form it originated from. 
bool fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags ) Sets certain flags of the given field. 
bool fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script ) Sets a javascript action for the given field. 
bool fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import ) 
bool fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 ) Sets options of the given field. 
bool fdf_set_status ( resource $fdf_document , string $status ) Sets the value of the /STATUS key. When a client receives a FDF with a status set it will present the value in an alert box. 
bool fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags ) Sets a submit form action for the given field. 
bool fdf_set_target_frame ( resource $fdf_document , string $frame_name ) Sets the target frame to display a result PDF defined with fdf_save_file() in. 
bool fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value [, int $isName ] ) Sets the value for the given field. 
bool fdf_set_version ( resource $fdf_document , string $version ) 
bool apc_add ( string $key , mixed $var [, int $ttl = 0 ] ) 
string apc_bin_dump ([ array $files = NULL [, array $user_vars = NULL ]] ) Returns a binary dump of the given files and user variables from the APC cache. A NULL for files or user_vars signals a dump of every entry, whereas array() will dump nothing. 
int apc_bin_dumpfile ( array $files , array $user_vars , string $filename [, int $flags = 0 [, resource $context = NULL ]] ) Outputs a binary dump of the given files and user variables from the APC cache to the named file. 
bool apc_bin_load ( string $data [, int $flags = 0 ] ) Loads the given binary dump into the APC file/user cache. 
bool apc_bin_loadfile ( string $filename [, resource $context = NULL [, int $flags = 0 ]] ) Loads a binary dump from a file into the APC file/user cache. 
array apc_cache_info ([ string $cache_type = "" [, bool $limited = FALSE ]] ) Retrieves cached information and meta-data from APC's data store. 
bool apc_cas ( string $key , int $old , int $new ) apc_cas() updates an already existing integer value if the old parameter matches the currently stored value with the value of the new parameter. 
bool apc_clear_cache ([ string $cache_type = "" ] ) Clears the user/system cache. 
mixed apc_compile_file ( string $filename [, bool $atomic = TRUE ] ) Stores a file in the bytecode cache, bypassing all filters. 
int apc_dec ( string $key [, int $step = 1 [, bool &$success ]] ) Decreases a stored integer value. 
bool apc_define_constants ( string $key , array $constants [, bool $case_sensitive = TRUE ] ) 
mixed apc_delete_file ( mixed $keys ) Deletes the given files from the opcode cache. 
mixed apc_delete ( string $key ) Removes a stored variable from the cache. 
mixed apc_exists ( mixed $keys ) Checks if one or more APC keys exist. 
mixed apc_fetch ( mixed $key [, bool &$success ] ) Fetchs a stored variable from the cache. 
int apc_inc ( string $key [, int $step = 1 [, bool &$success ]] ) Increases a stored number. 
bool apc_load_constants ( string $key [, bool $case_sensitive = TRUE ] ) Loads a set of constants from the cache. 
array apc_sma_info ([ bool $limited = FALSE ] ) Retrieves APC's Shared Memory Allocation information. 
bool apc_store ( string $key , mixed $var [, int $ttl = 0 ] ) 
bool apd_breakpoint ( int $debug_level ) This can be used to stop the running of your script, and await responses on the connected socket. To step the program, just send enter (a blank line), or enter a php command to be executed. 
array apd_callstack ( void ) Returns the current call stack as an array 
void apd_clunk ( string $warning [, string $delimiter = "<BR />" ] ) Behaves like perl's Carp::cluck. Throw a warning and a callstack. 
bool apd_continue ( int $debug_level ) Usually sent via the socket to restart the interpreter. 
void apd_croak ( string $warning [, string $delimiter = "<BR />" ] ) Behaves like perl's Carp::croak. Throw an error, a callstack and then exit. 
void apd_dump_function_table ( void ) Outputs the current function table. 
array apd_dump_persistent_resources ( void ) Return all persistent resources as an array. 
array apd_dump_regular_resources ( void ) Return all current regular resources as an array. 
bool apd_echo ( string $output ) Usually sent via the socket to request information about the running script. 
array apd_get_active_symbols ( void ) Returns the names of all the variables defined in the active scope, (not their values). 
string apd_set_pprof_trace ([ string $dump_directory = ini_get("apd.dumpdir") [, string $fragment = "pprof" ]] ) Starts debugging to pprof_{process_id} in the dump directory. 
bool apd_set_session_trace_socket ( string $tcp_server , int $socket_type , int $port , int $debug_level ) Connects to the specified tcp_server (eg. tcplisten) and sends debugging data to the socket. 
void apd_set_session_trace ( int $debug_level [, string $dump_directory = ini_get("apd.dumpdir") ] ) Starts debugging to apd_dump_{process_id} in the dump directory. 
void apd_set_session ( int $debug_level ) This can be used to increase or decrease debugging in a different area of your application. 
bool override_function ( string $function_name , string $function_args , string $function_code ) Overrides built-in functions by replacing them in the symbol table. 
bool rename_function ( string $original_name , string $new_name ) Renames a orig_name to new_name in the global function table. Useful for temporarily overriding built-in functions. 
CairoContext cairo_create ( CairoSurface $surface ) 
CairoFontOptions cairo_font_options_create ( void ) 
bool cairo_font_options_equal ( CairoFontOptions $options , CairoFontOptions $other ) 
int cairo_font_options_get_antialias ( CairoFontOptions $options ) 
int cairo_font_options_get_hint_metrics ( CairoFontOptions $options ) 
int cairo_font_options_get_hint_style ( CairoFontOptions $options ) 
int cairo_font_options_get_subpixel_order ( CairoFontOptions $options ) 
int cairo_font_options_hash ( CairoFontOptions $options ) 
void cairo_font_options_merge ( CairoFontOptions $options , CairoFontOptions $other ) 
void cairo_font_options_set_antialias ( CairoFontOptions $options , int $antialias ) 
void cairo_font_options_set_hint_metrics ( CairoFontOptions $options , int $hint_metrics ) 
void cairo_font_options_set_hint_style ( CairoFontOptions $options , int $hint_style ) 
void cairo_font_options_set_subpixel_order ( CairoFontOptions $options , int $subpixel_order ) 
int cairo_font_options_status ( CairoFontOptions $options ) 
int cairo_format_stride_for_width ( int $format , int $width ) 
CairoImageSurface cairo_image_surface_create_for_data ( string $data , int $format , int $width , int $height [, int $stride = -1 ] ) 
CairoImageSurface cairo_image_surface_create_from_png ( mixed $file ) 
CairoImageSurface cairo_image_surface_create ( int $format , int $width , int $height ) 
string cairo_image_surface_get_data ( CairoImageSurface $surface ) 
int cairo_image_surface_get_format ( CairoImageSurface $surface ) 
int cairo_image_surface_get_height ( CairoImageSurface $surface ) 
int cairo_image_surface_get_stride ( CairoImageSurface $surface ) 
int cairo_image_surface_get_width ( CairoImageSurface $surface ) 
cairo_matrix_create_scale(->) This function is an alias of: CairoMatrix::initScale().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
cairo_matrix_create_translate(->) This function is an alias of: CairoMatrix::initTranslate().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
void cairo_matrix_invert ( CairoMatrix $matrix ) 
CairoMatrix cairo_matrix_multiply ( CairoMatrix $matrix1 , CairoMatrix $matrix2 ) 
array cairo_matrix_transform_distance ( CairoMatrix $matrix , float $dx , float $dy ) 
array cairo_matrix_transform_point ( CairoMatrix $matrix , float $dx , float $dy ) 
void cairo_matrix_translate ( CairoMatrix $matrix , float $tx , float $ty ) 
void cairo_pattern_add_color_stop_rgb ( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue ) 
void cairo_pattern_add_color_stop_rgba ( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue , float $alpha ) 
CairoPattern cairo_pattern_create_for_surface ( CairoSurface $surface ) 
CairoPattern cairo_pattern_create_linear ( float $x0 , float $y0 , float $x1 , float $y1 ) 
CairoPattern cairo_pattern_create_radial ( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1 ) 
CairoPattern cairo_pattern_create_rgb ( float $red , float $green , float $blue ) 
CairoPattern cairo_pattern_create_rgba ( float $red , float $green , float $blue , float $alpha ) 
int cairo_pattern_get_color_stop_count ( CairoGradientPattern $pattern ) 
array cairo_pattern_get_color_stop_rgba ( CairoGradientPattern $pattern , int $index ) 
int cairo_pattern_get_extend ( string $pattern ) 
int cairo_pattern_get_filter ( CairoSurfacePattern $pattern ) 
array cairo_pattern_get_linear_points ( CairoLinearGradient $pattern ) 
CairoMatrix cairo_pattern_get_matrix ( CairoPattern $pattern ) 
array cairo_pattern_get_radial_circles ( CairoRadialGradient $pattern ) 
array cairo_pattern_get_rgba ( CairoSolidPattern $pattern ) 
CairoSurface cairo_pattern_get_surface ( CairoSurfacePattern $pattern ) 
int cairo_pattern_get_type ( CairoPattern $pattern ) 
void cairo_pattern_set_extend ( string $pattern , string $extend ) 
void cairo_pattern_set_filter ( CairoSurfacePattern $pattern , int $filter ) 
void cairo_pattern_set_matrix ( CairoPattern $pattern , CairoMatrix $matrix ) 
int cairo_pattern_status ( CairoPattern $pattern ) 
CairoPdfSurface cairo_pdf_surface_create ( string $file , float $width , float $height ) 
void cairo_pdf_surface_set_size ( CairoPdfSurface $surface , float $width , float $height ) 
array cairo_ps_get_levels ( void ) 
string cairo_ps_level_to_string ( int $level ) 
CairoPsSurface cairo_ps_surface_create ( string $file , float $width , float $height ) 
void cairo_ps_surface_dsc_begin_page_setup ( CairoPsSurface $surface ) 
void cairo_ps_surface_dsc_begin_setup ( CairoPsSurface $surface ) 
void cairo_ps_surface_dsc_comment ( CairoPsSurface $surface , string $comment ) 
bool cairo_ps_surface_get_eps ( CairoPsSurface $surface ) 
void cairo_ps_surface_restrict_to_level ( CairoPsSurface $surface , int $level ) 
void cairo_ps_surface_set_eps ( CairoPsSurface $surface , bool $level ) 
void cairo_ps_surface_set_size ( CairoPsSurface $surface , float $width , float $height ) 
CairoScaledFont cairo_scaled_font_create ( CairoFontFace $fontface , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $fontoptions ) 
array cairo_scaled_font_extents ( CairoScaledFont $scaledfont ) 
CairoMatrix cairo_scaled_font_get_ctm ( CairoScaledFont $scaledfont ) 
CairoFontFace cairo_scaled_font_get_font_face ( CairoScaledFont $scaledfont ) 
CairoFontOptions cairo_scaled_font_get_font_matrix ( CairoScaledFont $scaledfont ) 
CairoFontOptions cairo_scaled_font_get_font_options ( CairoScaledFont $scaledfont ) 
CairoMatrix cairo_scaled_font_get_scale_matrix ( CairoScaledFont $scaledfont ) 
int cairo_scaled_font_get_type ( CairoScaledFont $scaledfont ) 
array cairo_scaled_font_glyph_extents ( CairoScaledFont $scaledfont , array $glyphs ) 
int cairo_scaled_font_status ( CairoScaledFont $scaledfont ) 
array cairo_scaled_font_text_extents ( CairoScaledFont $scaledfont , string $text ) 
void cairo_surface_copy_page ( CairoSurface $surface ) 
CairoSurface cairo_surface_create_similar ( CairoSurface $surface , int $content , float $width , float $height ) 
void cairo_surface_finish ( CairoSurface $surface ) 
void cairo_surface_flush ( CairoSurface $surface ) 
int cairo_surface_get_content ( CairoSurface $surface ) 
array cairo_surface_get_device_offset ( CairoSurface $surface ) 
CairoFontOptions cairo_surface_get_font_options ( CairoSurface $surface ) 
int cairo_surface_get_type ( CairoSurface $surface ) 
void cairo_surface_mark_dirty_rectangle ( CairoSurface $surface , float $x , float $y , float $width , float $height ) 
void cairo_surface_mark_dirty ( CairoSurface $surface ) 
void cairo_surface_set_device_offset ( CairoSurface $surface , float $x , float $y ) 
void cairo_surface_set_fallback_resolution ( CairoSurface $surface , float $x , float $y ) 
void cairo_surface_show_page ( CairoSurface $surface ) 
int cairo_surface_status ( CairoSurface $surface ) 
void cairo_surface_write_to_png ( CairoSurface $surface , resource $stream ) 
CairoSvgSurface cairo_svg_surface_create ( string $file , float $width , float $height ) 
void cairo_svg_surface_restrict_to_version ( CairoSvgSurface $surface , int $version ) 
string cairo_svg_version_to_string ( int $version ) 
bool chdb_create ( string $pathname , array $data ) 
array classkit_import ( string $filename ) 
bool classkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] ) 
bool classkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] ) 
bool classkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] ) 
bool classkit_method_remove ( string $classname , string $methodname ) 
bool classkit_method_rename ( string $classname , string $methodname , string $newname ) 
bool crack_check ( resource $dictionary , string $password ) 
bool crack_closedict ([ resource $dictionary ] ) 
string crack_getlastmessage ( void ) 
resource crack_opendict ( string $dictionary ) 
bool cubrid_bind ( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ] ) 
cubrid_close_prepare(->) bool cubrid_close_prepare ( resource $req_identifier ) The cubrid_close_prepare() function closes the request handle given by the req_identifier argument, and releases the memory region related to the handle. It is an alias of cubrid_close_request(). 
cubrid_close_request(->) bool cubrid_close_request ( resource $req_identifier ) The cubrid_close_request() function closes the request handle given by the req_identifier argument, and releases the memory region related to the handle. It is an alias of cubrid_close_prepare(). 
array cubrid_col_get ( resource $conn_identifier , string $oid , string $attr_name ) The cubrid_col_get() function is used to get contents of the elements of the collection type (set, multiset, sequence) attribute you requested as an array. 
int cubrid_col_size ( resource $conn_identifier , string $oid , string $attr_name ) The cubrid_col_size() function is used to get the number of elements in a collection type (set, multiset, sequence) attribute. 
array cubrid_column_names ( resource $req_identifier ) The cubrid_column_names() function is used to get the column names of the query result by using req_identifier. 
array cubrid_column_types ( resource $req_identifier ) The cubrid_column_types() function gets column types of query results by using req_identifier. 
bool cubrid_commit ( resource $conn_identifier ) 
resource cubrid_connect_with_url ( string $conn_url [, string $userid [, string $passwd [, bool $new_link = FALSE ]]] ) 
resource cubrid_connect ( string $host , int $port , string $dbname [, string $userid [, string $passwd [, bool $new_link = FALSE ]]] ) The cubrid_connect() function is used to establish the environment for connecting to your server by using your server address, port number, database name, user name, and password. If the user name and password is not given, then the "PUBLIC" connection will be made by default. 
string cubrid_current_oid ( resource $req_identifier ) The cubrid_current_oid() function is used to get the oid of the current cursor location from the query result. To use cubrid_current_oid(), the query executed must be a updatable query, and the CUBRID_INCLUDE_OID option must be included during the query execution. 
bool cubrid_disconnect ([ resource $conn_identifier ] ) The cubrid_disconnect() function closes the connection handle and disconnects from server. If any request handle is not closed at this point, it will be closed. It is similar to the CUBRID MySQL compatible function cubrid_close(). 
bool cubrid_drop ( resource $conn_identifier , string $oid ) The cubrid_drop() function is used to delete an instance from database by using the oid of the instance. 
int cubrid_error_code_facility ( void ) The cubrid_error_code_facility() function is used to get the facility code (level in which the error occurred) from the error code of the error that occurred during the API execution. Usually, you can get the error code when API returns false as its return value. 
int cubrid_error_code ( void ) The cubrid_error_code() function is used to get the error code of the error that occurred during the API execution. Usually, it gets the error code when API returns false as its return value. 
string cubrid_error_msg ( void ) The cubrid_error_msg() function is used to get the error message that occurred during the use of CUBRID API. Usually, it gets error message when API returns false as its return value. 
resource cubrid_execute ( resource $conn_identifier , string $sql [, int $option = 0 ] ) 
mixed cubrid_fetch ( resource $result [, int $type = CUBRID_BOTH ] ) The cubrid_fetch() function is used to get a single row from the query result. The cursor automatically moves to the next row after getting the result. 
bool cubrid_free_result ( resource $req_identifier ) This function frees the memory occupied by the result data. It returns TRUE on success or FALSE on failure. Note that it can only frees the client fetch buffer now, and if you want free all memory, use function cubrid_close_request(). 
bool cubrid_get_autocommit ( resource $conn_identifier ) 
string cubrid_get_charset ( resource $conn_identifier ) This function returns the current CUBRID connection charset and is similar to the CUBRID MySQL compatible function cubrid_client_encoding(). 
string cubrid_get_class_name ( resource $conn_identifier , string $oid ) The cubrid_get_class_name() function is used to get the class name from oid. It doesn't work when selecting data from the system tables, for example db_class. 
string cubrid_get_client_info ( void ) This function returns a string that represents the client library version. 
array cubrid_get_db_parameter ( resource $conn_identifier ) 
int cubrid_get_query_timeout ( resource $req_identifier ) The cubrid_get_query_timeout() function is used to get the query timeout of the request. 
string cubrid_get_server_info ( resource $conn_identifier ) This function returns a string that represents the CUBRID server version. 
mixed cubrid_get ( resource $conn_identifier , string $oid [, mixed $attr ] ) The cubrid_get() function is used to get the attribute of the instance of the given oid. You can get single attribute by using string data type for the attr argument, or many attributes by using array data type for the attr argument. 
string cubrid_insert_id ([ resource $conn_identifier ] ) 
int cubrid_is_instance ( resource $conn_identifier , string $oid ) The cubrid_is_instance() function is used to check whether the instance pointed by the given oid exists or not. 
bool cubrid_lob_close ( array $lob_identifier_array ) cubrid_lob_close() is used to close all BLOB/CLOB returned from cubrid_lob_get(). 
bool cubrid_lob_export ( resource $conn_identifier , resource $lob_identifier , string $path_name ) cubrid_lob_export() is used to get BLOB/CLOB data from CUBRID database, and saves its contents to a file. To use this function, you must use cubrid_lob_get() first to get BLOB/CLOB info from CUBRID. 
array cubrid_lob_get ( resource $conn_identifier , string $sql ) 
bool cubrid_lob_send ( resource $conn_identifier , resource $lob_identifier ) cubrid_lob_send() reads BLOB/CLOB data and passes it straight through to the browser. To use this function, you must use cubrid_lob_get() first to get BLOB/CLOB info from CUBRID. 
string cubrid_lob_size ( resource $lob_identifier ) cubrid_lob_size() is used to get BLOB/CLOB data size. 
bool cubrid_lob2_bind ( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ] ) The cubrid_lob2_bind() function is used to bind BLOB/CLOB datas to a corresponding question mark placeholder in the SQL statement that was passed to cubrid_prepare(). If bind_value_type is not given, string will be "BLOB" as the default. But if you use cubrid_lob2_new() before, bind_value_type will be consistent with type in cubrid_lob2_new() as the default. 
bool cubrid_lob2_close ( resource $lob_identifier ) The cubrid_lob2_close() function is used to close LOB object returned from cubrid_lob2_new() or got from the result set. 
bool cubrid_lob2_export ( resource $lob_identifier , string $file_name ) The cubrid_lob2_export() function is used to save the contents of BLOB/CLOB data to a file. To use this function, you must use cubrid_lob2_new() or fetch a lob object from CUBRID database first. If the file already exists, the operation will fail. This function will not influence the cursor position of the lob object. It operates the entire lob object. 
bool cubrid_lob2_import ( resource $lob_identifier , string $file_name ) The cubrid_lob2_import() function is used to save the contents of BLOB/CLOB data from a file. To use this function, you must use cubrid_lob2_new() or fetch a lob object from CUBRID database first. If the file already exists, the operation will fail. This function will not influence the cursor position of the lob object. It operates the entire lob object. 
resource cubrid_lob2_new ([ resource $conn_identifier [, string $type = "BLOB" ]] ) The cubrid_lob2_new() function is used to create a lob object (both BLOB and CLOB). This function should be used before you bind a lob object. 
string cubrid_lob2_read ( resource $lob_identifier , int $len ) The cubrid_lob2_read() function reads len bytes from the LOB data and returns the bytes read. 
bool cubrid_lob2_seek64 ( resource $lob_identifier , string $offset [, int $origin = CUBRID_CURSOR_CURRENT ] ) 
bool cubrid_lob2_seek ( resource $lob_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] ) 
string cubrid_lob2_size64 ( resource $lob_identifier ) The cubrid_lob2_size64() function is used to get the size of a lob object. If the size of a lob object is larger than an integer data can be stored, you can use this function and it will return the size as a string. 
int cubrid_lob2_size ( resource $lob_identifier ) The cubrid_lob2_size() function is used to get the size of a lob object. 
string cubrid_lob2_tell64 ( resource $lob_identifier ) The cubrid_lob2_tell64() function is used to tell the cursor position of the LOB object. If the size of a lob object is larger than an integer data can be stored, you can use this function and it will return the position information as a string. 
int cubrid_lob2_tell ( resource $lob_identifier ) The cubrid_lob2_tell() function is used to tell the cursor position of the LOB object. 
bool cubrid_lob2_write ( resource $lob_identifier , string $buf ) The cubrid_lob2_write() function reads as much as data from buf and stores it to the LOB object. Note that this function can only append characters now. 
bool cubrid_lock_read ( resource $conn_identifier , string $oid ) The cubrid_lock_read() function is used to put read lock on the instance pointed by given oid. 
bool cubrid_lock_write ( resource $conn_identifier , string $oid ) The cubrid_lock_write() function is used to put write lock on the instance pointed by the given oid. 
bool cubrid_move_cursor ( resource $req_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] ) 
bool cubrid_next_result ( resource $result ) The cubrid_next_result() function is used to get results of next query if multiple SQL statements are executed and CUBRID_EXEC_QUERY_ALL flag is set upon cubrid_execute(). 
int cubrid_num_cols ( resource $result ) The cubrid_num_cols() function is used to get the number of columns from the query result. It can only be used when the query executed is a select statement. 
int cubrid_num_rows ( resource $result ) 
resource cubrid_pconnect_with_url ( string $conn_url [, string $userid [, string $passwd ]] ) 
resource cubrid_pconnect ( string $host , int $port , string $dbname [, string $userid [, string $passwd ]] ) 
resource cubrid_prepare ( resource $conn_identifier , string $prepare_stmt [, int $option = 0 ] ) 
bool cubrid_put ( resource $conn_identifier , string $oid [, string $attr ], mixed $value ) 
bool cubrid_rollback ( resource $conn_identifier ) 
array cubrid_schema ( resource $conn_identifier , int $schema_type [, string $class_name [, string $attr_name ]] ) 
bool cubrid_seq_drop ( resource $conn_identifier , string $oid , string $attr_name , int $index ) The cubrid_seq_drop() function is used to delete an element you request from the given sequence type attribute in the database. 
bool cubrid_seq_insert ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element ) The cubrid_col_insert() function is used to insert an element to a sequence type attribute in a requested location. 
bool cubrid_seq_put ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element ) The cubrid_seq_put() function is used to update the content of the requested element in a sequent type attribute using OID. 
bool cubrid_set_add ( resource $conn_identifier , string $oid , string $attr_name , string $set_element ) The cubrid_set_add() function is used to insert a single element to a set type attribute (set, multiset, sequence) you requested. 
bool cubrid_set_autocommit ( resource $conn_identifier , bool $mode ) 
bool cubrid_set_db_parameter ( resource $conn_identifier , int $param_type , int $param_value ) 
bool cubrid_set_drop ( resource $conn_identifier , string $oid , string $attr_name , string $set_element ) The cubrid_set_drop() function is used to delete an element that you request from the given set type (set, multiset) attribute of the database. 
bool cubrid_set_query_timeout ( resource $req_identifier , int $timeout ) The cubrid_set_query_timeout() function is used to set the timeout time of query execution. 
string cubrid_version ( void ) The cubrid_version() function is used to get the CUBRID PHP module's version. 
void cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] ) 
bool cyrus_bind ( resource $connection , array $callbacks ) Binds callbacks to a Cyrus IMAP connection. 
bool cyrus_close ( resource $connection ) Closes the connection to a Cyrus IMAP server. 
resource cyrus_connect ([ string $host [, string $port [, int $flags ]]] ) Connects to a Cyrus IMAP server. 
array cyrus_query ( resource $connection , string $query ) Sends a query to a Cyrus IMAP server. 
bool cyrus_unbind ( resource $connection , string $trigger_name ) 
int dbplus_add ( resource $relation , array $tuple ) Adds a tuple to a relation. 
resource dbplus_aql ( string $query [, string $server [, string $dbpath ]] ) Executes an AQL query on the given server and dbpath. 
string dbplus_chdir ([ string $newdir ] ) Changes the virtual current directory where relation files will be looked for by dbplus_open(). 
mixed dbplus_close ( resource $relation ) Closes a relation previously opened by dbplus_open(). 
int dbplus_curr ( resource $relation , array &$tuple ) Reads the data for the current tuple for the given relation. 
string dbplus_errcode ([ int $errno ] ) Returns a clear error string for the given error code. 
int dbplus_errno ( void ) Returns the error code returned by the last db++ operation. 
int dbplus_find ( resource $relation , array $constraints , mixed $tuple ) 
int dbplus_first ( resource $relation , array &$tuple ) Reads the data for the first tuple for the given relation, makes it the current tuple and pass it back as an associative array in tuple. 
int dbplus_flush ( resource $relation ) Writes all changes applied to relation since the last flush to disk. 
int dbplus_freealllocks ( void ) Frees all tuple locks held by this client. 
int dbplus_freelock ( resource $relation , string $tuple ) Releases a write lock on the given tuple previously obtained by dbplus_getlock(). 
int dbplus_freerlocks ( resource $relation ) Frees all tuple locks held on the given relation. 
int dbplus_getlock ( resource $relation , string $tuple ) Requests a write lock on the specified tuple. 
int dbplus_getunique ( resource $relation , int $uniqueid ) Obtains a number guaranteed to be unique for the given relation and will pass it back in the variable given as uniqueid. 
int dbplus_info ( resource $relation , string $key , array &$result ) 
int dbplus_last ( resource $relation , array &$tuple ) Reads the data for the last tuple for the given relation, makes it the current tuple and pass it back as an associative array in tuple. 
int dbplus_lockrel ( resource $relation ) 
int dbplus_next ( resource $relation , array &$tuple ) Reads the data for the next tuple for the given relation, makes it the current tuple and will pass it back as an associative array in tuple. 
resource dbplus_open ( string $name ) Opens the given relation file. 
int dbplus_prev ( resource $relation , array &$tuple ) Reads the data for the previous tuple for the given relation, makes it the current tuple and will pass it back as an associative array in tuple. 
int dbplus_rchperm ( resource $relation , int $mask , string $user , string $group ) Changes access permissions as specified by mask, user and group. The values for these are operating system specific. 
resource dbplus_rcreate ( string $name , mixed $domlist [, bool $overwrite ] ) Creates a new relation. Any existing relation sharing the same name will be overwritten if the relation is currently not in use and overwrite is set to TRUE. 
mixed dbplus_rcrtexact ( string $name , resource $relation [, bool $overwrite ] ) dbplus_rcrtexact() will create an exact but empty copy of the given relation under a new name. 
mixed dbplus_rcrtlike ( string $name , resource $relation [, int $overwrite ] ) dbplus_rcrtexact() will create an empty copy of the given relation under a new name, but with default indices. 
array dbplus_resolve ( string $relation_name ) dbplus_resolve() will try to resolve the given relation_name and find out internal server id, real hostname and the database path on this host. 
int dbplus_restorepos ( resource $relation , array $tuple ) 
mixed dbplus_rkeys ( resource $relation , mixed $domlist ) dbplus_rkeys() will replace the current primary key for relation with the combination of domains specified by domlist. 
resource dbplus_ropen ( string $name ) dbplus_ropen() will open the relation file locally for quick access without any client/server overhead. Access is read only and only dbplus_curr() and dbplus_next() may be applied to the returned relation. 
resource dbplus_rquery ( string $query [, string $dbpath ] ) dbplus_rquery() performs a local (raw) AQL query using an AQL interpreter embedded into the db++ client library. dbplus_rquery() is faster than dbplus_aql() but will work on local data only. 
int dbplus_rrename ( resource $relation , string $name ) dbplus_rrename() will change the name of relation to name. 
mixed dbplus_rsecindex ( resource $relation , mixed $domlist , int $type ) dbplus_rsecindex() will create a new secondary index for relation with consists of the domains specified by domlist and is of type type 
int dbplus_runlink ( resource $relation ) dbplus_runlink() will close and remove the relation. 
int dbplus_rzap ( resource $relation ) dbplus_rzap() will remove all tuples from relation. 
int dbplus_savepos ( resource $relation ) 
int dbplus_setindex ( resource $relation , string $idx_name ) 
int dbplus_setindexbynumber ( resource $relation , int $idx_number ) 
resource dbplus_sql ( string $query [, string $server [, string $dbpath ]] ) 
string dbplus_tcl ( int $sid , string $script ) 
int dbplus_tremove ( resource $relation , array $tuple [, array &$current ] ) dbplus_tremove() removes tuple from relation if it perfectly matches a tuple within the relation. current, if given, will contain the data of the new current tuple after calling dbplus_tremove(). 
int dbplus_undo ( resource $relation ) 
int dbplus_undoprepare ( resource $relation ) 
int dbplus_unlockrel ( resource $relation ) Release a write lock previously obtained by dbplus_lockrel(). 
int dbplus_unselect ( resource $relation ) Calling dbplus_unselect() will remove a constraint previously set by dbplus_find() on relation. 
int dbplus_update ( resource $relation , array $old , array $new ) dbplus_update() replaces the old tuple with the data from the new one, only if the old completely matches a tuple within relation. 
int dbplus_xlockrel ( resource $relation ) Request an exclusive lock on relation preventing even read access from other clients. 
int dbplus_xunlockrel ( resource $relation ) Releases an exclusive lock previously obtained by dbplus_xlockrel(). 
int dbx_close ( object $link_identifier ) 
int dbx_compare ( array $row_a , array $row_b , string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE ] ) dbx_compare() is a helper function for dbx_sort() to ease the make and use of the custom sorting function. 
object dbx_connect ( mixed $module , string $host , string $database , string $username , string $password [, int $persistent ] ) Opens a connection to a database. 
string dbx_error ( object $link_identifier ) dbx_error() returns the last error message. 
string dbx_escape_string ( object $link_identifier , string $text ) Escape the given string so that it can safely be used in an sql-statement. 
mixed dbx_fetch_row ( object $result_identifier ) 
mixed dbx_query ( object $link_identifier , string $sql_statement [, int $flags ] ) Sends a query and fetch all results. 
bool dbx_sort ( object $result , string $user_compare_function ) Sort a result from a dbx_query() call with a custom sort function. 
void dio_close ( resource $fd ) The function dio_close() closes the file descriptor fd. 
mixed dio_fcntl ( resource $fd , int $cmd [, mixed $args ] ) The dio_fcntl() function performs the operation specified by cmd on the file descriptor fd. Some commands require additional arguments args to be supplied. 
resource dio_open ( string $filename , int $flags [, int $mode = 0 ] ) dio_open() opens a file and returns a new file descriptor for it. 
string dio_read ( resource $fd [, int $len = 1024 ] ) The function dio_read() reads and returns len bytes from file with descriptor fd. 
int dio_seek ( resource $fd , int $pos [, int $whence = SEEK_SET ] ) The function dio_seek() is used to change the file position of the given file descriptor. 
array dio_stat ( resource $fd ) dio_stat() returns information about the given file descriptor. 
bool dio_tcsetattr ( resource $fd , array $options ) dio_tcsetattr() sets the terminal attributes and baud rate of the open fd. 
bool dio_truncate ( resource $fd , int $offset ) 
int dio_write ( resource $fd , string $data [, int $len = 0 ] ) dio_write() writes up to len bytes from data to file fd. 
resource eio_busy ( int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_busy() artificially increases load taking delay seconds to execute. May be used for debugging, or benchmarking. 
void eio_cancel ( resource $req ) eio_cancel() cancels a request specified by req 
resource eio_chmod ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_chmod() changes file, or direcrory permissions. The new permissions are specified by mode. 
resource eio_chown ( string $path , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] ) Changes file, or directory permissions. 
resource eio_close ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_close() closes file specified by fd. 
resource eio_custom ( callable $execute , int $pri , callable $callback [, mixed $data = NULL ] ) eio_custom() executes custom function specified by execute processing it just like any other eio_* call. 
resource eio_dup2 ( mixed $fd , mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_dup2() duplicates file descriptor. 
bool eio_event_loop ( void ) eio_event_loop() polls libeio until all requests proceeded. 
resource eio_fallocate ( mixed $fd , int $mode , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) 
resource eio_fchmod ( mixed $fd , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_fchmod() changes permissions for the file specified by fd file descriptor. 
resource eio_fchown ( mixed $fd , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] ) eio_fchown() changes ownership of the file specified by fd file descriptor. 
resource eio_fdatasync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_fdatasync() synchronizes a file's in-core state with storage device. 
resource eio_fstat ( mixed $fd , int $pri , callable $callback [, mixed $data ] ) eio_fstat() returns file status information in result argument of callback 
resource eio_fstatvfs ( mixed $fd , int $pri , callable $callback [, mixed $data ] ) eio_fstatvfs() returns file system statistics in result of callback. 
resource eio_fsync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) Synchronize a file's in-core state with storage device 
resource eio_ftruncate ( mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] ) eio_ftruncate() causes a regular file referenced by fd file descriptor to be truncated to precisely length bytes. 
resource eio_futime ( mixed $fd , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_futime() changes file last access and modification times. 
mixed eio_get_event_stream ( void ) eio_get_event_stream() acquires stream representing a variable used in internal communications with libeio. Could be used to bind with some event loop provided by other PECL extension, for example libevent. 
string eio_get_last_error ( resource $req ) eio_get_last_error() returns string describing the last error associated with req. 
void eio_grp_add ( resource $grp , resource $req ) eio_grp_add() adds a request to the request group. 
void eio_grp_cancel ( resource $grp ) eio_grp_cancel() cancels a group request specified by grp request group resource. 
void eio_grp_limit ( resource $grp , int $limit ) Limit number of requests in the request group. 
resource eio_grp ( callable $callback [, string $data = NULL ] ) eio_grp() creates a request group. 
void eio_init ( void ) 
resource eio_link ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_link() creates a hardlink new_path for a file specified by path. 
resource eio_lstat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] ) eio_lstat() returns file status information in result argument of callback 
resource eio_mkdir ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_mkdir() creates directory with specified access mode. 
resource eio_mknod ( string $path , int $mode , int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) 
resource eio_nop ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_nop() does nothing, except go through the whole request cycle. Could be useful in debugging. 
int eio_npending ( void ) eio_npending() returns number of finished, but unhandled requests 
int eio_nready ( void ) 
int eio_nreqs ( void ) eio_nreqs() could be called in a custom loop calling eio_poll(). 
int eio_nthreads ( void ) 
resource eio_open ( string $path , int $flags , int $mode , int $pri , callable $callback [, mixed $data = NULL ] ) eio_open() opens file specified by path in access mode mode with 
int eio_poll ( void ) 
resource eio_read ( mixed $fd , int $length , int $offset , int $pri , callable $callback [, mixed $data = NULL ] ) eio_read() reads up to length bytes from fd file descriptor at offset. The read bytes are stored in result argument of callback. 
resource eio_readahead ( mixed $fd , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_readahead() populates the page cache with data from a file so that subsequent reads from that file will not block on disk I/O. See READAHEAD(2) man page for details. 
resource eio_readdir ( string $path , int $flags , int $pri , callable $callback [, string $data = NULL ] ) Reads through a whole directory(via the opendir, readdir and closedir system calls) and returns either the names or an array in result argument of callback function, depending on the flags argument. 
resource eio_readlink ( string $path , int $pri , callable $callback [, string $data = NULL ] ) 
resource eio_realpath ( string $path , int $pri , callable $callback [, string $data = NULL ] ) eio_realpath() returns the canonicalized absolute pathname in result argument of callback function. 
resource eio_rename ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_rename() renames or moves a file to new location. 
resource eio_rmdir ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_rmdir() removes a directory. 
resource eio_seek ( mixed $fd , int $offset , int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) 
resource eio_sendfile ( mixed $out_fd , mixed $in_fd , int $offset , int $length [, int $pri [, callable $callback [, string $data ]]] ) eio_sendfile() copies data between one file descriptor and another. See SENDFILE(2) man page for details. 
void eio_set_max_idle ( int $nthreads ) 
void eio_set_max_parallel ( int $nthreads ) 
void eio_set_max_poll_reqs ( int $nreqs ) 
void eio_set_max_poll_time ( float $nseconds ) Polling stops, if poll took longer than nseconds seconds. 
void eio_set_min_parallel ( string $nthreads ) 
resource eio_stat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] ) eio_stat() returns file status information in result argument of callback 
resource eio_statvfs ( string $path , int $pri , callable $callback [, mixed $data ] ) eio_statvfs() returns file system statistics information in result argument of callback 
resource eio_symlink ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_symlink() creates a symbolic link new_path to path. 
resource eio_sync_file_range ( mixed $fd , int $offset , int $nbytes , int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_sync_file_range() permits fine control when synchronizing the open file referred to by the file descriptor fd with disk. 
resource eio_sync ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) 
resource eio_syncfs ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) 
resource eio_truncate ( string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] ) eio_truncate() causes the regular file named by path to be truncated to a size of precisely length bytes 
resource eio_unlink ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) eio_unlink() deletes a name from the file system. 
resource eio_utime ( string $path , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ) 
resource eio_write ( mixed $fd , string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]]] ) eio_write() writes up to length bytes from str at offset offset from the beginning of the file. 
int expect_expectl ( resource $expect , array $cases [, array &$match ] ) 
resource expect_popen ( string $command ) Execute command via Bourne shell, and open the PTY stream to the process. 
bool fam_cancel_monitor ( resource $fam , resource $fam_monitor ) 
void fam_close ( resource $fam ) Closes a connection to the FAM service. 
resource fam_monitor_collection ( resource $fam , string $dirname , int $depth , string $mask ) 
resource fam_monitor_directory ( resource $fam , string $dirname ) 
resource fam_monitor_file ( resource $fam , string $filename ) 
array fam_next_event ( resource $fam ) 
resource fam_open ([ string $appname ] ) Opens a connection to the FAM service daemon. 
int fam_pending ( resource $fam ) Checks for pending FAM events. 
bool fam_resume_monitor ( resource $fam , resource $fam_monitor ) Resumes monitoring of a resource previously suspended using fam_suspend_monitor(). 
bool fam_suspend_monitor ( resource $fam , resource $fam_monitor ) 
int filepro_fieldcount ( void ) Returns the number of fields (columns) in the opened filePro database. 
string filepro_fieldname ( int $field_number ) Returns the name of the field corresponding to field_number. 
string filepro_fieldtype ( int $field_number ) Returns the edit type of the field corresponding to field_number. 
int filepro_fieldwidth ( int $field_number ) Returns the width of the field corresponding to field_number. 
string filepro_retrieve ( int $row_number , int $field_number ) 
int filepro_rowcount ( void ) 
bool filepro ( string $directory ) 
string fribidi_log2vis ( string $str , string $direction , int $charset ) Converts a logical string to a visual one. 
string geoip_asnum_by_name ( string $hostname ) The geoip_asnum_by_name() function will return the Autonomous System Numbers (ASN) associated with an IP address. 
string geoip_continent_code_by_name ( string $hostname ) The geoip_continent_code_by_name() function will return the two letter continent code corresponding to a hostname or an IP address. 
string geoip_country_code_by_name ( string $hostname ) The geoip_country_code_by_name() function will return the two letter country code corresponding to a hostname or an IP address. 
string geoip_country_code3_by_name ( string $hostname ) The geoip_country_code3_by_name() function will return the three letter country code corresponding to a hostname or an IP address. 
string geoip_country_name_by_name ( string $hostname ) The geoip_country_name_by_name() function will return the full country name corresponding to a hostname or an IP address. 
string geoip_database_info ([ int $database = GEOIP_COUNTRY_EDITION ] ) 
bool geoip_db_avail ( int $database ) 
string geoip_db_filename ( int $database ) 
array geoip_db_get_all_info ( void ) 
string geoip_domain_by_name ( string $hostname ) 
int geoip_id_by_name ( string $hostname ) 
string geoip_isp_by_name ( string $hostname ) 
string geoip_netspeedcell_by_name ( string $hostname ) 
string geoip_org_by_name ( string $hostname ) 
array geoip_record_by_name ( string $hostname ) 
array geoip_region_by_name ( string $hostname ) 
string geoip_region_name_by_code ( string $country_code , string $region_code ) 
void geoip_setup_custom_directory ( string $path ) The geoip_setup_custom_directory() function will change the default directory of the GeoIP database. This is equivalent to changing geoip.custom_directory. 
string geoip_time_zone_by_country_and_region ( string $country_code [, string $region_code ] ) 
bool gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase ) 
bool gnupg_addencryptkey ( resource $identifier , string $fingerprint ) 
bool gnupg_addsignkey ( resource $identifier , string $fingerprint [, string $passphrase ] ) 
bool gnupg_cleardecryptkeys ( resource $identifier ) 
bool gnupg_clearencryptkeys ( resource $identifier ) 
bool gnupg_clearsignkeys ( resource $identifier ) 
string gnupg_decrypt ( resource $identifier , string $text ) Decrypts the given text with the keys, which were set with gnupg_adddecryptkey before. 
array gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext ) Decrypts and verifies a given text and returns information about the signature. 
string gnupg_encrypt ( resource $identifier , string $plaintext ) Encrypts the given plaintext with the keys, which were set with gnupg_addencryptkey before and returns the encrypted text. 
string gnupg_encryptsign ( resource $identifier , string $plaintext ) Encrypts and signs the given plaintext with the keys, which were set with gnupg_addsignkey and gnupg_addencryptkey before and returns the encrypted and signed text. 
string gnupg_export ( resource $identifier , string $fingerprint ) Exports the key fingerprint. 
string gnupg_geterror ( resource $identifier ) 
int gnupg_getprotocol ( resource $identifier ) 
array gnupg_import ( resource $identifier , string $keydata ) Imports the key keydata and returns an array with information about the importprocess. 
resource gnupg_init ( void ) 
array gnupg_keyinfo ( resource $identifier , string $pattern ) 
bool gnupg_setarmor ( resource $identifier , int $armor ) Toggle the armored output. 
void gnupg_seterrormode ( resource $identifier , int $errormode ) Sets the mode for error_reporting. 
bool gnupg_setsignmode ( resource $identifier , int $signmode ) Sets the mode for signing. 
string gnupg_sign ( resource $identifier , string $plaintext ) Signs the given plaintext with the keys, which were set with gnupg_addsignkey before and returns the signed text or the signature, depending on what was set with gnupg_setsignmode. 
array gnupg_verify ( resource $identifier , string $signed_text , string $signature [, string &$plaintext ] ) Verifies the given signed_text and returns information about the signature. 
string gupnp_context_get_host_ip ( resource $context ) Get the IP address we advertise ourselves as using. 
int gupnp_context_get_port ( resource $context ) Get the port that the SOAP server is running on. 
int gupnp_context_get_subscription_timeout ( resource $context ) Get the event subscription timeout (in seconds), or 0 meaning there is no timeout. 
bool gupnp_context_host_path ( resource $context , string $local_path , string $server_path ) Start hosting local_path at server_path. Files with the path local_path.LOCALE (if they exist) will be served up when LOCALE is specified in the request's Accept-Language header. 
resource gupnp_context_new ([ string $host_ip [, int $port = 0 ]] ) Create a new context with the specified host_ip and port. 
void gupnp_context_set_subscription_timeout ( resource $context , int $timeout ) Sets the event subscription timeout (in seconds) to time out. Note that any client side subscriptions will automatically be renewed. 
bool gupnp_context_timeout_add ( resource $context , int $timeout , mixed $callback [, mixed $arg ] ) Sets a function to be called at regular intervals. 
bool gupnp_context_unhost_path ( resource $context , string $server_path ) Stop hosting the file or folder at server_path. 
bool gupnp_control_point_browse_start ( resource $cpoint ) Start the search and calls user-defined callback. 
bool gupnp_control_point_browse_stop ( resource $cpoint ) Stop the search and calls user-defined callback. 
bool gupnp_control_point_callback_set ( resource $cpoint , int $signal , mixed $callback [, mixed $arg ] ) Set control point callback function for signal. 
resource gupnp_control_point_new ( resource $context , string $target ) Create a new control point with the specified target. 
bool gupnp_device_action_callback_set ( resource $root_device , int $signal , string $action_name , mixed $callback [, mixed $arg ] ) Set device callback function for signal and action. 
resource gupnp_device_info_get_service ( resource $root_device , string $type ) Get the service with type or false if no such device was found. 
array gupnp_device_info_get ( resource $root_device ) Get info of root device. 
bool gupnp_root_device_get_available ( resource $root_device ) Get whether or not root_device is available (announcing its presence). 
string gupnp_root_device_get_relative_location ( resource $root_device ) Get the relative location of root device. 
resource gupnp_root_device_new ( resource $context , string $location , string $description_dir ) Create a new root device, automatically downloading and parsing location. 
bool gupnp_root_device_set_available ( resource $root_device , bool $available ) Controls whether or not root_device is available (announcing its presence). 
bool gupnp_root_device_start ( resource $root_device ) Start root server's main loop. 
bool gupnp_root_device_stop ( resource $root_device ) Stop root server's main loop. 
mixed gupnp_service_action_get ( resource $action , string $name , int $type ) Retrieves the specified action arguments. 
bool gupnp_service_action_return_error ( resource $action , int $error_code [, string $error_description ] ) Return error code. 
bool gupnp_service_action_return ( resource $action ) Return successfully. 
bool gupnp_service_action_set ( resource $action , string $name , int $type , mixed $value ) Sets the specified action return values. 
bool gupnp_service_freeze_notify ( resource $service ) Causes new notifications to be queued up until gupnp_service_thaw_notify() is called. 
mixed gupnp_service_info_get_introspection ( resource $proxy [, mixed $callback [, mixed $arg ]] ) Get resource introspection of service or register callback if corresponding parameter was passed. 
array gupnp_service_info_get ( resource $proxy ) Get full info of service. 
array gupnp_service_introspection_get_state_variable ( resource $introspection , string $variable_name ) Returns the state variable data by the name variable_name in this service. 
bool gupnp_service_notify ( resource $service , string $name , int $type , mixed $value ) Notifies listening clients that the property have changed to the specified values. 
mixed gupnp_service_proxy_action_get ( resource $proxy , string $action , string $name , int $type ) Send action with parameters to the service exposed by proxy synchronously and get value. 
bool gupnp_service_proxy_action_set ( resource $proxy , string $action , string $name , mixed $value , int $type ) Send action with parameters to the service exposed by proxy synchronously and set value. 
bool gupnp_service_proxy_add_notify ( resource $proxy , string $value , int $type , mixed $callback [, mixed $arg ] ) Sets up callback to be called whenever a change notification for variable is recieved. 
bool gupnp_service_proxy_callback_set ( resource $proxy , int $signal , mixed $callback [, mixed $arg ] ) Set service proxy callback for signal. 
bool gupnp_service_proxy_get_subscribed ( resource $proxy ) Check whether subscription is valid to the service. 
bool gupnp_service_proxy_remove_notify ( resource $proxy , string $value ) Cancels the variable change notification. 
array gupnp_service_proxy_send_action ( resource $proxy , string $action , array $in_params , array $out_params ) Send action with parameters in_params to the service exposed by proxy synchronously and return out_params with values or FALSE on error. 
bool gupnp_service_proxy_set_subscribed ( resource $proxy , bool $subscribed ) (Un)subscribes to the service. 
bool gupnp_service_thaw_notify ( resource $service ) Sends out any pending notifications and stops queuing of new ones. 
bool hw_api::checkin ( array $parameter ) 
bool hw_api::checkout ( array $parameter ) This function checks out an object or a whole hierarchy of objects. 
array hw_api::children ( array $parameter ) Retrieves the children of a collection or the attributes of a document. The children can be further filtered by specifying an object query. 
HW_API_Content hw_api::content ( array $parameter ) This function returns the content of a document as an object of type hw_api_content. 
hw_api_content hw_api::copy ( array $parameter ) This function will make a physical copy including the content if it exists and returns the new object or an error object. 
hw_api_object hw_api::dbstat ( array $parameter ) Returns statistics about database server. 
hw_api_object hw_api::dcstat ( array $parameter ) Returns statistics about document cache server. 
array hw_api::dstanchors ( array $parameter ) Retrieves all destination anchors of an object. 
hw_api_object hw_api::dstofsrcanchor ( array $parameter ) Retrieves the destination object pointed by the specified source anchors. The destination object can either be a destination anchor or a whole document. 
array hw_api::find ( array $parameter ) This functions searches for objects either by executing a key or/and full text query. The found objects can further be filtered by an optional object query. They are sorted by their importance. The second search operation is relatively slow and its result can be limited to a certain number of hits. This allows to perform an incremental search, each returning just a subset of all found documents, starting at a given index. 
hw_api_object hw_api::ftstat ( array $parameter ) Returns statistics about fulltext server. 
hw_api_object hw_api::hwstat ( array $parameter ) Returns statistics about Hyperwave server. 
bool hw_api::identify ( array $parameter ) Logs into the Hyperwave Server. 
array hw_api::info ( array $parameter ) Returns information about server configuration. 
hw_api_object hw_api::insert ( array $parameter ) Insert a new object. The object type can be user, group, document or anchor. Depending on the type other object attributes has to be set. 
hw_api_object hw_api::insertanchor ( array $parameter ) This function is a shortcut for hwapi_insert(). It inserts an object of type anchor and sets some of the attributes required for an anchor. 
hw_api_object hw_api::insertcollection ( array $parameter ) This function is a shortcut for hwapi_insert(). It inserts an object of type collection and sets some of the attributes required for a collection. 
hw_api_object hw_api::insertdocument ( array $parameter ) This function is a shortcut for hwapi_insert(). It inserts an object with content and sets some of the attributes required for a document. 
bool hw_api::link ( array $parameter ) Creates a link to an object. Accessing this link is like accessing the object to links points to. 
bool hw_api::lock ( array $parameter ) Locks an object for exclusive editing by the user calling this function. The object can be only unlocked by this user or the system user. 
bool hw_api::move ( array $parameter ) Moves object between collections. 
hw_api_object hw_api::object ( array $parameter ) This function retrieves the attribute information of an object of any version. It will not return the document content. 
hw_api_object hw_api::objectbyanchor ( array $parameter ) This function retrieves an object the specified anchor belongs to. 
array hw_api::parents ( array $parameter ) Retrieves the parents of an object. The parents can be further filtered by specifying an object query. 
bool hw_api::remove ( array $parameter ) Removes an object from the specified parent. Collections will be removed recursively. 
hw_api_object hw_api::replace ( array $parameter ) Replaces the attributes and the content of an object. 
hw_api_object hw_api::setcommittedversion ( array $parameter ) Commits a version of a document. The committed version is the one which is visible to users with read access. By default the last version is the committed version. 
array hw_api::srcanchors ( array $parameter ) Retrieves all source anchors of an object. 
array hw_api::srcsofdst ( array $parameter ) Retrieves all the source anchors pointing to the specified destination. The destination object can either be a destination anchor or a whole document. 
bool hw_api::unlock ( array $parameter ) Unlocks a locked object. Only the user who has locked the object and the system user may unlock an object. 
hw_api_object hw_api::user ( array $parameter ) Returns the own user object. 
array hw_api::userlist ( array $parameter ) Returns a list of all logged in users. 
string hw_api_attribute::key ( void ) Returns the name of the attribute. 
string hw_api_attribute::langdepvalue ( string $language ) Returns the value in the given language of the attribute. 
string hw_api_attribute::value ( void ) Gets the value of the attribute. 
array hw_api_attribute::values ( void ) Gets all values of the attribute. 
string hw_api_content::mimetype ( void ) Returns the mimetype of the content. 
string hw_api_content::read ( string $buffer , int $len ) Reads len bytes from the content into the given buffer. 
int hw_api_error::count ( void ) Returns the number of error reasons. 
HW_API_Reason hw_api_error::reason ( void ) Returns the first error reason. 
bool hw_api_object::assign ( array $parameter ) Clones the attributes of an object. 
bool hw_api_object::attreditable ( array $parameter ) Checks whether an attribute is editable. 
int hw_api_object::count ( array $parameter ) Returns the number of attributes. 
bool hw_api_object::insert ( HW_API_Attribute $attribute ) Adds an attribute to the object. 
bool hw_api_object::remove ( string $name ) Removes the attribute with the given name. 
string hw_api_object::title ( array $parameter ) Returns the title attribute. 
string hw_api_object::value ( string $name ) Returns value of an attribute. 
string hw_api_reason::description ( void ) Returns the description of a reason 
HW_API_Reason hw_api_reason::type ( void ) Returns the type of a reason. 
HW_API_Attribute hwapi_attribute_new ([ string $name [, string $value ]] ) Creates a new instance of hw_api_attribute with the given name and value. 
HW_API_Content hwapi_content_new ( string $content , string $mimetype ) Creates a new content object from the string content. 
HW_API hwapi_hgcsp ( string $hostname [, int $port ] ) Opens a connection to the Hyperwave server on host hostname. The protocol used is HGCSP. 
hw_api_object hwapi_object_new ( array $parameter ) Creates a new instance of the class hw_api_object. 
mixed db2_autocommit ( resource $connection [, bool $value ] ) Sets or gets the AUTOCOMMIT behavior of the specified connection resource. 
bool db2_bind_param ( resource $stmt , int $parameter_number , string $variable_name [, int $parameter_type [, int $data_type = 0 [, int $precision = -1 [, int $scale = 0 ]]]] ) Binds a PHP variable to an SQL statement parameter in a statement resource returned by db2_prepare(). This function gives you more control over the parameter type, data type, precision, and scale for the parameter than simply passing the variable as part of the optional input array to db2_execute(). 
object db2_client_info ( resource $connection ) 
bool db2_close ( resource $connection ) 
resource db2_column_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] ) Returns a result set listing the columns and associated privileges for a table. 
resource db2_columns ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] ) Returns a result set listing the columns and associated metadata for a table. 
bool db2_commit ( resource $connection ) Commits an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_commit() is not necessary unless AUTOCOMMIT has been turned off for the connection resource. 
string db2_conn_error ([ resource $connection ] ) 
string db2_conn_errormsg ([ resource $connection ] ) 
resource db2_connect ( string $database , string $username , string $password [, array $options ] ) Creates a new connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database. 
int db2_cursor_type ( resource $stmt ) Returns the cursor type used by a statement resource. Use this to determine if you are working with a forward-only cursor or scrollable cursor. 
string db2_escape_string ( string $string_literal ) Prepends backslashes to special characters in the string argument. 
resource db2_exec ( resource $connection , string $statement [, array $options ] ) 
bool db2_execute ( resource $stmt [, array $parameters ] ) 
array db2_fetch_array ( resource $stmt [, int $row_number = -1 ] ) Returns an array, indexed by column position, representing a row in a result set. The columns are 0-indexed. 
array db2_fetch_assoc ( resource $stmt [, int $row_number = -1 ] ) Returns an array, indexed by column name, representing a row in a result set. 
array db2_fetch_both ( resource $stmt [, int $row_number = -1 ] ) Returns an array, indexed by both column name and position, representing a row in a result set. Note that the row returned by db2_fetch_both() requires more memory than the single-indexed arrays returned by db2_fetch_assoc() or db2_fetch_array(). 
object db2_fetch_object ( resource $stmt [, int $row_number = -1 ] ) Returns an object in which each property represents a column returned in the row fetched from a result set. 
bool db2_fetch_row ( resource $stmt [, int $row_number ] ) 
int db2_field_display_size ( resource $stmt , mixed $column ) Returns the maximum number of bytes required to display a column in a result set. 
string db2_field_name ( resource $stmt , mixed $column ) Returns the name of the specified column in the result set. 
int db2_field_num ( resource $stmt , mixed $column ) Returns the position of the named column in a result set. 
int db2_field_precision ( resource $stmt , mixed $column ) Returns the precision of the indicated column in a result set. 
int db2_field_scale ( resource $stmt , mixed $column ) Returns the scale of the indicated column in a result set. 
string db2_field_type ( resource $stmt , mixed $column ) Returns the data type of the indicated column in a result set. 
int db2_field_width ( resource $stmt , mixed $column ) Returns the width of the current value of the indicated column in a result set. This is the maximum width of the column for a fixed-length data type, or the actual width of the column for a variable-length data type. 
resource db2_foreign_keys ( resource $connection , string $qualifier , string $schema , string $table-name ) Returns a result set listing the foreign keys for a table. 
bool db2_free_result ( resource $stmt ) Frees the system and database resources that are associated with a result set. These resources are freed implicitly when a script finishes, but you can call db2_free_result() to explicitly free the result set resources before the end of the script. 
bool db2_free_stmt ( resource $stmt ) Frees the system and database resources that are associated with a statement resource. These resources are freed implicitly when a script finishes, but you can call db2_free_stmt() to explicitly free the statement resources before the end of the script. 
string db2_get_option ( resource $resource , string $option ) Retrieves the value of a specified option value for a statement resource or a connection resource. 
string db2_last_insert_id ( resource $resource ) 
string db2_lob_read ( resource $stmt , int $colnum , int $length ) Use db2_lob_read() to iterate through a specified column of a result set and retrieve a user defined size of LOB data. 
resource db2_next_result ( resource $stmt ) A stored procedure can return zero or more result sets. While you handle the first result set in exactly the same way you would handle the results returned by a simple SELECT statement, to fetch the second and subsequent result sets from a stored procedure you must call the db2_next_result() function and return the result to a uniquely named PHP variable. 
int db2_num_fields ( resource $stmt ) Returns the number of fields contained in a result set. This is most useful for handling the result sets returned by dynamically generated queries, or for result sets returned by stored procedures, where your application cannot otherwise know how to retrieve and use the results. 
int db2_num_rows ( resource $stmt ) 
bool db2_pclose ( resource $resource ) 
resource db2_pconnect ( string $database , string $username , string $password [, array $options ] ) 
resource db2_prepare ( resource $connection , string $statement [, array $options ] ) 
resource db2_primary_keys ( resource $connection , string $qualifier , string $schema , string $table-name ) Returns a result set listing the primary keys for a table. 
resource db2_procedure_columns ( resource $connection , string $qualifier , string $schema , string $procedure , string $parameter ) Returns a result set listing the parameters for one or more stored procedures. 
resource db2_procedures ( resource $connection , string $qualifier , string $schema , string $procedure ) Returns a result set listing the stored procedures registered in a database. 
mixed db2_result ( resource $stmt , mixed $column ) Use db2_result() to return the value of a specified column in the current row of a result set. You must call db2_fetch_row() before calling db2_result() to set the location of the result set pointer. 
bool db2_rollback ( resource $connection ) Rolls back an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_rollback() normally has no effect unless AUTOCOMMIT has been turned off for the connection resource. 
object db2_server_info ( resource $connection ) 
bool db2_set_option ( resource $resource , array $options , int $type ) Sets options for a statement resource or a connection resource. You cannot set options for result set resources. 
resource db2_special_columns ( resource $connection , string $qualifier , string $schema , string $table_name , int $scope ) Returns a result set listing the unique row identifier columns for a table. 
resource db2_statistics ( resource $connection , string $qualifier , string $schema , string $table-name , bool $unique ) Returns a result set listing the index and statistics for a table. 
string db2_stmt_error ([ resource $stmt ] ) 
string db2_stmt_errormsg ([ resource $stmt ] ) 
resource db2_table_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table_name ]]] ) Returns a result set listing the tables and associated privileges in a database. 
resource db2_tables ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type ]]]] ) Returns a result set listing the tables and associated metadata in a database. 
string id3_get_frame_long_name ( string $frameId ) id3_get_frame_long_name() returns the long name for an ID3v2 frame. 
string id3_get_frame_short_name ( string $frameId ) id3_get_frame_short_name() returns the short name for an ID3v2 frame. 
int id3_get_genre_id ( string $genre ) id3_get_genre_id() returns the id for a genre. 
array id3_get_genre_list ( void ) 
string id3_get_genre_name ( int $genre_id ) id3_get_genre_name() returns the name for a genre id. 
array id3_get_tag ( string $filename [, int $version = ID3_BEST ] ) id3_get_tag() is used to get all information stored in the id3 tag of the specified file. 
int id3_get_version ( string $filename ) 
bool id3_remove_tag ( string $filename [, int $version = ID3_V1_0 ] ) id3_remove_tag() is used to remove the information stored of an ID3 tag. 
bool id3_set_tag ( string $filename , array $tag [, int $version = ID3_V1_0 ] ) id3_set_tag() is used to change the information stored of an ID3 tag. If no tag has been present, it will be added to the file. 
int iis_add_server ( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server ) 
int iis_get_dir_security ( int $server_instance , string $virtual_path ) 
string iis_get_script_map ( int $server_instance , string $virtual_path , string $script_extension ) 
int iis_get_server_by_comment ( string $comment ) 
int iis_get_server_by_path ( string $path ) Each virtual server in IIS is associated with an instance number. iis_get_server_by_path() finds the instance number from the actual path to the root directory. 
int iis_get_server_rights ( int $server_instance , string $virtual_path ) 
int iis_get_service_state ( string $service_id ) 
int iis_remove_server ( int $server_instance ) 
int iis_set_app_settings ( int $server_instance , string $virtual_path , string $application_scope ) 
int iis_set_dir_security ( int $server_instance , string $virtual_path , int $directory_flags ) 
int iis_set_script_map ( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting ) 
int iis_set_server_rights ( int $server_instance , string $virtual_path , int $directory_flags ) 
int iis_start_server ( int $server_instance ) 
int iis_start_service ( string $service_id ) 
int iis_stop_server ( int $server_instance ) 
int iis_stop_service ( string $service_id ) 
array inclued_get_data ( void ) Get the inclued data. 
bool ingres_autocommit_state ( resource $link ) ingres_autocommit_state() is called to determine whether the current link has autocommit enabled or not. 
bool ingres_autocommit ( resource $link ) 
string ingres_charset ( resource $link ) 
bool ingres_close ( resource $link ) 
bool ingres_commit ( resource $link ) 
resource ingres_connect ([ string $database [, string $username [, string $password [, array $options ]]]] ) 
string ingres_cursor ( resource $result ) Returns a string with the active cursor name. If no cursor is active then NULL is returned. 
int ingres_errno ([ resource $link ] ) 
string ingres_error ([ resource $link ] ) 
string ingres_errsqlstate ([ resource $link ] ) 
string ingres_escape_string ( resource $link , string $source_string ) ingres_escape_string() is used to escape certain characters within a string before it is sent to the database server. 
bool ingres_execute ( resource $result [, array $params [, string $types ]] ) 
array ingres_fetch_array ( resource $result [, int $result_type ] ) 
array ingres_fetch_assoc ( resource $result ) 
object ingres_fetch_object ( resource $result [, int $result_type ] ) 
int ingres_fetch_proc_return ( resource $result ) 
array ingres_fetch_row ( resource $result ) 
int ingres_field_length ( resource $result , int $index ) 
string ingres_field_name ( resource $result , int $index ) 
bool ingres_field_nullable ( resource $result , int $index ) 
int ingres_field_precision ( resource $result , int $index ) 
int ingres_field_scale ( resource $result , int $index ) 
string ingres_field_type ( resource $result , int $index ) 
bool ingres_free_result ( resource $result ) 
bool ingres_next_error ([ resource $link ] ) Get the next Ingres error for the last executed query. Each call to ingres_next_error() can be followed by a call to ingres_errno(), ingres_error() or ingres_errsqlstate() to get the respective error number, error text, or SQL STATE. While ingres_next_error() returns TRUE, there are more errors to fetch. 
int ingres_num_fields ( resource $result ) ingres_num_fields() returns the number of fields in the results returned by the Ingres server after a call to ingres_query(). 
int ingres_num_rows ( resource $result ) 
resource ingres_pconnect ([ string $database [, string $username [, string $password [, array $options ]]]] ) 
mixed ingres_prepare ( resource $link , string $query ) 
mixed ingres_query ( resource $link , string $query [, array $params [, string $types ]] ) 
bool ingres_result_seek ( resource $result , int $position ) 
bool ingres_rollback ( resource $link ) 
bool ingres_set_environment ( resource $link , array $options ) ingres_set_environment() is called to set environmental options that affect the output of certain values from Ingres, such as the timezone, date format, decimal character separator, and float precision. 
mixed ingres_unbuffered_query ( resource $link , string $query [, array $params [, string $types ]] ) 
int inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask ) 
resource inotify_init ( void ) Initialize an inotify instance for use with inotify_add_watch() 
int inotify_queue_len ( resource $inotify_instance ) This function allows to know if inotify_read() will block or not. If a number upper than zero is returned, there are pending events and inotify_read() will not block. 
array inotify_read ( resource $inotify_instance ) Read inotify events from an inotify instance. 
bool inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor ) inotify_rm_watch() removes the watch watch_descriptor from the inotify instance inotify_instance. 
int judy_type ( Judy $array ) judy_type() return an integer corresponding to the Judy type of the specified Judy array. 
string judy_version ( void ) Return a string of the PHP Judy version. If the return value is not used, the string will be printed. 
bool kadm5_chpass_principal ( resource $handle , string $principal , string $password ) kadm5_chpass_principal() sets the new password password for the principal. 
bool kadm5_create_principal ( resource $handle , string $principal [, string $password [, array $options ]] ) Creates a principal with the given password. 
bool kadm5_delete_principal ( resource $handle , string $principal ) Removes the principal from the Kerberos database. 
bool kadm5_destroy ( resource $handle ) Closes the connection to the admin server and releases all related resources. 
bool kadm5_flush ( resource $handle ) Flush all changes to the Kerberos database, leaving the connection to the Kerberos admin server open. 
array kadm5_get_policies ( resource $handle ) Gets an array containing the policies's names. 
array kadm5_get_principal ( resource $handle , string $principal ) Gets the principal's entries from the Kerberos database. 
array kadm5_get_principals ( resource $handle ) kadm5_get_principals() returns an array containing the principals's names. 
resource kadm5_init_with_password ( string $admin_server , string $realm , string $principal , string $password ) Opens a connection with the KADM5 library using the principal and the given password to obtain initial credentials from the admin_server. 
bool kadm5_modify_principal ( resource $handle , string $principal , array $options ) Modifies a principal according to the given options. 
bool event_add ( resource $event [, int $timeout = -1 ] ) event_add() schedules the execution of the event when the event specified in event_set() occurs or in at least the time specified by the timeout argument. If timeout was not specified, not timeout is set. The event must be already initalized by event_set() and event_base_set() functions. If the event already has a timeout set, it is replaced by the new one. 
void event_base_free ( resource $event_base ) Destroys the specified event_base and frees all the resources associated. Note that it's not possible to destroy an event base with events attached to it. 
int event_base_loop ( resource $event_base [, int $flags = 0 ] ) Starts event loop for the specified event base. 
bool event_base_loopbreak ( resource $event_base ) Abort the active event loop immediately. The behaviour is similar to break statement. 
bool event_base_loopexit ( resource $event_base [, int $timeout = -1 ] ) The next event loop iteration after the given timer expires will complete normally, then exit without blocking for events again. 
resource event_base_new ( void ) Returns new event base, which can be used later in event_base_set(), event_base_loop() and other functions. 
bool event_base_priority_init ( resource $event_base , int $npriorities ) 
bool event_base_reinit ( resource $event_base ) Some event mechanisms do not survive across fork. The event_base needs to be reinitialized with this function. 
bool event_base_set ( resource $event , resource $event_base ) Associates the event_base with the event. 
bool event_buffer_base_set ( resource $bevent , resource $event_base ) Assign the specified bevent to the event_base. 
bool event_buffer_disable ( resource $bevent , int $events ) Disables the specified buffered event. 
bool event_buffer_enable ( resource $bevent , int $events ) Enables the specified buffered event. 
void event_buffer_fd_set ( resource $bevent , resource $fd ) Changes the file descriptor on which the buffered event operates. 
void event_buffer_free ( resource $bevent ) Destroys the specified buffered event and frees all the resources associated. 
resource event_buffer_new ( resource $stream , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] ) Libevent provides an abstraction layer on top of the regular event API. Using buffered event you don't need to deal with the I/O manually, instead it provides input and output buffers that get filled and drained automatically. 
bool event_buffer_priority_set ( resource $bevent , int $priority ) Assign a priority to the bevent. 
string event_buffer_read ( resource $bevent , int $data_size ) Reads data from the input buffer of the buffered event. 
bool event_buffer_set_callback ( resource $event , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] ) Sets or changes existing callbacks for the buffered event. 
void event_buffer_timeout_set ( resource $bevent , int $read_timeout , int $write_timeout ) Sets the read and write timeouts for the specified buffered event. 
void event_buffer_watermark_set ( resource $bevent , int $events , int $lowmark , int $highmark ) Sets the watermarks for read and write events. Libevent does not invoke read callback unless there is at least lowmark bytes in the input buffer; if the read buffer is beyond the highmark, reading is stopped. On output, the write callback is invoked whenever the buffered data falls below the lowmark. 
bool event_buffer_write ( resource $bevent , string $data [, int $data_size = -1 ] ) Writes data to the specified buffered event. The data is appended to the output buffer and written to the descriptor when it becomes available for writing. 
bool event_del ( resource $event ) Cancels the event. 
void event_free ( resource $event ) Frees previously created event resource. 
resource event_new ( void ) Creates and returns a new event resource. 
bool event_priority_set ( resource $event , int $priority ) Assign a priority to the event. 
bool event_set ( resource $event , mixed $fd , int $events , mixed $callback [, mixed $arg ] ) 
event_timer_add(->) This function is an alias of: event_add().  
event_timer_del(->) This function is an alias of: event_del().  
event_timer_new(->) This function is an alias of: event_new().  
bool event_timer_set ( resource $event , callable $callback [, mixed $arg ] ) 
string lzf_compress ( string $data ) lzf_compress() compresses the given data string using LZF encoding. 
string lzf_decompress ( string $data ) lzf_compress() decompresses the given data string containing lzf encoded data. 
int lzf_optimized_for ( void ) Determines what was LZF extension optimized for during compilation. 
string mailparse_determine_best_xfer_encoding ( resource $fp ) Figures out the best way of encoding the content read from the given file pointer. 
resource mailparse_msg_create ( void ) Create a MIME mail resource. 
string mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callable $callbackfunc ] ) 
void mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callable $callbackfunc ] ) 
string mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename [, callable $callbackfunc ] ) 
bool mailparse_msg_free ( resource $mimemail ) Frees a MIME resource. 
array mailparse_msg_get_part_data ( resource $mimemail ) 
resource mailparse_msg_get_part ( resource $mimemail , string $mimesection ) 
array mailparse_msg_get_structure ( resource $mimemail ) 
resource mailparse_msg_parse_file ( string $filename ) Parses a file. This is the optimal way of parsing a mail file that you have on disk. 
bool mailparse_msg_parse ( resource $mimemail , string $data ) 
array mailparse_rfc822_parse_addresses ( string $addresses ) Parses a » RFC 822 compliant recipient list, such as that found in the To: header. 
bool mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding ) Streams data from the source file pointer, apply encoding and write to the destination file pointer. 
array mailparse_uudecode_all ( resource $fp ) Scans the data from the given file pointer and extract each embedded uuencoded file into a temporary file. 
int maxdb_affected_rows ( resource $link ) 
bool maxdb_autocommit ( resource $link , bool $mode ) 
maxdb_bind_param(->) This function is an alias of: maxdb_stmt_bind_param()  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
maxdb_bind_result(->) This function is an alias of: maxdb_stmt_bind_result().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
bool maxdb_change_user ( resource $link , string $user , string $password , string $database ) 
string maxdb_character_set_name ( resource $link ) 
maxdb_client_encoding(->) This function is an alias of: maxdb_character_set_name().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
maxdb::close_long_data(->) This function is an alias of: maxdb_stmt_close_long_data().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
bool maxdb_close ( resource $link ) 
bool maxdb_commit ( resource $link ) 
int maxdb_connect_errno ( void ) The maxdb_connect_errno() function will return the last error code number for last call to maxdb_connect(). If no errors have occurred, this function will return zero. 
string maxdb_connect_error ( void ) The maxdb_connect_error() function is identical to the corresponding maxdb_connect_errno() function in every way, except instead of returning an integer error code the maxdb_connect_error() function will return a string representation of the last error to occur for the last maxdb_connect() call. If no error has occurred, this function will return an empty string. 
resource maxdb_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] ) 
bool maxdb_data_seek ( resource $result , int $offset ) 
void maxdb_debug ( string $debug ) 
bool maxdb_disable_reads_from_master ( resource $link ) 
bool maxdb_disable_rpl_parse ( resource $link ) 
bool maxdb_dump_debug_info ( resource $link ) 
resource maxdb_embedded_connect ([ string $dbname ] ) 
bool maxdb_enable_reads_from_master ( resource $link ) 
bool maxdb_enable_rpl_parse ( resource $link ) 
int maxdb_errno ( resource $link ) 
string maxdb_error ( resource $link ) 
maxdb_escape_string(->) This function is an alias of: maxdb_real_escape_string().  
maxdb_execute(->) This function is an alias of: maxdb_stmt_execute().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
mixed maxdb_fetch_array ( resource $result [, int $resulttype ] ) 
array maxdb_fetch_assoc ( resource $result ) 
mixed maxdb_fetch_field_direct ( resource $result , int $fieldnr ) 
mixed maxdb_fetch_field ( resource $result ) 
mixed maxdb_fetch_fields ( resource $result ) 
array maxdb_fetch_lengths ( resource $result ) 
object maxdb_fetch_object ( object $result ) 
mixed maxdb_fetch_row ( resource $result ) 
maxdb_fetch(->) This function is an alias of: maxdb_stmt_fetch().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
int maxdb_field_count ( resource $link ) 
bool maxdb_field_seek ( resource $result , int $fieldnr ) 
int maxdb_field_tell ( resource $result ) 
void maxdb_free_result ( resource $result ) 
string maxdb_get_client_info ( void ) The maxdb_get_client_info() function is used to return a string representing the client version being used in the MaxDB extension. 
int maxdb_get_client_version ( void ) Returns client version number as an integer. 
string maxdb_get_host_info ( resource $link ) 
maxdb_get_metadata(->) This function is an alias of: maxdb_stmt_result_metadata().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
int maxdb_get_proto_info ( resource $link ) 
string maxdb_get_server_info ( resource $link ) 
int maxdb_get_server_version ( resource $link ) 
string maxdb_info ( resource $link ) 
resource maxdb_init ( void ) 
mixed maxdb_insert_id ( resource $link ) 
bool maxdb_kill ( resource $link , int $processid ) 
bool maxdb_master_query ( resource $link , string $query ) 
bool maxdb_more_results ( resource $link ) maxdb_more_results() indicates if one or more result sets are available from a previous call to maxdb_multi_query(). 
bool maxdb_multi_query ( resource $link , string $query ) 
bool maxdb_next_result ( resource $link ) Since multiple queries are not yet supported, maxdb_next_result() returns always FALSE. 
int maxdb_num_fields ( resource $result ) 
int maxdb_num_rows ( resource $result ) 
bool maxdb_options ( resource $link , int $option , mixed $value ) 
maxdb_param_count(->) This function is an alias of: maxdb_stmt_param_count().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
bool maxdb_ping ( resource $link ) 
resource maxdb_prepare ( resource $link , string $query ) 
mixed maxdb_query ( resource $link , string $query [, int $resultmode ] ) 
bool maxdb_real_connect ( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] ) 
string maxdb_real_escape_string ( resource $link , string $escapestr ) 
bool maxdb_real_query ( resource $link , string $query ) 
bool maxdb_report ( int $flags ) 
bool maxdb_rollback ( resource $link ) 
int maxdb_rpl_parse_enabled ( resource $link ) 
bool maxdb_rpl_probe ( resource $link ) 
int maxdb_rpl_query_type ( resource $link ) 
bool maxdb_select_db ( resource $link , string $dbname ) 
maxdb_send_long_data(->) This function is an alias of: maxdb_stmt_send_long_data().  This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
bool maxdb_send_query ( resource $link , string $query ) 
void maxdb_server_end ( void ) 
bool maxdb_server_init ([ array $server [, array $groups ]] ) 
maxdb_set_opt(->) This function is an alias of: maxdb_options().  
string maxdb_sqlstate ( resource $link ) 
bool maxdb_ssl_set ( resource $link , string $key , string $cert , string $ca , string $capath , string $cipher ) 
string maxdb_stat ( resource $link ) 
int maxdb_stmt_affected_rows ( resource $stmt ) 
bool maxdb_stmt_bind_param ( resource $stmt , string $types , mixed &$var1 [, mixed &$... ] ) 
bool maxdb_stmt_bind_result ( resource $stmt , mixed &$var1 [, mixed &$... ] ) 
bool maxdb_stmt_close_long_data ( resource $stmt , int $param_nr ) 
bool maxdb_stmt_close ( resource $stmt ) 
bool maxdb_stmt_data_seek ( resource $statement , int $offset ) 
int maxdb_stmt_errno ( resource $stmt ) 
string maxdb_stmt_error ( resource $stmt ) 
bool maxdb_stmt_execute ( resource $stmt ) 
bool maxdb_stmt_fetch ( resource $stmt ) 
void maxdb_stmt_free_result ( resource $stmt ) 
resource maxdb_stmt_init ( resource $link ) 
int maxdb_stmt_num_rows ( resource $stmt ) 
int maxdb_stmt_param_count ( resource $stmt ) 
bool maxdb_stmt_prepare ( resource $stmt , string $query ) 
bool maxdb_stmt_reset ( resource $stmt ) 
resource maxdb_stmt_result_metadata ( resource $stmt ) 
bool maxdb_stmt_send_long_data ( resource $stmt , int $param_nr , string $data ) 
string maxdb_stmt_sqlstate ( resource $stmt ) 
bool maxdb_stmt_store_result ( resource $stmt ) 
resource maxdb_store_result ( resource $link ) 
int maxdb_thread_id ( resource $link ) 
bool maxdb_thread_safe ( void ) maxdb_thread_safe() indicates whether the client library is compiled as thread-safe. 
resource maxdb_use_result ( resource $link ) 
int maxdb_warning_count ( resource $link ) 
int m_checkstatus ( resource $conn , int $identifier ) 
int m_completeauthorizations ( resource $conn , int &$array ) 
int m_connect ( resource $conn ) 
string m_connectionerror ( resource $conn ) 
bool m_deletetrans ( resource $conn , int $identifier ) 
bool m_destroyconn ( resource $conn ) 
void m_destroyengine ( void ) 
string m_getcell ( resource $conn , int $identifier , string $column , int $row ) 
string m_getcellbynum ( resource $conn , int $identifier , int $column , int $row ) 
string m_getcommadelimited ( resource $conn , int $identifier ) 
string m_getheader ( resource $conn , int $identifier , int $column_num ) 
resource m_initconn ( void ) 
int m_initengine ( string $location ) 
int m_iscommadelimited ( resource $conn , int $identifier ) 
bool m_maxconntimeout ( resource $conn , int $secs ) 
int m_monitor ( resource $conn ) 
int m_numcolumns ( resource $conn , int $identifier ) 
int m_numrows ( resource $conn , int $identifier ) 
int m_parsecommadelimited ( resource $conn , int $identifier ) 
array m_responsekeys ( resource $conn , int $identifier ) 
string m_responseparam ( resource $conn , int $identifier , string $key ) 
int m_returnstatus ( resource $conn , int $identifier ) 
int m_setblocking ( resource $conn , int $tf ) 
int m_setdropfile ( resource $conn , string $directory ) 
int m_setip ( resource $conn , string $host , int $port ) 
int m_setssl_cafile ( resource $conn , string $cafile ) 
int m_setssl_files ( resource $conn , string $sslkeyfile , string $sslcertfile ) 
int m_setssl ( resource $conn , string $host , int $port ) 
int m_settimeout ( resource $conn , int $seconds ) 
string m_sslcert_gen_hash ( string $filename ) 
int m_transactionssent ( resource $conn ) 
int m_transinqueue ( resource $conn ) 
int m_transkeyval ( resource $conn , int $identifier , string $key , string $value ) 
int m_transnew ( resource $conn ) 
int m_transsend ( resource $conn , int $identifier ) 
int m_uwait ( int $microsecs ) 
int m_validateidentifier ( resource $conn , int $tf ) 
bool m_verifyconnection ( resource $conn , int $tf ) 
bool m_verifysslcert ( resource $conn , int $tf ) 
bool memcache_debug ( bool $on_off ) 
int ming_keypress ( string $char ) 
void ming_setcubicthreshold ( int $threshold ) Sets the threshold error for drawing cubic beziers. 
void ming_setscale ( float $scale ) Sets the scale of the output SWF. Inside the SWF file, coordinates are measured in TWIPS, rather than PIXELS. There are 20 TWIPS in 1 pixel. 
void ming_setswfcompression ( int $level ) Sets the SWF output compression level. 
void ming_useconstants ( int $use ) 
void ming_useswfversion ( int $version ) Sets the SWF version to be used in the movie. This affect the bahaviour of Action Script. 
bool udm_add_search_limit ( resource $agent , int $var , string $val ) udm_add_search_limit() adds search restrictions. 
resource udm_alloc_agent_array ( array $databases ) udm_alloc_agent_array() will create an agent with multiple database connections. 
resource udm_alloc_agent ( string $dbaddr [, string $dbmode ] ) Allocate a mnoGoSearch session. 
int udm_api_version ( void ) 
array udm_cat_list ( resource $agent , string $category ) 
array udm_cat_path ( resource $agent , string $category ) Returns an array describing the path in the categories tree from the tree root to the current one, specified by category. 
bool udm_check_charset ( resource $agent , string $charset ) 
bool udm_clear_search_limits ( resource $agent ) udm_clear_search_limits() resets defined search limitations. 
int udm_crc32 ( resource $agent , string $str ) 
int udm_errno ( resource $agent ) Receiving numeric agent error code. 
string udm_error ( resource $agent ) Gets the agent error message. 
resource udm_find ( resource $agent , string $query ) 
int udm_free_agent ( resource $agent ) Freeing up memory allocated for agent session. 
bool udm_free_ispell_data ( int $agent ) Frees the memory allocated for ispell data. 
bool udm_free_res ( resource $res ) Freeing up memory allocated for results. 
int udm_get_doc_count ( resource $agent ) udm_get_doc_count() returns the number of documents in the database. 
string udm_get_res_field ( resource $res , int $row , int $field ) Fetch a mnoGoSearch result field. 
string udm_get_res_param ( resource $res , int $param ) Gets the mnoGoSearch result parameters. 
int udm_hash32 ( resource $agent , string $str ) udm_hash32() will take a string str and return a quite unique 32-bit hash number from it. 
bool udm_load_ispell_data ( resource $agent , int $var , string $val1 , string $val2 , int $flag ) 
bool udm_set_agent_param ( resource $agent , int $var , string $val ) Defines mnoGoSearch session parameters. 
array bson_decode ( string $bson ) This function is very beta and entirely useless for 99% of users. It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver. 
string bson_encode ( mixed $anything ) This function is very beta and entirely useless for 99% of users. It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver. 
void mqseries_back ( resource $hconn , resource &$compCode , resource &$reason ) 
void mqseries_begin ( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason ) 
void mqseries_close ( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason ) The mqseries_close() (MQCLOSE) call relinquishes access to an object, and is the inverse of the mqseries_open() (MQOPEN) call. 
void mqseries_cmit ( resource $hconn , resource &$compCode , resource &$reason ) The mqseries_cmit() (MQCMIT) call indicates to the queue manager that the application has reached a syncpoint, and that all of the message gets and puts that have occurred since the last syncpoint are to be made permanent. Messages put as part of a unit of work are made available to other applications; messages retrieved as part of a unit of work are deleted. 
void mqseries_conn ( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason ) The mqseries_conn() (MQCONN) call connects an application program to a queue manager. It provides a queue manager connection handle, which is used by the application on subsequent message queuing calls. 
void mqseries_connx ( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason ) 
void mqseries_disc ( resource $hconn , resource &$compCode , resource &$reason ) The mqseries_disc() (MQDISC) call breaks the connection between the queue manager and the application program, and is the inverse of the mqseries_conn() (MQCONN) or mqseries_connx() (MQCONNX) call. 
void mqseries_get ( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason ) The mqseries_get() (MQGET) call retrieves a message from a local queue that has been opened using the mqseries_open() (MQOPEN) call 
void mqseries_inq ( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason ) The mqseries_inq() (MQINQ) call returns an array of integers and a set of character strings containing the attributes of an object. 
void mqseries_open ( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason ) The mqseries_open() (MQOPEN) call establishes access to an object. 
void mqseries_put1 ( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason ) 
void mqseries_put ( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason ) The mqseries_put() (MQPUT) call puts a message on a queue or distribution list. The queue or distribution list must already be open. 
void mqseries_set ( resource $hConn , resource $hObj , int $selectorCount , array $selectors , int $intAttrCount , array $intAttrs , int $charAttrLength , array $charAttrs , resource &$compCode , resource &$reason ) The mqseries_set() (MQSET) call is used to change the attributes of an object represented by a handle. The object must be a queue. 
string mqseries_strerror ( int $reason ) mqseries_strerror() returns the message that correspond to the reason result code. 
array mysqlnd_memcache_get_config ( mixed $connection ) This function returns an array of all mysqlnd_memcache related configuration information that is attached to the MySQL connection. This includes MySQL, the Memcache object provided via mysqlnd_memcache_set(), and the table mapping configuration that was automatically collected from the MySQL Server. 
bool mysqlnd_memcache_set ( mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback ]]] ) 
array mysqlnd_ms_dump_servers ( mixed $connection ) Returns a list of currently configured servers. 
array mysqlnd_ms_fabric_select_global ( mixed $connection , mixed $table_name ) 
array mysqlnd_ms_fabric_select_shard ( mixed $connection , mixed $table_name , mixed $shard_key ) 
string mysqlnd_ms_get_last_gtid ( mixed $connection ) Returns a global transaction identifier which belongs to a write operation no older than the last write performed by the client. It is not guaranteed that the global transaction identifier is identical to that one created for the last write transaction performed by the client. 
array mysqlnd_ms_get_last_used_connection ( mixed $connection ) 
array mysqlnd_ms_get_stats ( void ) 
bool mysqlnd_ms_match_wild ( string $table_name , string $wildcard ) 
int mysqlnd_ms_query_is_select ( string $query ) 
bool mysqlnd_ms_set_qos ( mixed $connection , int $service_level [, int $service_level_option [, mixed $option_value ]] ) 
bool mysqlnd_ms_set_user_pick_server ( string $function ) 
int mysqlnd_ms_xa_begin ( mixed $connection , string $gtrid [, int $timeout ] ) 
int mysqlnd_ms_xa_commit ( mixed $connection , string $gtrid ) 
int mysqlnd_ms_xa_gc ( mixed $connection [, string $gtrid [, bool $ignore_max_retries ]] ) 
int mysqlnd_ms_xa_rollback ( mixed $connection , string $gtrid ) 
bool mysqlnd_qc_clear_cache ( void ) 
array mysqlnd_qc_get_available_handlers ( void ) Which storage are available depends on the compile time configuration of the query cache plugin. The default storage handler is always available. All other storage handler must be enabled explicitly when building the extension. 
array mysqlnd_qc_get_cache_info ( void ) 
array mysqlnd_qc_get_core_stats ( void ) 
array mysqlnd_qc_get_normalized_query_trace_log ( void ) 
array mysqlnd_qc_get_query_trace_log ( void ) 
bool mysqlnd_qc_set_cache_condition ( int $condition_type , mixed $condition , mixed $condition_option ) Sets a condition for automatic caching of statements which do not contain the necessary SQL hints to enable caching of them. 
mixed mysqlnd_qc_set_is_select ( string $callback ) 
bool mysqlnd_qc_set_storage_handler ( string $handler ) Sets the storage handler used by the query cache. A list of available storage handler can be obtained from mysqlnd_qc_get_available_handlers(). Which storage are available depends on the compile time configuration of the query cache plugin. The default storage handler is always available. All other storage handler must be enabled explicitly when building the extension. 
bool mysqlnd_qc_set_user_handlers ( string $get_hash , string $find_query_in_cache , string $return_to_cache , string $add_query_to_cache_if_not_exists , string $query_is_select , string $update_query_run_time_stats , string $get_stats , string $clear_cache ) Sets the callback functions for a user-defined procedural storage handler. 
resource mysqlnd_uh_convert_to_mysqlnd ( mysqli &$mysql_connection ) 
bool mysqlnd_uh_set_connection_proxy ( MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection ] ) 
bool mysqlnd_uh_set_statement_proxy ( MysqlndUhStatement &$statement_proxy ) 
int ncurses_addch ( int $ch ) 
int ncurses_addchnstr ( string $s , int $n ) 
int ncurses_addchstr ( string $s ) 
int ncurses_addnstr ( string $s , int $n ) 
int ncurses_addstr ( string $text ) 
int ncurses_assume_default_colors ( int $fg , int $bg ) 
int ncurses_attroff ( int $attributes ) 
int ncurses_attron ( int $attributes ) 
int ncurses_attrset ( int $attributes ) 
int ncurses_baudrate ( void ) 
int ncurses_beep ( void ) 
int ncurses_bkgd ( int $attrchar ) 
void ncurses_bkgdset ( int $attrchar ) 
int ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner ) 
int ncurses_bottom_panel ( resource $panel ) 
bool ncurses_can_change_color ( void ) Checks whether the terminal has color capabilities and whether the programmer can change color definitions using ncurses_init_color(). ncurses must be initialized using ncurses_init() before calling this function. 
bool ncurses_cbreak ( void ) 
bool ncurses_clear ( void ) 
bool ncurses_clrtobot ( void ) 
bool ncurses_clrtoeol ( void ) 
int ncurses_color_content ( int $color , int &$r , int &$g , int &$b ) Retrieves the red, green, and blue components for the given color definition. Terminal color capabilities must be initialized with ncurses_start_color() prior to calling this function. 
int ncurses_color_set ( int $pair ) 
int ncurses_curs_set ( int $visibility ) 
bool ncurses_def_prog_mode ( void ) 
bool ncurses_def_shell_mode ( void ) 
int ncurses_define_key ( string $definition , int $keycode ) 
bool ncurses_del_panel ( resource $panel ) 
int ncurses_delay_output ( int $milliseconds ) 
bool ncurses_delch ( void ) 
bool ncurses_deleteln ( void ) 
bool ncurses_delwin ( resource $window ) 
bool ncurses_doupdate ( void ) 
bool ncurses_echo ( void ) 
int ncurses_echochar ( int $character ) 
int ncurses_end ( void ) 
bool ncurses_erase ( void ) 
string ncurses_erasechar ( void ) 
void ncurses_filter ( void ) 
bool ncurses_flash ( void ) 
bool ncurses_flushinp ( void ) 
int ncurses_getch ( void ) 
void ncurses_getmaxyx ( resource $window , int &$y , int &$x ) 
bool ncurses_getmouse ( array &$mevent ) 
void ncurses_getyx ( resource $window , int &$y , int &$x ) 
int ncurses_halfdelay ( int $tenth ) 
bool ncurses_has_colors ( void ) Checks whether the terminal has color capabilities. This function can be used to write terminal-independent programs. ncurses must be initialized using ncurses_init() before calling this function. 
bool ncurses_has_ic ( void ) 
bool ncurses_has_il ( void ) 
int ncurses_has_key ( int $keycode ) 
int ncurses_hide_panel ( resource $panel ) 
int ncurses_hline ( int $charattr , int $n ) 
string ncurses_inch ( void ) 
int ncurses_init_color ( int $color , int $r , int $g , int $b ) 
int ncurses_init_pair ( int $pair , int $fg , int $bg ) 
void ncurses_init ( void ) 
int ncurses_insch ( int $character ) 
int ncurses_insdelln ( int $count ) 
int ncurses_insertln ( void ) 
int ncurses_insstr ( string $text ) 
int ncurses_instr ( string &$buffer ) 
bool ncurses_isendwin ( void ) 
int ncurses_keyok ( int $keycode , bool $enable ) 
int ncurses_keypad ( resource $window , bool $bf ) 
string ncurses_killchar ( void ) 
string ncurses_longname ( void ) 
int ncurses_meta ( resource $window , bool $8bit ) 
bool ncurses_mouse_trafo ( int &$y , int &$x , bool $toscreen ) 
int ncurses_mouseinterval ( int $milliseconds ) 
int ncurses_mousemask ( int $newmask , int &$oldmask ) 
int ncurses_move_panel ( resource $panel , int $startx , int $starty ) 
int ncurses_move ( int $y , int $x ) 
int ncurses_mvaddch ( int $y , int $x , int $c ) 
int ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n ) 
int ncurses_mvaddchstr ( int $y , int $x , string $s ) 
int ncurses_mvaddnstr ( int $y , int $x , string $s , int $n ) 
int ncurses_mvaddstr ( int $y , int $x , string $s ) 
int ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x ) 
int ncurses_mvdelch ( int $y , int $x ) 
int ncurses_mvgetch ( int $y , int $x ) 
int ncurses_mvhline ( int $y , int $x , int $attrchar , int $n ) 
int ncurses_mvinch ( int $y , int $x ) 
int ncurses_mvvline ( int $y , int $x , int $attrchar , int $n ) 
int ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text ) 
int ncurses_napms ( int $milliseconds ) 
resource ncurses_new_panel ( resource $window ) 
resource ncurses_newpad ( int $rows , int $cols ) 
resource ncurses_newwin ( int $rows , int $cols , int $y , int $x ) 
bool ncurses_nl ( void ) 
bool ncurses_nocbreak ( void ) 
bool ncurses_noecho ( void ) 
bool ncurses_nonl ( void ) 
void ncurses_noqiflush ( void ) 
bool ncurses_noraw ( void ) 
int ncurses_pair_content ( int $pair , int &$f , int &$b ) Retrieves the foreground and background colors that constitute the given color pair. Terminal color capabilities must be initialized with ncurses_start_color() prior to calling this function. 
resource ncurses_panel_above ( resource $panel ) 
resource ncurses_panel_below ( resource $panel ) 
resource ncurses_panel_window ( resource $panel ) 
int ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol ) 
int ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol ) 
int ncurses_putp ( string $text ) 
void ncurses_qiflush ( void ) 
bool ncurses_raw ( void ) 
int ncurses_refresh ( int $ch ) 
int ncurses_replace_panel ( resource $panel , resource $window ) 
int ncurses_reset_prog_mode ( void ) 
int ncurses_reset_shell_mode ( void ) 
bool ncurses_resetty ( void ) 
bool ncurses_savetty ( void ) 
int ncurses_scr_dump ( string $filename ) 
int ncurses_scr_init ( string $filename ) 
int ncurses_scr_restore ( string $filename ) 
int ncurses_scr_set ( string $filename ) 
int ncurses_scrl ( int $count ) 
int ncurses_show_panel ( resource $panel ) 
int ncurses_slk_attr ( void ) 
int ncurses_slk_attroff ( int $intarg ) 
int ncurses_slk_attron ( int $intarg ) 
int ncurses_slk_attrset ( int $intarg ) 
bool ncurses_slk_clear ( void ) 
int ncurses_slk_color ( int $intarg ) 
bool ncurses_slk_init ( int $format ) 
bool ncurses_slk_noutrefresh ( void ) 
int ncurses_slk_refresh ( void ) 
int ncurses_slk_restore ( void ) 
bool ncurses_slk_set ( int $labelnr , string $label , int $format ) 
int ncurses_slk_touch ( void ) 
int ncurses_standend ( void ) 
int ncurses_standout ( void ) 
int ncurses_start_color ( void ) Initializes color functionality in ncurses. This function must be called before any color manipulation functions are called and after ncurses_init() is called. It is good practice to call this function right after ncurses_init(). 
bool ncurses_termattrs ( void ) 
string ncurses_termname ( void ) 
void ncurses_timeout ( int $millisec ) 
int ncurses_top_panel ( resource $panel ) 
int ncurses_typeahead ( int $fd ) 
int ncurses_ungetch ( int $keycode ) 
bool ncurses_ungetmouse ( array $mevent ) 
void ncurses_update_panels ( void ) 
bool ncurses_use_default_colors ( void ) 
void ncurses_use_env ( bool $flag ) 
int ncurses_use_extended_names ( bool $flag ) 
int ncurses_vidattr ( int $intarg ) 
int ncurses_vline ( int $charattr , int $n ) 
int ncurses_waddch ( resource $window , int $ch ) 
int ncurses_waddstr ( resource $window , string $str [, int $n ] ) 
int ncurses_wattroff ( resource $window , int $attrs ) 
int ncurses_wattron ( resource $window , int $attrs ) 
int ncurses_wattrset ( resource $window , int $attrs ) 
int ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner ) 
int ncurses_wclear ( resource $window ) 
int ncurses_wcolor_set ( resource $window , int $color_pair ) 
int ncurses_werase ( resource $window ) 
int ncurses_wgetch ( resource $window ) 
int ncurses_whline ( resource $window , int $charattr , int $n ) 
bool ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , bool $toscreen ) 
int ncurses_wmove ( resource $window , int $y , int $x ) 
int ncurses_wnoutrefresh ( resource $window ) 
int ncurses_wrefresh ( resource $window ) 
int ncurses_wstandend ( resource $window ) 
int ncurses_wstandout ( resource $window ) 
int ncurses_wvline ( resource $window , int $charattr , int $n ) 
array gopher_parsedir ( string $dirent ) 
void newt_bell ( void ) 
resource newt_button_bar ( array &$buttons ) This function returns a grid containing the buttons created. 
resource newt_button ( int $left , int $top , string $text ) Creates a new button. 
int newt_centered_window ( int $width , int $height [, string $title ] ) Open a centered window of the specified size.
string newt_checkbox_get_value ( resource $checkbox ) This function returns the character in the sequence which indicates the current value of the checkbox. 
void newt_checkbox_set_flags ( resource $checkbox , int $flags , int $sense ) This function allows to set various flags on checkbox resource. 
void newt_checkbox_set_value ( resource $checkbox , string $value ) This function allows to set the current value of the checkbox resource. 
void newt_checkbox_tree_add_item ( resource $checkboxtree , string $text , mixed $data , int $flags , int $index [, int $... ] ) This function allows to add new item to the checkbox tree. 
array newt_checkbox_tree_find_item ( resource $checkboxtree , mixed $data ) Finds an item in the checkbox tree by item's data. 
mixed newt_checkbox_tree_get_current ( resource $checkboxtree ) This method returns checkbox tree selected tem. 
string newt_checkbox_tree_get_entry_value ( resource $checkboxtree , mixed $data ) 
array newt_checkbox_tree_get_multi_selection ( resource $checkboxtree , string $seqnum ) 
array newt_checkbox_tree_get_selection ( resource $checkboxtree ) 
resource newt_checkbox_tree_multi ( int $left , int $top , int $height , string $seq [, int $flags ] ) 
void newt_checkbox_tree_set_current ( resource $checkboxtree , mixed $data ) 
void newt_checkbox_tree_set_entry_value ( resource $checkboxtree , mixed $data , string $value ) 
void newt_checkbox_tree_set_entry ( resource $checkboxtree , mixed $data , string $text ) 
void newt_checkbox_tree_set_width ( resource $checkbox_tree , int $width ) 
resource newt_checkbox_tree ( int $left , int $top , int $height [, int $flags ] ) 
resource newt_checkbox ( int $left , int $top , string $text , string $def_value [, string $seq ] ) 
void newt_clear_key_buffer ( void ) Discards the contents of the terminal's input buffer without waiting for additional input. 
void newt_cls ( void ) 
resource newt_compact_button ( int $left , int $top , string $text ) 
void newt_component_add_callback ( resource $component , mixed $func_name , mixed $data ) 
void newt_component_takes_focus ( resource $component , bool $takes_focus ) 
resource newt_create_grid ( int $cols , int $rows ) 
void newt_cursor_off ( void ) 
void newt_cursor_on ( void ) 
void newt_delay ( int $microseconds ) 
void newt_draw_form ( resource $form ) 
void newt_draw_root_text ( int $left , int $top , string $text ) Displays the string text at the position indicated.
string newt_entry_get_value ( resource $entry ) 
void newt_entry_set_filter ( resource $entry , callable $filter , mixed $data ) 
void newt_entry_set_flags ( resource $entry , int $flags , int $sense ) 
void newt_entry_set ( resource $entry , string $value [, bool $cursor_at_end ] ) 
resource newt_entry ( int $left , int $top , int $width [, string $init_value [, int $flags ]] ) 
int newt_finished ( void ) Uninitializes newt interface. This function be called, when program is ready to exit. 
void newt_form_add_component ( resource $form , resource $component ) Adds a single component to the form. 
void newt_form_add_components ( resource $form , array $components ) Adds several components to the form. 
void newt_form_add_hot_key ( resource $form , int $key ) 
void newt_form_destroy ( resource $form ) This function frees the memory resources used by the form and all of the components which have been added to the form (including those components which are on subforms). Once a form has been destroyed, none of the form's components can be used. 
resource newt_form_get_current ( resource $form ) 
void newt_form_run ( resource $form , array &$exit_struct ) This function runs the form passed to it. 
void newt_form_set_background ( resource $from , int $background ) 
void newt_form_set_height ( resource $form , int $height ) 
void newt_form_set_size ( resource $form ) 
void newt_form_set_timer ( resource $form , int $milliseconds ) 
void newt_form_set_width ( resource $form , int $width ) 
void newt_form_watch_fd ( resource $form , resource $stream [, int $flags ] ) 
resource newt_form ([ resource $vert_bar [, string $help [, int $flags ]]] ) Create a new form. 
void newt_get_screen_size ( int &$cols , int &$rows ) Fills in the passed references with the current size of the terminal. 
void newt_grid_add_components_to_form ( resource $grid , resource $form , bool $recurse ) 
resource newt_grid_basic_window ( resource $text , resource $middle , resource $buttons ) 
void newt_grid_free ( resource $grid , bool $recurse ) 
void newt_grid_get_size ( resouce $grid , int &$width , int &$height ) 
resource newt_grid_h_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] ) 
resource newt_grid_h_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] ) 
void newt_grid_place ( resource $grid , int $left , int $top ) 
void newt_grid_set_field ( resource $grid , int $col , int $row , int $type , resource $val , int $pad_left , int $pad_top , int $pad_right , int $pad_bottom , int $anchor [, int $flags ] ) 
resource newt_grid_simple_window ( resource $text , resource $middle , resource $buttons ) 
resource newt_grid_v_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] ) 
resource newt_grid_v_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] ) 
void newt_grid_wrapped_window_at ( resource $grid , string $title , int $left , int $top ) 
void newt_grid_wrapped_window ( resource $grid , string $title ) 
int newt_init ( void ) Initializes the newt interface. This function must be called before any other newt function. 
void newt_label_set_text ( resource $label , string $text ) 
resource newt_label ( int $left , int $top , string $text ) 
void newt_listbox_append_entry ( resource $listbox , string $text , mixed $data ) 
void newt_listbox_clear_selection ( resource $listbox ) 
void newt_listbox_clear ( resource $listobx ) 
void newt_listbox_delete_entry ( resource $listbox , mixed $key ) 
string newt_listbox_get_current ( resource $listbox ) 
array newt_listbox_get_selection ( resource $listbox ) 
void newt_listbox_insert_entry ( resource $listbox , string $text , mixed $data , mixed $key ) 
int newt_listbox_item_count ( resource $listbox ) 
void newt_listbox_select_item ( resource $listbox , mixed $key , int $sense ) 
void newt_listbox_set_current_by_key ( resource $listbox , mixed $key ) 
void newt_listbox_set_current ( resource $listbox , int $num ) 
void newt_listbox_set_data ( resource $listbox , int $num , mixed $data ) 
void newt_listbox_set_entry ( resource $listbox , int $num , string $text ) 
void newt_listbox_set_width ( resource $listbox , int $width ) 
resource newt_listbox ( int $left , int $top , int $height [, int $flags ] ) 
mixed newt_listitem_get_data ( resource $item ) 
void newt_listitem_set ( resource $item , string $text ) 
resource newt_listitem ( int $left , int $top , string $text , bool $is_default , resouce $prev_item , mixed $data [, int $flags ] ) 
int newt_open_window ( int $left , int $top , int $width , int $height [, string $title ] ) Open a window of the specified size and position. 
void newt_pop_help_line ( void ) 
void newt_pop_window ( void ) Removes the top window from the display, and redraws the display areas which the window overwrote.
void newt_push_help_line ([ string $text ] ) Saves the current help line on a stack, and displays the new line. 
resource newt_radio_get_current ( resource $set_member ) 
resource newt_radiobutton ( int $left , int $top , string $text , bool $is_default [, resource $prev_button ] ) 
void newt_redraw_help_line ( void ) 
string newt_reflow_text ( string $text , int $width , int $flex_down , int $flex_up , int &$actual_width , int &$actual_height ) 
void newt_refresh ( void ) To increase performance, newt only updates the display when it needs to, not when the program tells it to write to the terminal. Applications can force newt to immediately update modified portions of the screen by calling this function. 
void newt_resize_screen ([ bool $redraw ] ) 
void newt_resume ( void ) Resume using the newt interface after calling newt_suspend(). 
resource newt_run_form ( resource $form ) This function runs the form passed to it. 
void newt_scale_set ( resource $scale , int $amount ) 
resource newt_scale ( int $left , int $top , int $width , int $full_value ) 
void newt_scrollbar_set ( resource $scrollbar , int $where , int $total ) 
void newt_set_help_callback ( mixed $function ) 
void newt_set_suspend_callback ( callable $function , mixed $data ) Set a callback function which gets invoked when user presses the suspend key (normally ^Z). If no suspend callback is registered, the suspend keystroke is ignored. 
void newt_suspend ( void ) Tells newt to return the terminal to its initial state. Once this is done, the application can suspend itself (by sending itself a SIGTSTP, fork a child program, or do whatever else it likes). 
int newt_textbox_get_num_lines ( resource $textbox ) 
resource newt_textbox_reflowed ( int $left , int $top , char $*text , int $width , int $flex_down , int $flex_up [, int $flags ] ) 
void newt_textbox_set_height ( resource $textbox , int $height ) 
void newt_textbox_set_text ( resource $textbox , string $text ) 
resource newt_textbox ( int $left , int $top , int $width , int $height [, int $flags ] ) 
resource newt_vertical_scrollbar ( int $left , int $top , int $height [, int $normal_colorset [, int $thumb_colorset ]] ) 
void newt_wait_for_key ( void ) This function doesn't return until a key has been pressed. The keystroke is then ignored. If a key is already in the terminal's buffer, this function discards a keystroke and returns immediately. 
int newt_win_choice ( string $title , string $button1_text , string $button2_text , string $format [, mixed $args [, mixed $... ]] ) 
int newt_win_entries ( string $title , string $text , int $suggested_width , int $flex_down , int $flex_up , int $data_width , array &$items , string $button1 [, string $... ] ) 
int newt_win_menu ( string $title , string $text , int $suggestedWidth , int $flexDown , int $flexUp , int $maxListHeight , array $items , int &$listItem [, string $button1 [, string $... ]] ) 
void newt_win_message ( string $title , string $button_text , string $format [, mixed $args [, mixed $... ]] ) 
void newt_win_messagev ( string $title , string $button_text , string $format , array $args ) 
int newt_win_ternary ( string $title , string $button1_text , string $button2_text , string $button3_text , string $format [, mixed $args [, mixed $... ]] ) 
void yp_all ( string $domain , string $map , string $callback ) 
array yp_cat ( string $domain , string $map ) Returns all map entries. 
string yp_err_string ( int $errorcode ) Returns the error message associated with the given error code. Useful to indicate what exactly went wrong. 
int yp_errno ( void ) Returns the error code of the previous operation. 
array yp_first ( string $domain , string $map ) Gets the first key-value pair from the named map in the named domain. 
string yp_get_default_domain ( void ) 
string yp_master ( string $domain , string $map ) Returns the machine name of the master NIS server for a map. 
string yp_match ( string $domain , string $map , string $key ) Returns the value associated with the passed key out of the specified map. 
array yp_next ( string $domain , string $map , string $key ) Returns the next key-value pair in the named map after the specified key. 
int yp_order ( string $domain , string $map ) Gets the order number for a map. 
string oauth_get_sbs ( string $http_method , string $uri [, array $request_parameters ] ) Generates a Signature Base String according to pecl/oauth. 
string oauth_urlencode ( string $uri ) Encodes a URI to » RFC 3986. 
resource openal_buffer_create ( void ) 
bool openal_buffer_data ( resource $buffer , int $format , string $data , int $freq ) 
bool openal_buffer_destroy ( resource $buffer ) 
int openal_buffer_get ( resource $buffer , int $property ) 
bool openal_buffer_loadwav ( resource $buffer , string $wavfile ) 
resource openal_context_create ( resource $device ) 
bool openal_context_current ( resource $context ) 
bool openal_context_destroy ( resource $context ) 
bool openal_context_process ( resource $context ) 
bool openal_context_suspend ( resource $context ) 
bool openal_device_close ( resource $device ) 
resource openal_device_open ([ string $device_desc ] ) 
mixed openal_listener_get ( int $property ) 
bool openal_listener_set ( int $property , mixed $setting ) 
resource openal_source_create ( void ) 
bool openal_source_destroy ( resource $source ) 
mixed openal_source_get ( resource $source , int $property ) 
bool openal_source_pause ( resource $source ) 
bool openal_source_play ( resource $source ) 
bool openal_source_rewind ( resource $source ) 
bool openal_source_set ( resource $source , int $property , mixed $setting ) 
bool openal_source_stop ( resource $source ) 
resource openal_stream ( resource $source , int $format , int $rate ) 
bool px_close ( resource $pxdoc ) Closes the paradox database. This function will not close the file. You will have to call fclose() afterwards. 
bool px_create_fp ( resource $pxdoc , resource $file , array $fielddesc ) 
string px_date2string ( resource $pxdoc , int $value , string $format ) Turns a date as it stored in the paradox file into human readable format. Paradox dates are the number of days since 1.1.0000. This function is just for convenience. It can be easily replaced by some math and the calendar functions as demonstrated in the example below. 
bool px_delete_record ( resource $pxdoc , int $num ) 
bool px_delete ( resource $pxdoc ) Deletes the resource of the paradox file and frees all memory. 
array px_get_field ( resource $pxdoc , int $fieldno ) 
array px_get_info ( resource $pxdoc ) 
string px_get_parameter ( resource $pxdoc , string $name ) Gets various parameters. 
array px_get_record ( resource $pxdoc , int $num [, int $mode = 0 ] ) 
array px_get_schema ( resource $pxdoc [, int $mode = 0 ] ) px_get_schema() returns the database schema. 
float px_get_value ( resource $pxdoc , string $name ) Gets various values. 
int px_insert_record ( resource $pxdoc , array $data ) 
resource px_new ( void ) Create a new paradox object. You will have to call this function before any further functions. px_new() does not create any file on the disk, it just creates an instance of a paradox object. This function must not be called if the object oriented interface is used. Use new paradox_db() instead. 
int px_numfields ( resource $pxdoc ) Get the number of fields in a database file. 
int px_numrecords ( resource $pxdoc ) Get the number of records in a database file. 
bool px_open_fp ( resource $pxdoc , resource $file ) Open an existing paradox database file. The actual file has to be opened before with fopen(). This function can also be used to open primary index files and tread them like a paradox database. This is supported for those who would like to investigate a primary index. It cannot be used to accelerate access to a database file. 
bool px_put_record ( resource $pxdoc , array $record [, int $recpos = -1 ] ) Stores a record into a paradox database. The record is always added at the end of the database, regardless of any free slots. Use px_insert_record() to add a new record into the first free slot found in the database. 
array px_retrieve_record ( resource $pxdoc , int $num [, int $mode = 0 ] ) 
bool px_set_blob_file ( resource $pxdoc , string $filename ) 
bool px_set_parameter ( resource $pxdoc , string $name , string $value ) Sets various parameters. 
void px_set_tablename ( resource $pxdoc , string $name ) Sets the table name of a paradox database, which was created with px_create_fp(). This function is deprecated use px_set_parameter() instead. 
bool px_set_targetencoding ( resource $pxdoc , string $encoding ) 
bool px_set_value ( resource $pxdoc , string $name , float $value ) Sets various values. 
string px_timestamp2string ( resource $pxdoc , float $value , string $format ) Turns a timestamp as it stored in the paradox file into human readable format. Paradox timestamps are the number of miliseconds since 0001-01-02. This function is just for convenience. It can be easily replaced by some math and the calendar functions as demonstrated in the following example. 
bool px_update_record ( resource $pxdoc , array $data , int $num ) 
array parsekit_compile_file ( string $filename [, array &$errors [, int $options = PARSEKIT_QUIET ]] ) 
array parsekit_compile_string ( string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET ]] ) 
array parsekit_func_arginfo ( mixed $function ) 
bool PDF_activate_item ( resource $pdfdoc , int $id ) Activates a previously created structure element or other content item. Returns TRUE on success or FALSE on failure. 
This function is deprecated, use PDF_create_annotation() with type=Text instead.  
This function is deprecated since PDFlib version 6, use PDF_create_bookmark() instead.  
bool PDF_add_launchlink ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename ) 
bool PDF_add_locallink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest ) 
bool PDF_add_nameddest ( resource $pdfdoc , string $name , string $optlist ) Creates a named destination on an arbitrary page in the current document. Returns TRUE on success or FALSE on failure. 
bool PDF_add_note ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open ) 
This function is deprecated, use PDF_create_bookmark() instead.  
bool PDF_add_pdflink ( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest ) 
int PDF_add_table_cell ( resource $pdfdoc , int $table , int $column , int $row , string $text , string $optlist ) Adds a cell to a new or existing table. 
int PDF_add_textflow ( resource $pdfdoc , int $textflow , string $text , string $optlist ) Creates a Textflow object, or adds text and explicit options to an existing Textflow. 
bool PDF_add_thumbnail ( resource $pdfdoc , int $image ) Adds an existing image as thumbnail for the current page. Returns TRUE on success or FALSE on failure. 
bool PDF_add_weblink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url ) 
bool PDF_arc ( resource $p , float $x , float $y , float $r , float $alpha , float $beta ) Adds a counterclockwise circular arc. 
bool PDF_arcn ( resource $p , float $x , float $y , float $r , float $alpha , float $beta ) Except for the drawing direction, this function behaves exactly like PDF_arc(). 
bool PDF_attach_file ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon ) 
int PDF_begin_document ( resource $pdfdoc , string $filename , string $optlist ) Creates a new PDF file subject to various options. 
bool PDF_begin_font ( resource $pdfdoc , string $filename , float $a , float $b , float $c , float $d , float $e , float $f , string $optlist ) Starts a Type 3 font definition. 
bool PDF_begin_glyph ( resource $pdfdoc , string $glyphname , float $wx , float $llx , float $lly , float $urx , float $ury ) Starts a glyph definition for a Type 3 font. 
int PDF_begin_item ( resource $pdfdoc , string $tag , string $optlist ) Opens a structure element or other content item with attributes supplied as options. 
bool PDF_begin_layer ( resource $pdfdoc , int $layer ) 
bool PDF_begin_page_ext ( resource $pdfdoc , float $width , float $height , string $optlist ) 
bool PDF_begin_page ( resource $pdfdoc , float $width , float $height ) 
int PDF_begin_pattern ( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , int $painttype ) Starts a new pattern definition. 
int PDF_begin_template_ext ( resource $pdfdoc , float $width , float $height , string $optlist ) Starts a new template definition. 
int PDF_begin_template ( resource $pdfdoc , float $width , float $height ) 
bool PDF_circle ( resource $pdfdoc , float $x , float $y , float $r ) Adds a circle. Returns TRUE on success or FALSE on failure. 
bool PDF_clip ( resource $p ) Uses the current path as clipping path, and terminate the path. Returns TRUE on success or FALSE on failure. 
bool PDF_close_image ( resource $p , int $image ) Closes an image retrieved with the PDF_open_image() function. 
bool PDF_close_pdi_page ( resource $p , int $page ) Closes the page handle, and frees all page-related resources. Returns TRUE on success or FALSE on failure. 
bool PDF_close_pdi ( resource $p , int $doc ) 
bool PDF_close ( resource $p ) 
bool PDF_closepath_fill_stroke ( resource $p ) Closes the path, fills, and strokes it. Returns TRUE on success or FALSE on failure. 
bool PDF_closepath_stroke ( resource $p ) Closes the path, and strokes it. Returns TRUE on success or FALSE on failure. 
bool PDF_closepath ( resource $p ) Closes the current path. Returns TRUE on success or FALSE on failure. 
bool PDF_concat ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f ) Concatenates a matrix to the current transformation matrix (CTM). Returns TRUE on success or FALSE on failure. 
bool PDF_continue_text ( resource $p , string $text ) Prints text at the next line. Returns TRUE on success or FALSE on failure. 
int PDF_create_3dview ( resource $pdfdoc , string $username , string $optlist ) 
int PDF_create_action ( resource $pdfdoc , string $type , string $optlist ) Creates an action which can be applied to various objects and events. 
bool PDF_create_annotation ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $type , string $optlist ) Creates a rectangular annotation on the current page. 
int PDF_create_bookmark ( resource $pdfdoc , string $text , string $optlist ) Creates a bookmark subject to various options. 
bool PDF_create_field ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $name , string $type , string $optlist ) Creates a form field on the current page subject to various options. 
bool PDF_create_fieldgroup ( resource $pdfdoc , string $name , string $optlist ) Creates a form field group subject to various options. 
int PDF_create_gstate ( resource $pdfdoc , string $optlist ) Creates a graphics state object subject to various options. 
bool PDF_create_pvf ( resource $pdfdoc , string $filename , string $data , string $optlist ) Creates a named virtual read-only file from data provided in memory. 
int PDF_create_textflow ( resource $pdfdoc , string $text , string $optlist ) Preprocesses text for later formatting and creates a textflow object. 
bool PDF_curveto ( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ) Draws a Bezier curve from the current point, using 3 more control points. Returns TRUE on success or FALSE on failure. 
int PDF_define_layer ( resource $pdfdoc , string $name , string $optlist ) 
int PDF_delete_pvf ( resource $pdfdoc , string $filename ) Deletes a named virtual file and frees its data structures (but not the contents). 
bool PDF_delete_table ( resource $pdfdoc , int $table , string $optlist ) Deletes a table and all associated data structures. 
bool PDF_delete_textflow ( resource $pdfdoc , int $textflow ) Deletes a textflow and the associated data structures. 
bool PDF_delete ( resource $pdfdoc ) Deletes a PDFlib object, and frees all internal resources. Returns TRUE on success or FALSE on failure. 
bool PDF_encoding_set_char ( resource $pdfdoc , string $encoding , int $slot , string $glyphname , int $uv ) Adds a glyph name and/or Unicode value to a custom encoding. 
bool PDF_end_document ( resource $pdfdoc , string $optlist ) Closes the generated PDF file and applies various options. 
bool PDF_end_font ( resource $pdfdoc ) Terminates a Type 3 font definition. 
bool PDF_end_glyph ( resource $pdfdoc ) Terminates a glyph definition for a Type 3 font. 
bool PDF_end_item ( resource $pdfdoc , int $id ) Closes a structure element or other content item. 
bool PDF_end_layer ( resource $pdfdoc ) 
bool PDF_end_page_ext ( resource $pdfdoc , string $optlist ) Finishes a page, and applies various options. Returns TRUE on success or FALSE on failure. 
bool PDF_end_page ( resource $p ) Finishes the page. Returns TRUE on success or FALSE on failure. 
bool PDF_end_pattern ( resource $p ) Finishes the pattern definition. Returns TRUE on success or FALSE on failure. 
bool PDF_end_template ( resource $p ) Finishes a template definition. Returns TRUE on success or FALSE on failure. 
bool PDF_endpath ( resource $p ) Ends the current path without filling or stroking it. 
int PDF_fill_imageblock ( resource $pdfdoc , int $page , string $blockname , int $image , string $optlist ) 
int PDF_fill_pdfblock ( resource $pdfdoc , int $page , string $blockname , int $contents , string $optlist ) 
bool PDF_fill_stroke ( resource $p ) Fills and strokes the current path with the current fill and stroke color. Returns TRUE on success or FALSE on failure. 
int PDF_fill_textblock ( resource $pdfdoc , int $page , string $blockname , string $text , string $optlist ) 
bool PDF_fill ( resource $p ) Fills the interior of the current path with the current fill color. Returns TRUE on success or FALSE on failure. 
int PDF_findfont ( resource $p , string $fontname , string $encoding , int $embed ) 
bool PDF_fit_image ( resource $pdfdoc , int $image , float $x , float $y , string $optlist ) Places an image or template on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
bool PDF_fit_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , string $optlist ) Places an imported PDF page on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
string PDF_fit_table ( resource $pdfdoc , int $table , float $llx , float $lly , float $urx , float $ury , string $optlist ) Places a table on the page fully or partially. 
string PDF_fit_textflow ( resource $pdfdoc , int $textflow , float $llx , float $lly , float $urx , float $ury , string $optlist ) Formats the next portion of a textflow into a rectangular area. 
bool PDF_fit_textline ( resource $pdfdoc , string $text , float $x , float $y , string $optlist ) Places a single line of text on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
string PDF_get_apiname ( resource $pdfdoc ) Gets the name of the API function which threw the last exception or failed. 
string PDF_get_buffer ( resource $p ) Fetches the buffer containing the generated PDF data. 
string PDF_get_errmsg ( resource $pdfdoc ) Gets the text of the last thrown exception or the reason for a failed function call. 
int PDF_get_errnum ( resource $pdfdoc ) Gets the number of the last thrown exception or the reason for a failed function call. 
This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter font instead.  
This function is deprecated since PDFlib version 3, use PDF_get_parameter() with the parameter fontname instead.  
This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter fontsizeinstead.  
This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter imageheight instead.  
This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter imagewidth instead.  
int PDF_get_majorversion ( void ) This function is deprecated since PDFlib version 5, use PDF_get_value() with the parameter major instead. 
int PDF_get_minorversion ( void ) 
string PDF_get_parameter ( resource $p , string $key , float $modifier ) Gets the contents of some PDFlib parameter with string type. 
string PDF_get_pdi_parameter ( resource $p , string $key , int $doc , int $page , int $reserved ) 
float PDF_get_pdi_value ( resource $p , string $key , int $doc , int $page , int $reserved ) 
float PDF_get_value ( resource $p , string $key , float $modifier ) Gets the value of some PDFlib parameter with numerical type. 
float PDF_info_font ( resource $pdfdoc , int $font , string $keyword , string $optlist ) Queries detailed information about a loaded font. 
float PDF_info_matchbox ( resource $pdfdoc , string $boxname , int $num , string $keyword ) Queries information about a matchbox on the current page. 
float PDF_info_table ( resource $pdfdoc , int $table , string $keyword ) Retrieves table information related to the most recently placed table instance. 
float PDF_info_textflow ( resource $pdfdoc , int $textflow , string $keyword ) Queries the current state of a textflow. 
float PDF_info_textline ( resource $pdfdoc , string $text , string $keyword , string $optlist ) Performs textline formatting and queries the resulting metrics. 
bool PDF_initgraphics ( resource $p ) Reset all color and graphics state parameters to their defaults. Returns TRUE on success or FALSE on failure. 
bool PDF_lineto ( resource $p , float $x , float $y ) Draws a line from the current point to another point. Returns TRUE on success or FALSE on failure. 
int PDF_load_3ddata ( resource $pdfdoc , string $filename , string $optlist ) 
int PDF_load_font ( resource $pdfdoc , string $fontname , string $encoding , string $optlist ) Searches for a font and prepares it for later use. 
int PDF_load_iccprofile ( resource $pdfdoc , string $profilename , string $optlist ) Searches for an ICC profile, and prepares it for later use. 
int PDF_load_image ( resource $pdfdoc , string $imagetype , string $filename , string $optlist ) Opens a disk-based or virtual image file subject to various options. 
int PDF_makespotcolor ( resource $p , string $spotname ) Finds a built-in spot color name, or makes a named spot color from the current fill color. Returns TRUE on success or FALSE on failure. 
bool PDF_moveto ( resource $p , float $x , float $y ) Sets the current point for graphics output. Returns TRUE on success or FALSE on failure. 
resource PDF_new ( void ) Creates a new PDFlib object with default settings. 
int PDF_open_ccitt ( resource $pdfdoc , string $filename , int $width , int $height , int $BitReverse , int $k , int $Blackls1 ) 
bool PDF_open_file ( resource $p , string $filename ) 
This function is deprecated since PDFlib version 3, use PDF_load_image() instead.  
int PDF_open_image_file ( resource $p , string $imagetype , string $filename , string $stringparam , int $intparam ) 
int PDF_open_image ( resource $p , string $imagetype , string $source , string $data , int $length , int $width , int $height , int $components , int $bpc , string $params ) 
This function is deprecated since PDFlib version 3, use PDF_load_image() instead.  
int PDF_open_memory_image ( resource $p , resource $image ) This function is not supported by PDFlib GmbH. 
int PDF_open_pdi_document ( resource $p , string $filename , string $optlist ) Open a disk-based or virtual PDF document and prepare it for later use. 
int PDF_open_pdi_page ( resource $p , int $doc , int $pagenumber , string $optlist ) Prepares a page for later use with PDF_fit_pdi_page(). 
int PDF_open_pdi ( resource $pdfdoc , string $filename , string $optlist , int $len ) 
This function is deprecated since PDFlib version 3, use PDF_load_image() instead.  
float PDF_pcos_get_number ( resource $p , int $doc , string $path ) Gets the value of a pCOS path with type number or boolean. 
string PDF_pcos_get_stream ( resource $p , int $doc , string $optlist , string $path ) Gets the contents of a pCOS path with type stream, fstream, or string. 
string PDF_pcos_get_string ( resource $p , int $doc , string $path ) Gets the value of a pCOS path with type name, string, or boolean. 
bool PDF_place_image ( resource $pdfdoc , int $image , float $x , float $y , float $scale ) 
bool PDF_place_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy ) 
int PDF_process_pdi ( resource $pdfdoc , int $doc , int $page , string $optlist ) Processes certain elements of an imported PDF document. 
bool PDF_rect ( resource $p , float $x , float $y , float $width , float $height ) Draws a rectangle. Returns TRUE on success or FALSE on failure. 
bool PDF_restore ( resource $p ) Restores the most recently saved graphics state. Returns TRUE on success or FALSE on failure. 
bool PDF_resume_page ( resource $pdfdoc , string $optlist ) Resumes a page to add more content to it. 
bool PDF_rotate ( resource $p , float $phi ) Rotates the coordinate system. Returns TRUE on success or FALSE on failure. 
bool PDF_save ( resource $p ) Saves the current graphics state. Returns TRUE on success or FALSE on failure. 
bool PDF_scale ( resource $p , float $sx , float $sy ) Scales the coordinate system. Returns TRUE on success or FALSE on failure. 
bool PDF_set_border_color ( resource $p , float $red , float $green , float $blue ) 
bool PDF_set_border_dash ( resource $pdfdoc , float $black , float $white ) 
bool PDF_set_border_style ( resource $pdfdoc , string $style , float $width ) 
This function is deprecated since PDFlib version 3, use PDF_set_value() with parameter charspacing instead.  
This function is deprecated since PDFlib version 3, use the duration option in PDF_begin_page_ext() or PDF_end_page_ext() instead.  
bool PDF_set_gstate ( resource $pdfdoc , int $gstate ) Activates a graphics state object. 
This function is deprecated since PDFlib version 3, use PDF_set_value() with parameter horizscaling instead.  
This function is deprecated since PDFlib version 3, use PDF_set_info() instead.  
This function is deprecated since PDFlib version 3, use PDF_set_info() instead.  
This function is deprecated since PDFlib version 3, use PDF_set_info() instead.  
This function is deprecated since PDFlib version 3, use PDF_set_info() instead.  
This function is deprecated since PDFlib version 3, use PDF_set_info() instead.  
bool PDF_set_info ( resource $p , string $key , string $value ) Fill document information field key with value. Returns TRUE on success or FALSE on failure. 
bool PDF_set_layer_dependency ( resource $pdfdoc , string $type , string $optlist ) 
This function is deprecated since PDFlib version 3, use PDF_set_value() with the parameter leading instead.  
bool PDF_set_parameter ( resource $p , string $key , string $value ) Sets some PDFlib parameter with string type. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 3, use PDF_scale(), PDF_translate(), PDF_rotate(), or PDF_skew() instead.  
bool PDF_set_text_pos ( resource $p , float $x , float $y ) Sets the position for text output on the page. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 3, use PDF_set_value() with the textrendering parameter instead.  
This function is deprecated since PDFlib version 3, use PDF_set_value() with the textrise parameter instead.  
bool PDF_set_value ( resource $p , string $key , float $value ) Sets the value of some PDFlib parameter with numerical type. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 3, use PDF_set_value() with the wordspacing parameter instead.  
bool PDF_setcolor ( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 ) Sets the current color space and color. Returns TRUE on success or FALSE on failure. 
bool PDF_setdash ( resource $pdfdoc , float $b , float $w ) Sets the current dash pattern to b black and w white units. Returns TRUE on success or FALSE on failure. 
bool PDF_setdashpattern ( resource $pdfdoc , string $optlist ) Sets a dash pattern defined by an option list. Returns TRUE on success or FALSE on failure. 
bool PDF_setflat ( resource $pdfdoc , float $flatness ) Sets the flatness parameter. Returns TRUE on success or FALSE on failure. 
bool PDF_setfont ( resource $pdfdoc , int $font , float $fontsize ) Sets the current font in the specified fontsize, using a font handle returned by PDF_load_font(). Returns TRUE on success or FALSE on failure. 
bool PDF_setgray_fill ( resource $p , float $g ) 
bool PDF_setgray_stroke ( resource $p , float $g ) 
bool PDF_setgray ( resource $p , float $g ) 
bool PDF_setlinecap ( resource $p , int $linecap ) Sets the linecap parameter to control the shape at the end of a path with respect to stroking. 
bool PDF_setlinejoin ( resource $p , int $value ) Sets the linejoin parameter to specify the shape at the corners of paths that are stroked. Returns TRUE on success or FALSE on failure. 
bool PDF_setlinewidth ( resource $p , float $width ) Sets the current line width. Returns TRUE on success or FALSE on failure. 
bool PDF_setmatrix ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f ) Explicitly sets the current transformation matrix. Returns TRUE on success or FALSE on failure. 
bool PDF_setmiterlimit ( resource $pdfdoc , float $miter ) Sets the miter limit.Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 5, use PDF_setdashpattern() instead.  
bool PDF_setrgbcolor_fill ( resource $p , float $red , float $green , float $blue ) 
bool PDF_setrgbcolor_stroke ( resource $p , float $red , float $green , float $blue ) 
bool PDF_setrgbcolor ( resource $p , float $red , float $green , float $blue ) 
int PDF_shading_pattern ( resource $pdfdoc , int $shading , string $optlist ) 
int PDF_shading ( resource $pdfdoc , string $shtype , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist ) 
bool PDF_shfill ( resource $pdfdoc , int $shading ) 
int PDF_show_boxed ( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature ) This function is deprecated since PDFlib version 6, use PDF_fit_textline() for single lines, or the PDF_*_textflow() functions for multi-line formatting instead. 
bool PDF_show_xy ( resource $p , string $text , float $x , float $y ) Prints text in the current font. Returns TRUE on success or FALSE on failure. 
bool PDF_show ( resource $pdfdoc , string $text ) Prints text in the current font and size at the current position. Returns TRUE on success or FALSE on failure. 
bool PDF_skew ( resource $p , float $alpha , float $beta ) Skews the coordinate system in x and y direction by alpha and beta degrees, respectively. Returns TRUE on success or FALSE on failure. 
float PDF_stringwidth ( resource $p , string $text , int $font , float $fontsize ) Returns the width of text in an arbitrary font. 
bool PDF_stroke ( resource $p ) Strokes the path with the current color and line width, and clear it. Returns TRUE on success or FALSE on failure. 
bool PDF_suspend_page ( resource $pdfdoc , string $optlist ) Suspends the current page so that it can later be resumed with PDF_resume_page(). 
bool PDF_translate ( resource $p , float $tx , float $ty ) Translates the origin of the coordinate system. 
string PDF_utf16_to_utf8 ( resource $pdfdoc , string $utf16string ) Converts a string from UTF-16 format to UTF-8. 
string PDF_utf32_to_utf16 ( resource $pdfdoc , string $utf32string , string $ordering ) Converts a string from UTF-32 format to UTF-16. 
string PDF_utf8_to_utf16 ( resource $pdfdoc , string $utf8string , string $ordering ) Converts a string from UTF-8 format to UTF-16. 
void setproctitle ( string $title ) Sets the process title of the current process. 
bool setthreadtitle ( string $title ) Sets the thread title. 
int ps_add_bookmark ( resource $psdoc , string $text [, int $parent = 0 [, int $open = 0 ]] ) 
bool ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename ) 
bool ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest ) 
bool ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open ) 
bool ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest ) 
bool ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url ) 
bool ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta ) Draws a portion of a circle with at middle point at (x, y). The arc starts at an angle of alpha and ends at an angle of beta. It is drawn counterclockwise (use ps_arcn() to draw clockwise). The subpath added to the current path starts on the arc at angle alpha and ends on the arc at angle beta. 
bool ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta ) Draws a portion of a circle with at middle point at (x, y). The arc starts at an angle of alpha and ends at an angle of beta. It is drawn clockwise (use ps_arc() to draw counterclockwise). The subpath added to the current path starts on the arc at angle beta and ends on the arc at angle alpha. 
bool ps_begin_page ( resource $psdoc , float $width , float $height ) 
int ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype ) Starts a new pattern. A pattern is like a page containing e.g. a drawing which can be used for filling areas. It is used like a color by calling ps_setcolor() and setting the color space to pattern. 
int ps_begin_template ( resource $psdoc , float $width , float $height ) Starts a new template. A template is called a form in the postscript language. It is created similar to a pattern but used like an image. Templates are often used for drawings which are placed several times through out the document, e.g. like a company logo. All drawing functions may be used within a template. The template will not be drawn until it is placed by ps_place_image(). 
bool ps_circle ( resource $psdoc , float $x , float $y , float $radius ) Draws a circle with its middle point at (x, y). The circle starts and ends at position (x+radius, y). If this function is called outside a path it will start a new path. If it is called within a path it will add the circle as a subpath. If the last drawing operation does not end in point (x+radius, y) then there will be a gap in the path. 
bool ps_clip ( resource $psdoc ) Takes the current path and uses it to define the border of a clipping area. Everything drawn outside of that area will not be visible. 
void ps_close_image ( resource $psdoc , int $imageid ) Closes an image and frees its resources. Once an image is closed it cannot be used anymore. 
bool ps_close ( resource $psdoc ) 
bool ps_closepath_stroke ( resource $psdoc ) Connects the last point with first point of a path and draws the resulting closed line. 
bool ps_closepath ( resource $psdoc ) Connects the last point with the first point of a path. The resulting path can be used for stroking, filling, clipping, etc.. 
bool ps_continue_text ( resource $psdoc , string $text ) Output a text one line below the last line. The line spacing is taken from the value "leading" which must be set with ps_set_value(). The actual position of the text is determined by the values "textx" and "texty" which can be requested with ps_get_value() 
bool ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ) Add a section of a cubic Bézier curve described by the three given control points to the current path. 
bool ps_delete ( resource $psdoc ) Mainly frees memory used by the document. Also closes a file, if it was not closed before with ps_close(). You should in any case close the file with ps_close() before, because ps_close() not just closes the file but also outputs a trailor containing PostScript comments like the number of pages in the document and adding the bookmark hierarchy. 
bool ps_end_page ( resource $psdoc ) Ends a page which was started with ps_begin_page(). Ending a page will leave the current drawing context, which e.g. requires to reload fonts if they were loading within the page, and to set many other drawing parameters like the line width, or color.. 
bool ps_end_pattern ( resource $psdoc ) Ends a pattern which was started with ps_begin_pattern(). Once a pattern has been ended, it can be used like a color to fill areas. 
bool ps_end_template ( resource $psdoc ) Ends a template which was started with ps_begin_template(). Once a template has been ended, it can be used like an image. 
bool ps_fill_stroke ( resource $psdoc ) Fills and draws the path constructed with previously called drawing functions like ps_lineto(). 
bool ps_fill ( resource $psdoc ) Fills the path constructed with previously called drawing functions like ps_lineto(). 
int ps_findfont ( resource $psdoc , string $fontname , string $encoding [, bool $embed = FALSE ] ) 
string ps_get_buffer ( resource $psdoc ) 
string ps_get_parameter ( resource $psdoc , string $name [, float $modifier ] ) 
float ps_get_value ( resource $psdoc , string $name [, float $modifier ] ) 
array ps_hyphenate ( resource $psdoc , string $text ) 
bool ps_include_file ( resource $psdoc , string $file ) 
bool ps_lineto ( resource $psdoc , float $x , float $y ) Adds a straight line from the current point to the given coordinates to the current path. Use ps_moveto() to set the starting point of the line. 
int ps_makespotcolor ( resource $psdoc , string $name [, int $reserved = 0 ] ) Creates a spot color from the current fill color. The fill color must be defined in rgb, cmyk or gray colorspace. The spot color name can be an arbitrary name. A spot color can be set as any color with ps_setcolor(). When the document is not printed but displayed by an postscript viewer the given color in the specified color space is use. 
bool ps_moveto ( resource $psdoc , float $x , float $y ) Sets the current point to new coordinates. If this is the first call of ps_moveto() after a previous path has been ended then it will start a new path. If this function is called in the middle of a path it will just set the current point and start a subpath. 
resource ps_new ( void ) Creates a new document instance. It does not create the file on disk or in memory, it just sets up everything. ps_new() is usually followed by a call of ps_open_file() to actually create the postscript document. 
bool ps_open_file ( resource $psdoc [, string $filename ] ) Creates a new file on disk and writes the PostScript document into it. The file will be closed when ps_close() is called. 
int ps_open_image_file ( resource $psdoc , string $type , string $filename [, string $stringparam [, int $intparam = 0 ]] ) Loads an image for later use. 
int ps_open_image ( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params ) Reads an image which is already available in memory. The parameter source is currently not evaluated and assumed to be memory. The image data is a sequence of pixels starting in th upper left corner and ending in the lower right corner. Each pixel consists of components color components, and each component has bpc bits. 
int ps_open_memory_image ( resource $psdoc , int $gd ) 
bool ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale ) Places a formerly loaded image on the page. The image can be scaled. If the image shall be rotated as well, you will have to rotate the coordinate system before with ps_rotate(). 
bool ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height ) Draws a rectangle with its lower left corner at (x, y). The rectangle starts and ends in its lower left corner. If this function is called outside a path it will start a new path. If it is called within a path it will add the rectangle as a subpath. If the last drawing operation does not end in the lower left corner then there will be a gap in the path. 
bool ps_restore ( resource $psdoc ) Restores a previously saved graphics context. Any call of ps_save() must be accompanied by a call to ps_restore(). All coordinate transformations, line style settings, color settings, etc. are being restored to the state before the call of ps_save(). 
bool ps_rotate ( resource $psdoc , float $rot ) Sets the rotation of the coordinate system. 
bool ps_save ( resource $psdoc ) Saves the current graphics context, containing colors, translation and rotation settings and some more. A saved context can be restored with ps_restore(). 
bool ps_scale ( resource $psdoc , float $x , float $y ) Sets horizontal and vertical scaling of the coordinate system. 
bool ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue ) Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the color of the rectangle's border line. 
bool ps_set_border_dash ( resource $psdoc , float $black , float $white ) Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the length of the black and white portion of a dashed border line. 
bool ps_set_border_style ( resource $psdoc , string $style , float $width ) Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the appearance and width of the border line. 
bool ps_set_info ( resource $p , string $key , string $val ) 
bool ps_set_parameter ( resource $psdoc , string $name , string $value ) Sets several parameters which are used by many functions. Parameters are by definition string values. 
bool ps_set_text_pos ( resource $psdoc , float $x , float $y ) 
bool ps_set_value ( resource $psdoc , string $name , float $value ) Sets several values which are used by many functions. Parameters are by definition float values. 
bool ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 ) Sets the color for drawing, filling, or both. 
bool ps_setdash ( resource $psdoc , float $on , float $off ) Sets the length of the black and white portions of a dashed line. 
bool ps_setflat ( resource $psdoc , float $value ) 
bool ps_setfont ( resource $psdoc , int $fontid , float $size ) Sets a font, which has to be loaded before with ps_findfont(). Outputting text without setting a font results in an error. 
bool ps_setgray ( resource $psdoc , float $gray ) Sets the gray value for all following drawing operations. 
bool ps_setlinecap ( resource $psdoc , int $type ) Sets how line ends look like. 
bool ps_setlinejoin ( resource $psdoc , int $type ) Sets how lines are joined. 
bool ps_setlinewidth ( resource $psdoc , float $width ) Sets the line width for all following drawing operations. 
bool ps_setmiterlimit ( resource $psdoc , float $value ) If two lines join in a small angle and the line join is set to PS_LINEJOIN_MITER, then the resulting spike will be very long. The miter limit is the maximum ratio of the miter length (the length of the spike) and the line width. 
bool ps_setoverprintmode ( resource $psdoc , int $mode ) 
bool ps_setpolydash ( resource $psdoc , float $arr ) Sets the length of the black and white portions of a dashed line. ps_setpolydash() is used to set more complicated dash patterns. 
int ps_shading_pattern ( resource $psdoc , int $shadingid , string $optlist ) Creates a pattern based on a shading, which has to be created before with ps_shading(). Shading patterns can be used like regular patterns. 
int ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist ) 
bool ps_shfill ( resource $psdoc , int $shadingid ) Fills an area with a shading, which has to be created before with ps_shading(). This is an alternative way to creating a pattern from a shading ps_shading_pattern() and using the pattern as the filling color. 
int ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode [, string $feature ] ) 
bool ps_show_xy2 ( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor ) 
bool ps_show_xy ( resource $psdoc , string $text , float $x , float $y ) Output a text at the given text position. 
bool ps_show2 ( resource $psdoc , string $text , int $len ) Output text at the current position. Do not print more than len characters. 
bool ps_show ( resource $psdoc , string $text ) 
array ps_string_geometry ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] ) This function is similar to ps_stringwidth() but returns an array of dimensions containing the width, ascender, and descender of the text. 
float ps_stringwidth ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] ) Calculates the width of a string in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width. If kerning is turned on, it will be taken into account. 
bool ps_stroke ( resource $psdoc ) Draws the path constructed with previously called drawing functions like ps_lineto(). 
string ps_symbol_name ( resource $psdoc , int $ord [, int $fontid = 0 ] ) This function needs an Adobe font metrics file to know which glyphs are available. 
float ps_symbol_width ( resource $psdoc , int $ord [, int $fontid = 0 [, float $size = 0.0 ]] ) Calculates the width of a glyph in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width. 
bool ps_symbol ( resource $psdoc , int $ord ) Output the glyph at position ord in the font encoding vector of the current font. The font encoding for a font can be set when loading the font with ps_findfont(). 
bool ps_translate ( resource $psdoc , float $x , float $y ) Sets a new initial point of the coordinate system. 
bool SAMConnection::commit ( void ) Calling the "commit" method on a Connection object commits (completes) all in-flight transactions that are part of the current unit of work. 
bool SAMConnection::connect ( string $protocol [, array $properties ] ) Calling the "connect" method on a SAMConnection object connects the PHP script to a messaging server. No messages can be sent or received until a connection is made. 
SAMConnection::__construct ( void ) Creates a new SAMConnection object. 
bool SAMConnection::disconnect ( void ) Calling the "disconnect" method on a SAMConnection object disconnects the PHP script from a messaging server. No messages can be sent or received after a connection has been disconnected. 
int $SAMConnection->errno; Contains the numeric error code of the last executed SAM operation on this connection. If the last operation completed successfully this property contains 0. 
string $SAMConnection->error; Contains the text description of the last failed SAM operation on this connection. If the last operation completed successfully this property contains an empty string. 
bool SAMConnection::isConnected ( void ) Calling the "isConnected" method on a Connection object will check whether the PHP script is connected to a messaging server. No messages can be sent or received unless a connection has been established with a Messaging server. 
SAMMessage SAMConnection::peek ( string $target [, array $properties ] ) 
array SAMConnection::peekAll ( string $target [, array $properties ] ) 
SAMMessage SAMConnection::receive ( string $target [, array $properties ] ) 
SAMMessage SAMConnection::remove ( string $target [, array $properties ] ) Removes a message from a queue. 
bool SAMConnection::rollback ( void ) Rolls back an in-flight unit of work. 
string SAMConnection::send ( string $target , SAMMessage $msg [, array $properties ] ) The "send" method is used to send a message to a specific queue or to publish to a specific topic. The method returns a correlation id that can be used as a selector to identify reply or response messages when these are requested. 
The "setdebug" method is used to turn on or off additional debugging output. The SAM framework will provide method/function entry and exit trace data plus additional information. Protocol specific implementations also provide extra output.  void SAMConnection::setDebug ( bool $switch )
string SAMConnection::subscribe ( string $targetTopic ) The "subscribe" method is used to create a new subscription to a specified topic. 
bool SAMConnection::unsubscribe ( string $subscriptionId [, string $targetTopic ] ) The "unsubscribe" method is used to delete an existing subscription to a specified topic. 
string $SAMMessage->body; The "body" property contains the actual body of the message. It may not always be set. 
SAMMessage::__construct ([ mixed $body ] ) Creates a new SAMMessage object optionally specifying a message body. 
object $SAMMessage->header; 
SDO_DataObject SCA::createDataObject ( string $type_namespace_uri , string $type_name ) 
mixed SCA::getService ( string $target [, string $binding [, array $config ]] ) 
SDO_DataObject SCA_LocalProxy::createDataObject ( string $type_namespace_uri , string $type_name ) 
SDO_DataObject SCA_SoapProxy::createDataObject ( string $type_namespace_uri , string $type_name ) 
void SDO_DAS_ChangeSummary::beginLogging ( void ) 
void SDO_DAS_ChangeSummary::endLogging ( void ) 
int SDO_DAS_ChangeSummary::getChangeType ( SDO_DataObject $dataObject ) 
SDO_List SDO_DAS_ChangeSummary::getChangedDataObjects ( void ) 
SDO_DataObject SDO_DAS_ChangeSummary::getOldContainer ( SDO_DataObject $data_object ) 
SDO_List SDO_DAS_ChangeSummary::getOldValues ( SDO_DataObject $data_object ) 
bool SDO_DAS_ChangeSummary::isLogging ( void ) 
void SDO_DAS_DataFactory::addPropertyToType ( string $parent_type_namespace_uri , string $parent_type_name , string $property_name , string $type_namespace_uri , string $type_name [, array $options ] ) 
void SDO_DAS_DataFactory::addType ( string $type_namespace_uri , string $type_name [, array $options ] ) 
SDO_DAS_DataFactory SDO_DAS_DataFactory::getDataFactory ( void ) 
SDO_DAS_ChangeSummary SDO_DAS_DataObject::getChangeSummary ( void ) 
int SDO_DAS_Setting::getListIndex ( void ) 
int SDO_DAS_Setting::getPropertyIndex ( void ) 
string SDO_DAS_Setting::getPropertyName ( void ) 
mixed SDO_DAS_Setting::getValue ( void ) 
bool SDO_DAS_Setting::isSet ( void ) 
void SDO_DataFactory::create ( string $type_namespace_uri , string $type_name ) 
void SDO_DataObject::clear ( void ) 
SDO_DataObject SDO_DataObject::createDataObject ( mixed $identifier ) 
SDO_DataObject SDO_DataObject::getContainer ( void ) 
SDO_Sequence SDO_DataObject::getSequence ( void ) 
string SDO_DataObject::getTypeName ( void ) 
string SDO_DataObject::getTypeNamespaceURI ( void ) 
mixed SDO_Exception::getCause ( void ) 
void SDO_List::insert ( mixed $value [, int $index ] ) 
SDO_Model_Type SDO_Model_Property::getContainingType ( void ) 
mixed SDO_Model_Property::getDefault ( void ) 
string SDO_Model_Property::getName ( void ) 
SDO_Model_Type SDO_Model_Property::getType ( void ) 
bool SDO_Model_Property::isContainment ( void ) 
bool SDO_Model_Property::isMany ( void ) 
SDO_Model_ReflectionDataObject::__construct ( SDO_DataObject $data_object ) 
mixed SDO_Model_ReflectionDataObject::export ( SDO_Model_ReflectionDataObject $rdo [, bool $return ] ) 
SDO_Model_Property SDO_Model_ReflectionDataObject::getContainmentProperty ( void ) 
array SDO_Model_ReflectionDataObject::getInstanceProperties ( void ) 
SDO_Model_Type SDO_Model_ReflectionDataObject::getType ( void ) 
SDO_Model_Type SDO_Model_Type::getBaseType ( void ) 
string SDO_Model_Type::getName ( void ) 
string SDO_Model_Type::getNamespaceURI ( void ) 
array SDO_Model_Type::getProperties ( void ) 
SDO_Model_Property SDO_Model_Type::getProperty ( mixed $identifier ) 
bool SDO_Model_Type::isAbstractType ( void ) 
bool SDO_Model_Type::isDataType ( void ) 
bool SDO_Model_Type::isInstance ( SDO_DataObject $data_object ) 
bool SDO_Model_Type::isOpenType ( void ) 
bool SDO_Model_Type::isSequencedType ( void ) 
SDO_Model_Property SDO_Sequence::getProperty ( int $sequence_index ) 
void SDO_Sequence::insert ( mixed $value [, int $sequenceIndex [, mixed $propertyIdentifier ]] ) 
void SDO_Sequence::move ( int $toIndex, int $fromIndex ) 
void SDO_DAS_XML::addTypes ( string $xsd_file ) Load a second or subsequent schema file to an XML DAS that has already been created with the static method create(). Although the file may be any valid schema file, a likely reason for using this method is to add a schema file containing definitions of extra complex types, hence the name. See Example 4 of the parent document for an example. 
SDO_DAS_XML SDO_DAS_XML::create ([ mixed $xsd_file [, string $key ]] ) This is the only static method of SDO_DAS_XML class. Used to instantiate SDO_DAS_XML object. 
SDO_DataObject SDO_DAS_XML::createDataObject ( string $namespace_uri , string $type_name ) Creates SDO_DataObject for a given namespace URI and type name. The type should be defined in the underlying model otherwise SDO_TypeNotFoundException will be thrown. 
SDO_DAS_XML_Document SDO_DAS_XML::createDocument ([ string $document_element_name ] ) 
SDO_XMLDocument SDO_DAS_XML::loadFile ( string $xml_file ) Constructs the tree of SDO_DataObjects from the given address to xml instance document. Returns SDO_DAS_XML_Document Object. Use SDO_DAS_XML_Document::getRootDataObject method to get root data object. 
SDO_DAS_XML_Document SDO_DAS_XML::loadString ( string $xml_string ) Constructs the tree of SDO_DataObjects from the given xml instance string. Returns SDO_DAS_XML_Document Object. Use SDO_DAS_XML_Document::getRootDataObject method to get root data object. 
void SDO_DAS_XML::saveFile ( SDO_XMLDocument $xdoc , string $xml_file [, int $indent ] ) Saves the SDO_DAS_XML_Document object to a file. 
string SDO_DAS_XML::saveString ( SDO_XMLDocument $xdoc [, int $indent ] ) Saves the SDO_DAS_XML_Document object to string. 
SDO_DataObject SDO_DAS_XML_Document::getRootDataObject ( void ) Returns the root SDO_DataObject. 
string SDO_DAS_XML_Document::getRootElementName ( void ) Returns root element's name. 
string SDO_DAS_XML_Document::getRootElementURI ( void ) Returns root element's URI string. 
void SDO_DAS_XML_Document::setEncoding ( string $encoding ) Sets the given string as encoding. 
void SDO_DAS_XML_Document::setXMLDeclaration ( bool $xmlDeclatation ) Controls whether an XML declaration will be generated at the start of the XML document. Set to TRUE to generate the XML declaration, or FALSE to suppress it. 
void SDO_DAS_XML_Document::setXMLVersion ( string $xmlVersion ) Sets the given string as xml version. 
void SDO_DAS_Relational::applyChanges ( PDO $database_handle , SDODataObject $root_data_object ) 
SDO_DAS_Relational::__construct ( array $database_metadata [, string $application_root_type [, array $SDO_containment_references_metadata ]] ) 
SDODataObject SDO_DAS_Relational::createRootDataObject ( void ) 
SDODataObject SDO_DAS_Relational::executePreparedQuery ( PDO $database_handle , PDOStatement $prepared_statement , array $value_list [, array $column_specifier ] ) 
SDODataObject SDO_DAS_Relational::executeQuery ( PDO $database_handle , string $SQL_statement [, array $column_specifier ] ) 
string seaslog_get_author ( void ) 
string seaslog_get_version ( void ) 
bool session_pgsql_add_error ( int $error_level [, string $error_message ] ) 
array session_pgsql_get_error ([ bool $with_error_message = FALSE ] ) Get the number of errors and optional the error messages. 
string session_pgsql_get_field ( void ) 
bool session_pgsql_reset ( void ) Reset the connection to the session database servers. 
bool session_pgsql_set_field ( string $value ) 
array session_pgsql_status ( void ) 
string solr_get_version ( void ) This function returns the current version of the extension as a string. 
array sqlite_array_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] ) 
void sqlite_busy_timeout ( resource $dbhandle , int $milliseconds ) 
int sqlite_changes ( resource $dbhandle ) 
void sqlite_close ( resource $dbhandle ) Closes the given db_handle database handle. If the database was persistent, it will be closed and removed from the persistent list. 
mixed sqlite_column ( resource $result , mixed $index_or_name [, bool $decode_binary = TRUE ] ) 
void sqlite_create_aggregate ( resource $dbhandle , string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ] ) 
void sqlite_create_function ( resource $dbhandle , string $function_name , callable $callback [, int $num_args = -1 ] ) 
array sqlite_current ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] ) 
string sqlite_error_string ( int $error_code ) Returns a human readable description of the error_code returned from sqlite_last_error(). 
string sqlite_escape_string ( string $item ) 
bool sqlite_exec ( resource $dbhandle , string $query [, string &$error_msg ] ) 
SQLiteDatabase sqlite_factory ( string $filename [, int $mode = 0666 [, string &$error_message ]] ) sqlite_factory() behaves similarly to sqlite_open() in that it opens an SQLite database or attempts to create it if it does not exist. However, a SQLiteDatabase object is returned rather than a resource. Please see the sqlite_open() reference page for further usage and caveats. 
array sqlite_fetch_all ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] ) 
array sqlite_fetch_array ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] ) 
array sqlite_fetch_column_types ( string $table_name , resource $dbhandle [, int $result_type = SQLITE_ASSOC ] ) 
object sqlite_fetch_object ( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = TRUE ]]] ) 
string sqlite_fetch_single ( resource $result [, bool $decode_binary = TRUE ] ) 
sqlite_fetch_string(->) This function is an alias of: sqlite_fetch_single().  
string sqlite_field_name ( resource $result , int $field_index ) 
bool sqlite_has_more ( resource $result ) Finds whether more rows are available from the given result set. 
bool sqlite_has_prev ( resource $result ) 
Object oriented style (method): 
int sqlite_last_error ( resource $dbhandle ) 
int sqlite_last_insert_rowid ( resource $dbhandle ) 
string sqlite_libencoding ( void ) 
string sqlite_libversion ( void ) Returns the version of the linked SQLite library. 
bool sqlite_next ( resource $result ) 
int sqlite_num_fields ( resource $result ) 
int sqlite_num_rows ( resource $result ) 
resource sqlite_open ( string $filename [, int $mode = 0666 [, string &$error_message ]] ) 
resource sqlite_popen ( string $filename [, int $mode = 0666 [, string &$error_message ]] ) 
bool sqlite_prev ( resource $result ) 
resource sqlite_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] ) 
bool sqlite_rewind ( resource $result ) 
bool sqlite_seek ( resource $result , int $rownum ) 
array sqlite_single_query ( resource $db , string $query [, bool $first_row_only [, bool $decode_binary ]] ) 
string sqlite_udf_decode_binary ( string $data ) 
string sqlite_udf_encode_binary ( string $data ) 
resource sqlite_unbuffered_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] ) 
bool sqlite_valid ( resource $result ) 
bool sqlsrv_begin_transaction ( resource $conn ) The transaction begun by sqlsrv_begin_transaction() includes all statements that were executed after the call to sqlsrv_begin_transaction() and before calls to sqlsrv_rollback() or sqlsrv_commit(). Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see » SQLSRV Transactions. 
bool sqlsrv_cancel ( resource $stmt ) Cancels a statement. Any results associated with the statement that have not been consumed are deleted. After sqlsrv_cancel() has been called, the specified statement can be re-executed if it was created with sqlsrv_prepare(). Calling sqlsrv_cancel() is not necessary if all the results associated with the statement have been consumed. 
array sqlsrv_client_info ( resource $conn ) Returns information about the client and specified connection 
bool sqlsrv_close ( resource $conn ) Closes an open connection and releases resourses associated with the connection. 
bool sqlsrv_commit ( resource $conn ) Commits a transaction that was begun with sqlsrv_begin_transaction(). The connection is returned to auto-commit mode after sqlsrv_commit() is called. The transaction that is committed includes all statements that were executed after the call to sqlsrv_begin_transaction(). Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see » SQLSRV Transactions. 
bool sqlsrv_configure ( string $setting , mixed $value ) Changes the driver error handling and logging configurations. 
resource sqlsrv_connect ( string $serverName [, array $connectionInfo ] ) Opens a connection to a Microsoft SQL Server database. By default, the connection is attempted using Windows Authentication. To connect using SQL Server Authentication, include "UID" and "PWD" in the connection options array. 
mixed sqlsrv_errors ([ int $errorsOrWarnings ] ) Returns error and warning information about the last SQLSRV operation performed. 
bool sqlsrv_execute ( resource $stmt ) Executes a statement prepared with sqlsrv_prepare(). This function is ideal for executing a prepared statement multiple times with different parameter values. 
array sqlsrv_fetch_array ( resource $stmt [, int $fetchType [, int $row [, int $offset ]]] ) Returns the next available row of data as an associative array, a numeric array, or both (the default). 
mixed sqlsrv_fetch_object ( resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset ]]]] ) Retrieves the next row of data in a result set as an instance of the specified class with properties that match the row field names and values that correspond to the row field values. 
mixed sqlsrv_fetch ( resource $stmt [, int $row [, int $offset ]] ) Makes the next row in a result set available for reading. Use sqlsrv_get_field() to read the fields of the row. 
mixed sqlsrv_field_metadata ( resource $stmt ) Retrieves metadata for the fields of a statement prepared by sqlsrv_prepare() or sqlsrv_query(). sqlsrv_field_metadata() can be called on a statement before or after statement execution. 
bool sqlsrv_free_stmt ( resource $stmt ) Frees all resources for the specified statement. The statement cannot be used after sqlsrv_free_stmt() has been called on it. If sqlsrv_free_stmt() is called on an in-progress statement that alters server state, statement execution is terminated and the statement is rolled back. 
mixed sqlsrv_get_config ( string $setting ) Returns the value of the specified configuration setting. 
mixed sqlsrv_get_field ( resource $stmt , int $fieldIndex [, int $getAsType ] ) Gets field data from the currently selected row. Fields must be accessed in order. Field indices start at 0. 
bool sqlsrv_has_rows ( resource $stmt ) Indicates whether the specified statement has rows. 
mixed sqlsrv_next_result ( resource $stmt ) Makes the next result of the specified statement active. Results include result sets, row counts, and output parameters. 
mixed sqlsrv_num_fields ( resource $stmt ) Retrieves the number of fields (columns) on a statement. 
mixed sqlsrv_num_rows ( resource $stmt ) Retrieves the number of rows in a result set. This function requires that the statment resource be created with a static or keyset cursor. For more information, see sqlsrv_query(), sqlsrv_prepare(), or » Specifying a Cursor Type and Selecting Rows in the Microsoft SQLSRV documentation. 
mixed sqlsrv_prepare ( resource $conn , string $sql [, array $params [, array $options ]] ) Prepares a query for execution. This function is ideal for preparing a query that will be executed multiple times with different parameter values. 
mixed sqlsrv_query ( resource $conn , string $sql [, array $params [, array $options ]] ) Prepares and executes a query. 
bool sqlsrv_rollback ( resource $conn ) Rolls back a transaction that was begun with sqlsrv_begin_transaction() and returns the connection to auto-commit mode. 
int sqlsrv_rows_affected ( resource $stmt ) Returns the number of rows modified by the last INSERT, UPDATE, or DELETE query executed. For information about the number of rows returned by a SELECT query, see sqlsrv_num_rows(). 
bool sqlsrv_send_stream_data ( resource $stmt ) Send data from parameter streams to the server. Up to 8 KB of data is sent with each call. 
array sqlsrv_server_info ( resource $conn ) Returns information about the server. 
int ssdeep_fuzzy_compare ( string $signature1 , string $signature2 ) Calculates the match score between signature1 and signature2 using »  context-triggered piecewise hashing, and returns the match score. 
string ssdeep_fuzzy_hash_filename ( string $file_name ) ssdeep_fuzzy_hash_filename() calculates the hash of the file specified by file_name using » context-triggered piecewise hashing, and returns that hash. 
string ssdeep_fuzzy_hash ( string $to_hash ) ssdeep_fuzzy_hash() calculates the hash of to_hash using »  context-triggered piecewise hashing, and returns that hash. 
bool ssh2_auth_agent ( resource $session , string $username ) 
bool ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] ) Authenticate using a public hostkey read from a file. 
mixed ssh2_auth_none ( resource $session , string $username ) Attempt "none" authentication which usually will (and should) fail. As part of the failure, this function will return an array of accepted authentication methods. 
bool ssh2_auth_password ( resource $session , string $username , string $password ) Authenticate over SSH using a plain password. Since version 0.12 this function also supports keyboard_interactive method. 
bool ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] ) Authenticate using a public key read from a file. 
resource ssh2_connect ( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]] ) 
bool ssh2_disconnect ( resource $session ) Close a connection to a remote SSH server. 
resource ssh2_exec ( resource $session , string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] ) Execute a command at the remote end and allocate a channel for it. 
resource ssh2_fetch_stream ( resource $channel , int $streamid ) Fetches an alternate substream associated with an SSH2 channel stream. The SSH2 protocol currently defines only one substream, STDERR, which has a substream ID of SSH2_STREAM_STDERR (defined as 1). 
string ssh2_fingerprint ( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] ) Returns a server hostkey hash from an active session. 
array ssh2_methods_negotiated ( resource $session ) Returns list of negotiated methods. 
bool ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, bool $overwrite = FALSE [, array $attributes ]] ) Note: The public key subsystem is used for managing public keys on a server to which the client is already authenticated. To authenticate to a remote system using public key authentication, use the ssh2_auth_pubkey_file() function instead.
resource ssh2_publickey_init ( resource $session ) 
array ssh2_publickey_list ( resource $pkey ) List currently authorized publickeys. 
bool ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob ) Removes an authorized publickey. 
bool ssh2_scp_recv ( resource $session , string $remote_file , string $local_file ) Copy a file from the remote server to the local filesystem using the SCP protocol. 
bool ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode = 0644 ] ) Copy a file from the local filesystem to the remote server using the SCP protocol. 
bool ssh2_sftp_chmod ( resource $sftp , string $filename , int $mode ) Attempts to change the mode of the specified file to that given in mode. 
array ssh2_sftp_lstat ( resource $sftp , string $path ) 
bool ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode = 0777 [, bool $recursive = FALSE ]] ) 
string ssh2_sftp_readlink ( resource $sftp , string $link ) Returns the target of a symbolic link. 
string ssh2_sftp_realpath ( resource $sftp , string $filename ) Translates filename into the effective real path on the remote filesystem. 
bool ssh2_sftp_rename ( resource $sftp , string $from , string $to ) Renames a file on the remote filesystem. 
bool ssh2_sftp_rmdir ( resource $sftp , string $dirname ) 
array ssh2_sftp_stat ( resource $sftp , string $path ) 
bool ssh2_sftp_symlink ( resource $sftp , string $target , string $link ) Creates a symbolic link named link on the remote filesystem pointing to target. 
bool ssh2_sftp_unlink ( resource $sftp , string $filename ) Deletes a file on the remote filesystem. 
resource ssh2_sftp ( resource $session ) Request the SFTP subsystem from an already connected SSH2 server. 
resource ssh2_shell ( resource $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] ) Open a shell at the remote end and allocate a stream for it. 
resource ssh2_tunnel ( resource $session , string $host , int $port ) Open a socket stream to an arbitrary host/port by way of the currently connected SSH server. 
float stats_absolute_deviation ( array $a ) Returns the absolute deviation of the values in a. 
float stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_chisquare ( float $par1 , float $par2 , int $which ) 
float stats_cdf_exponential ( float $par1 , float $par2 , int $which ) 
float stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which ) 
float stats_cdf_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_normal ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_poisson ( float $par1 , float $par2 , int $which ) 
float stats_cdf_t ( float $par1 , float $par2 , int $which ) 
float stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which ) 
float stats_covariance ( array $a , array $b ) Returns the covariance of a and b. 
float stats_dens_beta ( float $x , float $a , float $b ) Returns the probability density at x, where the random variable follows the beta distribution of which the shape parameters are a and b. 
float stats_dens_cauchy ( float $x , float $ave , float $stdev ) Returns the probability density at x, where the random variable follows the Cauchy distribution whose location and scale are ave and stdev, respectively. 
float stats_dens_chisquare ( float $x , float $dfr ) Returns the probability density at x, where the random variable follows the chi-square distribution of which the degree of freedom is dfr. 
float stats_dens_exponential ( float $x , float $scale ) Returns the probability density at x, where the random variable follows the exponential distribution of which the scale is scale. 
float stats_dens_f ( float $x , float $dfr1 , float $dfr2 ) Returns the probability density at x, where the random variable follows the F distribution of which the degree of freedoms are dfr1 and dfr2. 
float stats_dens_gamma ( float $x , float $shape , float $scale ) Returns the probability density at x, where the random variable follows the gamma distribution of which the shape parameter is shape and the scale parameter is scale. 
float stats_dens_laplace ( float $x , float $ave , float $stdev ) Returns the probability density at x, where the random variable follows the Laplace distribution of which the location parameter is ave and the scale parameter is stdev. 
float stats_dens_logistic ( float $x , float $ave , float $stdev ) Returns the probability density at x, where the random variable follows the logistic distribution of which the location parameter is ave and the scale parameter is stdev. 
float stats_dens_normal ( float $x , float $ave , float $stdev ) Returns the probability density at x, where the random variable follows the normal distribution of which the mean is ave and the standard deviation is stdev. 
float stats_dens_pmf_binomial ( float $x , float $n , float $pi ) Returns the probability mass at x, where the random variable follows the binomial distribution of which the number of trials is n and the success rate is pi. 
float stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 ) Returns the probability mass at n1, where the random variable follows the hypergeometric distribution of which the number of failure is n2, the number of success samples is N1, and the number of failure samples is N2. 
float stats_dens_pmf_negative_binomial ( float $x , float $n , float $pi ) Returns the probability density at x, where the random variable follows the negative binomial distribution of which the number of the success is n and the success rate is pi. 
float stats_dens_pmf_poisson ( float $x , float $lb ) Returns the probability mass at x, where the random variable follows the Poisson distribution whose parameter is lb. 
float stats_dens_t ( float $x , float $dfr ) Returns the probability density at x, where the random variable follows the t-distribution of which the degree of freedom is dfr. 
float stats_dens_uniform ( float $x , float $a , float $b ) Returns the probability density at x, where the random variable follows the uniform distribution of which the lower bound is a and the upper bound is b. 
float stats_dens_weibull ( float $x , float $a , float $b ) Returns the probability density at x, where the random variable follows the Weibull distribution of which the shape parameter is a and the scale parameter is b. 
number stats_harmonic_mean ( array $a ) Returns the harmonic mean of the values in a. 
float stats_kurtosis ( array $a ) Returns the kurtosis of the values in a. 
float stats_rand_gen_beta ( float $a , float $b ) Returns a random deviate from the beta distribution with parameters A and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0 < x <. Method R. C. H. Cheng. 
float stats_rand_gen_chisquare ( float $df ) Returns a random deviate from the chi-square distribution where the degrees of freedom is df. 
float stats_rand_gen_exponential ( float $av ) Returns a random deviate from the exponential distribution of which the scale is av. 
float stats_rand_gen_f ( float $dfn , float $dfd ) Generates a random deviate from the F (variance ratio) distribution with "dfn" degrees of freedom in the numerator and "dfd" degrees of freedom in the denominator. Method : directly generates ratio of chisquare variates. 
float stats_rand_gen_funiform ( float $low , float $high ) Returns a random deviate from the uniform distribution from low to high. 
float stats_rand_gen_gamma ( float $a , float $r ) Generates a random deviate from the gamma distribution whose density is (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X). 
int stats_rand_gen_ibinomial_negative ( int $n , float $p ) Returns a random deviate from a negative binomial distribution where the number of success is n and the success rate is p. 
int stats_rand_gen_ibinomial ( int $n , float $pp ) Returns a random deviate from the binomial distribution whose number of trials is n and whose probability of an event in each trial is pp. 
int stats_rand_gen_int ( void ) Returns a random integer between 1 and 2147483562 
int stats_rand_gen_ipoisson ( float $mu ) Returns a random deviate from the Poisson distribution with parameter mu. 
int stats_rand_gen_iuniform ( int $low , int $high ) Returns a random integer from the discrete uniform distribution between low (inclusive) and high (inclusive). 
float stats_rand_gen_noncenral_chisquare ( float $df , float $xnonc ) Returns a random deviate from the non-central chi-square distribution with degrees of freedom, df, and non-centrality parameter, xnonc. 
float stats_rand_gen_noncentral_chisquare ( float $df , float $xnonc ) Returns a random deviate from the non-central chi-square distribution with degrees of freedom, df, and non-centrality parameter, xnonc. 
float stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc ) Returns a random deviate from the non-central F distribution where the degrees of freedoms are dfn (numerator) and dfd (denominator), and the non-centrality parameter is xnonc. 
float stats_rand_gen_noncentral_t ( float $df , float $xnonc ) Returns a random deviate from the non-central t-distribution with the degrees of freedom, df, and the non-centrality parameter, xnonc. 
float stats_rand_gen_normal ( float $av , float $sd ) Returns a random deviate from the normal distribution with mean, av, and standard deviation, sd. 
float stats_rand_gen_t ( float $df ) Returns a random deviate from the t-distribution with the degrees of freedom, df. 
array stats_rand_get_seeds ( void ) Returns the current seed values of the random number generator 
array stats_rand_phrase_to_seeds ( string $phrase ) Generate two seeds for the random number generator from a phrase. 
float stats_rand_ranf ( void ) Returns a random floating point number from a uniform distribution between 0 (exclusive) and 1 (exclusive). 
void stats_rand_setall ( int $iseed1 , int $iseed2 ) Set iseed1 and iseed2 as seed values to the random generator used in statistic functions. 
float stats_skew ( array $a ) Returns the skewness of the values in a. 
float stats_standard_deviation ( array $a [, bool $sample = FALSE ] ) Returns the standard deviation of the values in a. 
float stats_stat_binomial_coef ( int $x , int $n ) Returns the binomial coefficient of n choose x. 
float stats_stat_correlation ( array $arr1 , array $arr2 ) Returns the Pearson correlation coefficient between arr1 and arr2. 
float stats_stat_factorial ( int $n ) Returns the factorial of an integer, n. 
float stats_stat_independent_t ( array $arr1 , array $arr2 ) 
float stats_stat_innerproduct ( array $arr1 , array $arr2 ) Returns the inner product of arr1 and arr2. 
float stats_stat_paired_t ( array $arr1 , array $arr2 ) Returns the t-value of the dependent t-test for paired samples arr1 and arr2. 
float stats_stat_percentile ( array $arr , float $perc ) Returns the perc-th percentile value of the array arr. 
float stats_stat_powersum ( array $arr , float $power ) Returns the sum of the power-th power of a vector represented as an array arr. 
float stats_variance ( array $a [, bool $sample = FALSE ] ) Returns the variance of the values in a. 
string stomp_connect_error ( void ) Returns a string description of the last connect error. 
string stomp_version ( void ) Returns a string containing the version of the current stomp extension. 
bool svn_add ( string $path [, bool $recursive = TRUE [, bool $force = FALSE ]] ) Adds the file, directory or symbolic link at path to the working directory. The item will be added to the repository the next time you call svn_commit() on the working copy. 
string svn_auth_get_parameter ( string $key ) Retrieves authentication parameter at key. For a list of valid keys and their meanings, consult the authentication constants list. 
void svn_auth_set_parameter ( string $key , string $value ) Sets authentication parameter at key to value. For a list of valid keys and their meanings, consult the authentication constants list. 
array svn_blame ( string $repository_url [, int $revision_no = SVN_REVISION_HEAD ] ) Get the SVN blame of a file from a repository URL. 
string svn_cat ( string $repos_url [, int $revision_no ] ) Returns the contents of the URL repos_url to a file in the repository, optionally at revision number revision_no. 
bool svn_checkout ( string $repos , string $targetpath [, int $revision [, int $flags = 0 ]] ) Checks out a working copy from the repository at repos to targetpath at revision revision. 
bool svn_cleanup ( string $workingdir ) Recursively cleanup working copy directory workingdir, finishing any incomplete operations and removing working copy locks. Use when a working copy is in limbo and needs to be usable again. 
string svn_client_version ( void ) Returns the version of the SVN client libraries 
array svn_commit ( string $log , array $targets [, bool $recursive = TRUE ] ) 
bool svn_delete ( string $path [, bool $force = FALSE ] ) Deletes the file, directory or symbolic link at path from the working directory. The item will be deleted from the repository the next time you call svn_commit() on the working copy. 
array svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 ) 
bool svn_export ( string $frompath , string $topath [, bool $working_copy = TRUE [, int $revision_no = -1 ]] ) Export the contents of either a working copy or repository into a 'clean' directory. 
bool svn_fs_abort_txn ( resource $txn ) 
resource svn_fs_apply_text ( resource $root , string $path ) 
resource svn_fs_begin_txn2 ( resource $repos , int $rev ) 
bool svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value ) 
int svn_fs_check_path ( resource $fsroot , string $path ) 
bool svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 ) 
bool svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path ) 
bool svn_fs_delete ( resource $root , string $path ) 
array svn_fs_dir_entries ( resource $fsroot , string $path ) 
resource svn_fs_file_contents ( resource $fsroot , string $path ) 
int svn_fs_file_length ( resource $fsroot , string $path ) 
bool svn_fs_is_dir ( resource $root , string $path ) 
bool svn_fs_is_file ( resource $root , string $path ) 
bool svn_fs_make_dir ( resource $root , string $path ) 
bool svn_fs_make_file ( resource $root , string $path ) 
int svn_fs_node_created_rev ( resource $fsroot , string $path ) 
string svn_fs_node_prop ( resource $fsroot , string $path , string $propname ) 
bool svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 ) 
string svn_fs_revision_prop ( resource $fs , int $revnum , string $propname ) 
resource svn_fs_revision_root ( resource $fs , int $revnum ) 
resource svn_fs_txn_root ( resource $txn ) 
int svn_fs_youngest_rev ( resource $fs ) 
bool svn_import ( string $path , string $url , bool $nonrecursive ) Commits unversioned path into repository at url. If path is a directory and nonrecursive is FALSE, the directory will be imported recursively. 
array svn_log ( string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ]]]] ) svn_log() returns the complete history of the item at the repository URL repos_url, or the history of a specific revision if start_revision is set. This function is equivalent to svn log --verbose -r $start_revision $repos_url. 
array svn_ls ( string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = FALSE [, bool $peg = FALSE ]]] ) 
bool svn_mkdir ( string $path [, string $log_message ] ) Creates a directory in a working copy or repository. 
resource svn_repos_create ( string $path [, array $config [, array $fsconfig ]] ) 
resource svn_repos_fs_begin_txn_for_commit ( resource $repos , int $rev , string $author , string $log_msg ) 
int svn_repos_fs_commit_txn ( resource $txn ) 
resource svn_repos_fs ( resource $repos ) 
bool svn_repos_hotcopy ( string $repospath , string $destpath , bool $cleanlogs ) 
resource svn_repos_open ( string $path ) 
bool svn_repos_recover ( string $path ) 
bool svn_revert ( string $path [, bool $recursive = FALSE ] ) Revert any local changes to the path in a working copy. 
array svn_status ( string $path [, int $flags = 0 ] ) Returns the status of working copy files and directories, giving modifications, additions, deletions and other changes to items in the working copy. 
int svn_update ( string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = TRUE ]] ) Update working copy at path to revision revno. If recurse is true, directories will be recursively updated. 
void Swish::__construct ( string $index_names ) 
array Swish::getMetaList ( string $index_name ) 
array Swish::getPropertyList ( string $index_name ) 
object Swish::prepare ([ string $query ] ) 
object Swish::query ( string $query ) 
array SwishResult::getMetaList ( void ) 
array SwishResult::stem ( string $word ) 
array SwishResults::getParsedWords ( string $index_name ) 
array SwishResults::getRemovedStopwords ( string $index_name ) 
object SwishResults::nextResult ( void ) 
int SwishResults::seekResult ( int $position ) 
object SwishSearch::execute ([ string $query ] ) 
void SwishSearch::resetLimit ( void ) 
void SwishSearch::setLimit ( string $property , string $low , string $high ) 
void SwishSearch::setPhraseDelimiter ( string $delimiter ) 
void SwishSearch::setSort ( string $sort ) 
void SwishSearch::setStructure ( int $structure ) 
bool is_tainted ( string $string ) Checks whether a string is tainted 
bool taint ( string &$string [, string $... ] ) Make a string tainted. This is used for testing purpose only. 
bool untaint ( string &$string [, string $... ] ) Untaint strings 
bool tcpwrap_check ( string $daemon , string $address [, string $user [, bool $nodns = FALSE ]] ) This function consults the /etc/hosts.allow and /etc/hosts.deny files to check if access to service daemon should be granted or denied for a client. 
array trader_acos ( array $real ) Calculates the arc cosine for each value in real and returns the resulting array. 
array trader_ad ( array $high , array $low , array $close , array $volume ) 
array trader_add ( array $real0 , array $real1 ) Calculates the vector addition of real0 to real1 and returns the resulting vector. 
array trader_adosc ( array $high , array $low , array $close , array $volume [, int $fastPeriod [, int $slowPeriod ]] ) 
array trader_adx ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_adxr ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_apo ( array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType ]]] ) 
array trader_aroon ( array $high , array $low [, int $timePeriod ] ) 
array trader_aroonosc ( array $high , array $low [, int $timePeriod ] ) 
array trader_asin ( array $real ) Calculates the arc sine for each value in real and returns the resulting array. 
array trader_atan ( array $real ) Calculates the arc tangent for each value in real and returns the resulting array. 
array trader_atr ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_avgprice ( array $open , array $high , array $low , array $close ) 
array trader_bbands ( array $real [, int $timePeriod [, float $nbDevUp [, float $nbDevDn [, int $mAType ]]]] ) 
array trader_beta ( array $real0 , array $real1 [, int $timePeriod ] ) 
array trader_bop ( array $open , array $high , array $low , array $close ) 
array trader_cci ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_cdl2crows ( array $open , array $high , array $low , array $close ) 
array trader_cdl3blackcrows ( array $open , array $high , array $low , array $close ) 
array trader_cdl3inside ( array $open , array $high , array $low , array $close ) 
array trader_cdl3linestrike ( array $open , array $high , array $low , array $close ) 
array trader_cdl3outside ( array $open , array $high , array $low , array $close ) 
array trader_cdl3starsinsouth ( array $open , array $high , array $low , array $close ) 
array trader_cdl3whitesoldiers ( array $open , array $high , array $low , array $close ) 
array trader_cdlabandonedbaby ( array $open , array $high , array $low , array $close [, float $penetration ] ) 
array trader_cdladvanceblock ( array $open , array $high , array $low , array $close ) 
array trader_cdlbelthold ( array $open , array $high , array $low , array $close ) 
array trader_cdlbreakaway ( array $open , array $high , array $low , array $close ) 
array trader_cdlclosingmarubozu ( array $open , array $high , array $low , array $close ) 
array trader_cdlconcealbabyswall ( array $open , array $high , array $low , array $close ) 
array trader_cdlcounterattack ( array $open , array $high , array $low , array $close ) 
array trader_cdldarkcloudcover ( array $open , array $high , array $low , array $close [, float $penetration ] ) 
array trader_cdldoji ( array $open , array $high , array $low , array $close ) 
array trader_cdldojistar ( array $open , array $high , array $low , array $close ) 
array trader_cdldragonflydoji ( array $open , array $high , array $low , array $close ) 
array trader_cdlengulfing ( array $open , array $high , array $low , array $close ) 
array trader_cdleveningdojistar ( array $open , array $high , array $low , array $close [, float $penetration ] ) 
array trader_cdleveningstar ( array $open , array $high , array $low , array $close [, float $penetration ] ) 
array trader_cdlgapsidesidewhite ( array $open , array $high , array $low , array $close ) 
array trader_cdlgravestonedoji ( array $open , array $high , array $low , array $close ) 
array trader_cdlhammer ( array $open , array $high , array $low , array $close ) 
array trader_cdlhangingman ( array $open , array $high , array $low , array $close ) 
array trader_cdlharami ( array $open , array $high , array $low , array $close ) 
array trader_cdlharamicross ( array $open , array $high , array $low , array $close ) 
array trader_cdlhighwave ( array $open , array $high , array $low , array $close ) 
array trader_cdlhikkake ( array $open , array $high , array $low , array $close ) 
array trader_cdlhikkakemod ( array $open , array $high , array $low , array $close ) 
array trader_cdlhomingpigeon ( array $open , array $high , array $low , array $close ) 
array trader_cdlidentical3crows ( array $open , array $high , array $low , array $close ) 
array trader_cdlinneck ( array $open , array $high , array $low , array $close ) 
array trader_cdlinvertedhammer ( array $open , array $high , array $low , array $close ) 
array trader_cdlkicking ( array $open , array $high , array $low , array $close ) 
array trader_cdlkickingbylength ( array $open , array $high , array $low , array $close ) 
array trader_cdlladderbottom ( array $open , array $high , array $low , array $close ) 
array trader_cdllongleggeddoji ( array $open , array $high , array $low , array $close ) 
array trader_cdllongline ( array $open , array $high , array $low , array $close ) 
array trader_cdlmarubozu ( array $open , array $high , array $low , array $close ) 
array trader_cdlmatchinglow ( array $open , array $high , array $low , array $close ) 
array trader_cdlmathold ( array $open , array $high , array $low , array $close [, float $penetration ] ) 
array trader_cdlmorningdojistar ( array $open , array $high , array $low , array $close [, float $penetration ] ) 
array trader_cdlmorningstar ( array $open , array $high , array $low , array $close [, float $penetration ] ) 
array trader_cdlonneck ( array $open , array $high , array $low , array $close ) 
array trader_cdlpiercing ( array $open , array $high , array $low , array $close ) 
array trader_cdlrickshawman ( array $open , array $high , array $low , array $close ) 
array trader_cdlrisefall3methods ( array $open , array $high , array $low , array $close ) 
array trader_cdlseparatinglines ( array $open , array $high , array $low , array $close ) 
array trader_cdlshootingstar ( array $open , array $high , array $low , array $close ) 
array trader_cdlshortline ( array $open , array $high , array $low , array $close ) 
array trader_cdlspinningtop ( array $open , array $high , array $low , array $close ) 
array trader_cdlstalledpattern ( array $open , array $high , array $low , array $close ) 
array trader_cdlsticksandwich ( array $open , array $high , array $low , array $close ) 
array trader_cdltakuri ( array $open , array $high , array $low , array $close ) 
array trader_cdltasukigap ( array $open , array $high , array $low , array $close ) 
array trader_cdlthrusting ( array $open , array $high , array $low , array $close ) 
array trader_cdltristar ( array $open , array $high , array $low , array $close ) 
array trader_cdlunique3river ( array $open , array $high , array $low , array $close ) 
array trader_cdlupsidegap2crows ( array $open , array $high , array $low , array $close ) 
array trader_cdlxsidegap3methods ( array $open , array $high , array $low , array $close ) 
array trader_ceil ( array $real ) Calculates the next highest integer for each value in real and returns the resulting array. 
array trader_cmo ( array $real [, int $timePeriod ] ) 
array trader_correl ( array $real0 , array $real1 [, int $timePeriod ] ) 
array trader_cos ( array $real ) Calculates the cosine for each value in real and returns the resulting array. 
array trader_cosh ( array $real ) Calculates the hyperbolic cosine for each value in real and returns the resulting array. 
array trader_dema ( array $real [, int $timePeriod ] ) 
array trader_div ( array $real0 , array $real1 ) Divides each value from real0 by the corresponding value from real1 and returns the resulting array. 
array trader_dx ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_ema ( array $real [, int $timePeriod ] ) 
int trader_errno ( void ) Get error code of the last operation. 
array trader_exp ( array $real ) Calculates e raised to the power of each value in real. Returns an array with the calculated data. 
array trader_floor ( array $real ) Calculates the next lowest integer for each value in real and returns the resulting array. 
int trader_get_compat ( void ) Get compatibility mode which affects the way calculations are done by all the extension functions. 
int trader_get_unstable_period ( int $functionId ) Get unstable period factor for a particular function. 
array trader_ht_dcperiod ( array $real ) 
array trader_ht_dcphase ( array $real ) 
array trader_ht_phasor ( array $real ) 
array trader_ht_sine ( array $real ) 
array trader_ht_trendline ( array $real ) 
array trader_ht_trendmode ( array $real ) 
array trader_kama ( array $real [, int $timePeriod ] ) 
array trader_linearreg_angle ( array $real [, int $timePeriod ] ) 
array trader_linearreg_intercept ( array $real [, int $timePeriod ] ) 
array trader_linearreg_slope ( array $real [, int $timePeriod ] ) 
array trader_linearreg ( array $real [, int $timePeriod ] ) 
array trader_ln ( array $real ) Calculates the natural logarithm for each value in real and returns the resulting array. 
array trader_log10 ( array $real ) Calculates the base-10 logarithm for each value in real and returns the resulting array. 
array trader_ma ( array $real [, int $timePeriod [, int $mAType ]] ) 
array trader_macd ( array $real [, int $fastPeriod [, int $slowPeriod [, int $signalPeriod ]]] ) 
array trader_macdext ( array $real [, int $fastPeriod [, int $fastMAType [, int $slowPeriod [, int $slowMAType [, int $signalPeriod [, int $signalMAType ]]]]]] ) 
array trader_macdfix ( array $real [, int $signalPeriod ] ) 
array trader_mama ( array $real [, float $fastLimit [, float $slowLimit ]] ) 
array trader_mavp ( array $real , array $periods [, int $minPeriod [, int $maxPeriod [, int $mAType ]]] ) 
array trader_max ( array $real [, int $timePeriod ] ) 
array trader_maxindex ( array $real [, int $timePeriod ] ) 
array trader_medprice ( array $high , array $low ) 
array trader_mfi ( array $high , array $low , array $close , array $volume [, int $timePeriod ] ) 
array trader_midpoint ( array $real [, int $timePeriod ] ) 
array trader_midprice ( array $high , array $low [, int $timePeriod ] ) 
array trader_min ( array $real [, int $timePeriod ] ) 
array trader_minindex ( array $real [, int $timePeriod ] ) 
array trader_minmax ( array $real [, int $timePeriod ] ) 
array trader_minmaxindex ( array $real [, int $timePeriod ] ) 
array trader_minus_di ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_minus_dm ( array $high , array $low [, int $timePeriod ] ) 
array trader_mom ( array $real [, int $timePeriod ] ) 
array trader_mult ( array $real0 , array $real1 ) Calculates the vector dot product of real0 with real1 and returns the resulting vector. 
array trader_natr ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_obv ( array $real , array $volume ) 
array trader_plus_di ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_plus_dm ( array $high , array $low [, int $timePeriod ] ) 
array trader_ppo ( array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType ]]] ) 
array trader_roc ( array $real [, int $timePeriod ] ) 
array trader_rocp ( array $real [, int $timePeriod ] ) 
array trader_rocr100 ( array $real [, int $timePeriod ] ) 
array trader_rocr ( array $real [, int $timePeriod ] ) 
array trader_rsi ( array $real [, int $timePeriod ] ) 
array trader_sar ( array $high , array $low [, float $acceleration [, float $maximum ]] ) 
array trader_sarext ( array $high , array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort ]]]]]]]] ) 
void trader_set_compat ( int $compatId ) Set compatibility mode which will affect the way calculations are done by all the extension functions. 
void trader_set_unstable_period ( int $functionId , int $timePeriod ) Influences unstable period factor for functions, which are sensible to it. More information about unstable periods can be found on the » TA-Lib API documentation page. 
array trader_sin ( array $real ) Calculates the sine for each value in real and returns the resulting array. 
array trader_sinh ( array $real ) Calculates the hyperbolic sine for each value in real and returns the resulting array. 
array trader_sma ( array $real [, int $timePeriod ] ) 
array trader_sqrt ( array $real ) Calculates the square root of each value in real and returns the resulting array. 
array trader_stddev ( array $real [, int $timePeriod [, float $nbDev ]] ) 
array trader_stoch ( array $high , array $low , array $close [, int $fastK_Period [, int $slowK_Period [, int $slowK_MAType [, int $slowD_Period [, int $slowD_MAType ]]]]] ) 
array trader_stochf ( array $high , array $low , array $close [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType ]]] ) 
array trader_stochrsi ( array $real [, int $timePeriod [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType ]]]] ) 
array trader_sub ( array $real0 , array $real1 ) Calculates the vector subtraction of real1 from real0 and returns the resulting vector. 
array trader_sum ( array $real [, int $timePeriod ] ) 
array trader_t3 ( array $real [, int $timePeriod [, float $vFactor ]] ) 
array trader_tan ( array $real ) Calculates the tangent for each value in real and returns the resulting array. 
array trader_tanh ( array $real ) Calculates the hyperbolic tangent for each value in real and returns the resulting array. 
array trader_tema ( array $real [, int $timePeriod ] ) 
array trader_trange ( array $high , array $low , array $close ) 
array trader_trima ( array $real [, int $timePeriod ] ) 
array trader_trix ( array $real [, int $timePeriod ] ) 
array trader_tsf ( array $real [, int $timePeriod ] ) 
array trader_typprice ( array $high , array $low , array $close ) 
array trader_ultosc ( array $high , array $low , array $close [, int $timePeriod1 [, int $timePeriod2 [, int $timePeriod3 ]]] ) 
array trader_var ( array $real [, int $timePeriod [, float $nbDev ]] ) 
array trader_wclprice ( array $high , array $low , array $close ) 
array trader_willr ( array $high , array $low , array $close [, int $timePeriod ] ) 
array trader_wma ( array $real [, int $timePeriod ] ) 
bool vpopmail_add_alias_domain_ex ( string $olddomain , string $newdomain ) 
bool vpopmail_add_alias_domain ( string $domain , string $aliasdomain ) 
bool vpopmail_add_domain_ex ( string $domain , string $passwd [, string $quota [, string $bounce [, bool $apop ]]] ) 
bool vpopmail_add_domain ( string $domain , string $dir , int $uid , int $gid ) 
bool vpopmail_add_user ( string $user , string $domain , string $password [, string $gecos [, bool $apop ]] ) 
bool vpopmail_alias_add ( string $user , string $domain , string $alias ) 
bool vpopmail_alias_del_domain ( string $domain ) 
bool vpopmail_alias_del ( string $user , string $domain ) 
array vpopmail_alias_get_all ( string $domain ) 
array vpopmail_alias_get ( string $alias , string $domain ) 
bool vpopmail_auth_user ( string $user , string $domain , string $password [, string $apop ] ) 
bool vpopmail_del_domain_ex ( string $domain ) 
bool vpopmail_del_domain ( string $domain ) 
bool vpopmail_del_user ( string $user , string $domain ) 
string vpopmail_error ( void ) 
bool vpopmail_passwd ( string $user , string $domain , string $password [, bool $apop ] ) 
bool vpopmail_set_user_quota ( string $user , string $domain , string $quota ) 
array win32_ps_list_procs ( void ) Retrieves statistics about all running processes. 
array win32_ps_stat_mem ( void ) Retrieves statistics about the global memory utilization. 
array win32_ps_stat_proc ([ int $pid = 0 ] ) Retrieves statistics about the process with the process id pid. 
int win32_continue_service ( string $servicename [, string $machine ] ) Resumes a paused, named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL. 
mixed win32_create_service ( array $details [, string $machine ] ) Attempts to add a service into the SCM database. Administrative privileges are required for this to succeed. 
mixed win32_delete_service ( string $servicename [, string $machine ] ) 
int win32_get_last_control_message ( void ) 
int win32_pause_service ( string $servicename [, string $machine ] ) Pauses a named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL. 
mixed win32_query_service_status ( string $servicename [, string $machine ] ) Queries the current status for a service, returning an array of information. 
bool win32_set_service_status ( int $status [, int $checkpoint = 0 ] ) 
mixed win32_start_service_ctrl_dispatcher ( string $name ) 
int win32_start_service ( string $servicename [, string $machine ] ) Attempts to start the named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL. 
int win32_stop_service ( string $servicename [, string $machine ] ) Stops a named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL. 
array wincache_fcache_fileinfo ([ bool $summaryonly = FALSE ] ) Retrieves information about file cache content and its usage. 
array wincache_fcache_meminfo ( void ) Retrieves information about memory usage by file cache. 
bool wincache_lock ( string $key [, bool $isglobal = FALSE ] ) 
array wincache_ocache_fileinfo ([ bool $summaryonly = FALSE ] ) 
array wincache_ocache_meminfo ( void ) Retrieves information about memory usage by opcode cache. 
bool wincache_refresh_if_changed ([ array $files = NULL ] ) Refreshes the cache entries for the files, whose names were passed in the input argument. If no argument is specified then refreshes all the entries in the cache. 
array wincache_rplist_fileinfo ([ bool $summaryonly = FALSE ] ) Retrieves information about cached mappings between relative file paths and corresponding absolute file paths. 
array wincache_rplist_meminfo ( void ) Retrieves information about memory usage by resolve file path cache. 
array wincache_scache_info ([ bool $summaryonly = FALSE ] ) Retrieves information about session cache content and its usage. 
array wincache_scache_meminfo ( void ) Retrieves information about memory usage by session cache. 
bool wincache_ucache_add ( string $key , mixed $value [, int $ttl = 0 ] ) 
bool wincache_ucache_cas ( string $key , int $old_value , int $new_value ) Compares the variable associated with the key with old_value and if it matches then assigns the new_value to it. 
bool wincache_ucache_clear ( void ) Clears/deletes all the values stored in the user cache. 
mixed wincache_ucache_dec ( string $key [, int $dec_by = 1 [, bool &$success ]] ) Decrements the value associated with the key by 1 or as specified by dec_by. 
bool wincache_ucache_delete ( mixed $key ) Deletes the elements in the user cache pointed by key. 
bool wincache_ucache_exists ( string $key ) Checks if a variable with the key exists in the user cache or not. 
mixed wincache_ucache_get ( mixed $key [, bool &$success ] ) Gets a variable stored in the user cache. 
mixed wincache_ucache_inc ( string $key [, int $inc_by = 1 [, bool &$success ]] ) Increments the value associated with the key by 1 or as specified by inc_by. 
array wincache_ucache_info ([ bool $summaryonly = FALSE [, string $key = NULL ]] ) Retrieves information about data stored in the user cache. 
array wincache_ucache_meminfo ( void ) Retrieves information about memory usage by user cache. 
bool wincache_ucache_set ( mixed $key , mixed $value [, int $ttl = 0 ] ) 
bool wincache_unlock ( string $key ) 
string xattr_get ( string $filename , string $name [, int $flags = 0 ] ) 
array xattr_list ( string $filename [, int $flags = 0 ] ) 
bool xattr_remove ( string $filename , string $name [, int $flags = 0 ] ) 
bool xattr_set ( string $filename , string $name , string $value [, int $flags = 0 ] ) 
bool xattr_supported ( string $filename [, int $flags = 0 ] ) This functions checks if the filesystem holding the given file supports extended attributes. Read access to the file is required. 
int xdiff_file_bdiff_size ( string $file ) Returns a size of a result file that would be created after applying binary patch from file file to the original file. 
bool xdiff_file_bdiff ( string $old_file , string $new_file , string $dest ) Makes a binary diff of two files and stores the result in a patch file. This function works with both text and binary files. Resulting patch file can be later applied using xdiff_file_bpatch()/xdiff_string_bpatch(). 
bool xdiff_file_bpatch ( string $file , string $patch , string $dest ) Patches a file with a binary patch and stores the result in a file dest. This function accepts patches created both via xdiff_file_bdiff() and xdiff_file_rabdiff() functions or their string counterparts. 
xdiff_file_diff_binary(->) bool xdiff_file_diff_binary ( string $old_file , string $new_file , string $dest ) 
bool xdiff_file_diff ( string $old_file , string $new_file , string $dest [, int $context = 3 [, bool $minimal = FALSE ]] ) Makes an unified diff containing differences between old_file and new_file and stores it in dest file. The resulting file is human-readable. An optional context parameter specifies how many lines of context should be added around each change. Setting minimal parameter to true will result in outputting the shortest patch file possible (can take a long time). 
mixed xdiff_file_merge3 ( string $old_file , string $new_file1 , string $new_file2 , string $dest ) Merges three files into one and stores the result in a file dest. The old_file is an original version while new_file1 and new_file2 are modified versions of an original. 
xdiff_file_patch_binary(->) bool xdiff_file_patch_binary ( string $file , string $patch , string $dest ) 
mixed xdiff_file_patch ( string $file , string $patch , string $dest [, int $flags = DIFF_PATCH_NORMAL ] ) Patches a file with a patch and stores the result in a file. patch has to be an unified diff created by xdiff_file_diff()/xdiff_string_diff() function. An optional flags parameter specifies mode of operation. 
bool xdiff_file_rabdiff ( string $old_file , string $new_file , string $dest ) 
int xdiff_string_bdiff_size ( string $patch ) Returns a size of a result file that would be created after applying binary patch to the original file. 
string xdiff_string_bdiff ( string $old_data , string $new_data ) Makes a binary diff of two strings and returns the result. This function works with both text and binary data. Resulting patch can be later applied using xdiff_string_bpatch()/xdiff_file_bpatch(). 
string xdiff_string_bpatch ( string $str , string $patch ) Patches a string str with a binary patch. This function accepts patches created both via xdiff_string_bdiff() and xdiff_string_rabdiff() functions or their file counterparts. 
xdiff_string_diff_binary(->) string xdiff_string_bdiff ( string $old_data , string $new_data ) 
string xdiff_string_diff ( string $old_data , string $new_data [, int $context = 3 [, bool $minimal = FALSE ]] ) Makes an unified diff containing differences between old_data string and new_data string and returns it. The resulting diff is human-readable. An optional context parameter specifies how many lines of context should be added around each change. Setting minimal parameter to true will result in outputting the shortest patch file possible (can take a long time). 
mixed xdiff_string_merge3 ( string $old_data , string $new_data1 , string $new_data2 [, string &$error ] ) Merges three strings into one and returns the result. The old_data is an original version of data while new_data1 and new_data2 are modified versions of an original. An optional error is used to pass any rejected parts during merging process. 
xdiff_string_patch_binary(->) string xdiff_string_patch_binary ( string $str , string $patch ) 
string xdiff_string_patch ( string $str , string $patch [, int $flags [, string &$error ]] ) Patches a str string with an unified patch in patch parameter and returns the result. patch has to be an unified diff created by xdiff_file_diff()/xdiff_string_diff() function. An optional flags parameter specifies mode of operation. Any rejected parts of the patch will be stored inside error variable if it is provided. 
string xdiff_string_bdiff ( string $old_data , string $new_data ) 
array xhprof_disable ( void ) Stops the profiler, and returns xhprof data from the run. 
void xhprof_enable ([ int $flags = 0 [, array $options ]] ) Start xhprof profiling. 
array xhprof_sample_disable ( void ) Stops the sample mode xhprof profiler, and 
void xhprof_sample_enable ( void ) Starts profiling in sample mode, which is a lighter weight version of xhprof_enable(). The sampling interval is 0.1 seconds, and samples record the full function call stack. The main use case is when lower overhead is required when doing performance monitoring and diagnostics. 
bool yaml_emit_file ( string $filename , mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL ]]] ) Generate a YAML representation of the provided data in the filename. 
string yaml_emit ( mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL ]]] ) Generate a YAML representation of the provided data. 
mixed yaml_parse_file ( string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] ) Convert all or part of a YAML document stream read from a file to a PHP variable. 
mixed yaml_parse_url ( string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] ) Convert all or part of a YAML document stream read from a URL to a PHP variable. 
mixed yaml_parse ( string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] ) Convert all or part of a YAML document stream to a PHP variable. 
string yaz_addinfo ( resource $id ) 
void yaz_ccl_conf ( resource $id , array $config ) 
bool yaz_ccl_parse ( resource $id , string $query , array &$result ) 
bool yaz_close ( resource $id ) 
mixed yaz_connect ( string $zurl [, mixed $options ] ) 
bool yaz_database ( resource $id , string $databases ) This function allows you to change databases within a session by specifying one or more databases to be used in search, retrieval, etc. - overriding databases specified in call to yaz_connect(). 
bool yaz_element ( resource $id , string $elementset ) 
int yaz_errno ( resource $id ) 
string yaz_error ( resource $id ) yaz_error() returns an English text message corresponding to the last error number as returned by yaz_errno(). 
array yaz_es_result ( resource $id ) This function inspects the last returned Extended Service result from a server. An Extended Service is initiated by either yaz_item_order() or yaz_es(). 
void yaz_es ( resource $id , string $type , array $args ) 
string yaz_get_option ( resource $id , string $name ) Returns the value of the option specified with name. 
int yaz_hits ( resource $id [, array &$searchresult ] ) yaz_hits() returns the number of hits for the last search. 
void yaz_itemorder ( resource $id , array $args ) This function prepares for an Extended Services request using the Profile for the Use of Z39.50 Item Order Extended Service to Transport ILL (Profile/1). See » this and the » specification. 
bool yaz_present ( resource $id ) 
void yaz_range ( resource $id , int $start , int $number ) 
string yaz_record ( resource $id , int $pos , string $type ) The yaz_record() function inspects a record in the current result set at the position specified by parameter pos. 
array yaz_scan_result ( resource $id [, array &$result ] ) yaz_scan_result() returns terms and associated information as received from the server in the last performed yaz_scan(). 
void yaz_scan ( resource $id , string $type , string $startterm [, array $flags ] ) 
void yaz_schema ( resource $id , string $schema ) 
bool yaz_search ( resource $id , string $type , string $query ) 
void yaz_set_option ( resource $id , string $name , string $value ) 
void yaz_sort ( resource $id , string $criteria ) 
void yaz_syntax ( resource $id , string $syntax ) 
mixed yaz_wait ([ array &$options ] ) 
