/// keep panes responsive in lua loops
diff -Nurw scite_o/src/LuaExtension.cxx scite/src/LuaExtension.cxx
--- scite_o/src/LuaExtension.cxx	2019-03-18 17:05:11.920837700 +0100
+++ scite/src/LuaExtension.cxx	2020-03-07 14:34:19.145532400 +0100
@@ -31,6 +31,8 @@
 #include "lauxlib.h"
 }
 
+#include <Windows.h> 
+
 #if (LUA_VERSION_NUM < 502)
 #define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
 #else
@@ -211,6 +211,17 @@
 	return NULL;
 }

+static bool DoEvents() {
+	// Keep Scite's windows responsive while calling extension Api in longer lua loops.
+	MSG msg; 
+		if (::PeekMessage(&msg, NULL, 0, 0, PM_NOREMOVE|PM_QS_PAINT|PM_QS_POSTMESSAGE)) 
+		{ 
+			  ::TranslateMessage(&msg); 
+			  ::DispatchMessage(&msg); 
+		}
+	return true;
+}
+
 static int cf_scite_send(lua_State *L) {
 	// This is reinstated as a replacement for the old <pane>:send, which was removed
 	// due to safety concerns.  Is now exposed as scite.SendEditor / scite.SendOutput.
@@ -286,6 +297,7 @@
 	if (cmdID) {
 		host->DoMenuCommand(cmdID);
 	}
+	DoEvents();
 	return 0;
 }
 
@@ -392,6 +404,7 @@
 	int pos = luaL_checkinteger(L, 2);
 	const char *s = luaL_checkstring(L, 3);
 	host->Insert(p, pos, s);
+	DoEvents();
 	return 0;
 }
 
@@ -400,6 +413,7 @@
 	int cpMin = static_cast<int>(luaL_checknumber(L, 2));
 	int cpMax = static_cast<int>(luaL_checknumber(L, 3));
 	host->Remove(p, cpMin, cpMax);
+	DoEvents();
 	return 0;
 }
 
@@ -407,6 +421,7 @@
 	ExtensionAPI::Pane p = check_pane_object(L, 1);
 	const char *s = luaL_checkstring(L, 2);
 	host->Insert(p, static_cast<int>(host->Send(p, SCI_GETLENGTH, 0, 0)), s);
+	DoEvents();
 	return 0;
 }
 
@@ -733,6 +748,7 @@
 	}
 
 	host->Trace("\n");
+	DoEvents();
 	return 0;
 }
 
@@ -742,6 +758,7 @@
 	if (s) {
 		host->Trace(s);
 	}
+	DoEvents();
 	return 0;
 }
 
