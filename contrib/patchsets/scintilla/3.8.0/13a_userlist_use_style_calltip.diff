Binary files scintilla/bin/libscintilla.a and scintilla_mod/bin/libscintilla.a differ
diff -Nurw scintilla/gtk/PlatGTK.cxx scintilla_mod/gtk/PlatGTK.cxx
--- scintilla/gtk/PlatGTK.cxx	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/gtk/PlatGTK.cxx	2019-01-13 19:01:50.762847100 +0100
@@ -1167,6 +1167,9 @@
 	int desiredVisibleRows;
 	unsigned int maxItemCharacters;
 	unsigned int aveCharWidth;
+	long colourBG;
+	long colourFG;
+	bool useThickFrame;
 #if GTK_CHECK_VERSION(3,0,0)
 	GtkCssProvider *cssProvider;
 #endif
@@ -1174,9 +1177,7 @@
 	IListBoxDelegate *delegate;
 
 	ListBoxX() : widCached(0), frame(0), list(0), scroller(0), pixhash(NULL), pixbuf_renderer(0),
-		renderer(0),
-		desiredVisibleRows(5), maxItemCharacters(0),
-		aveCharWidth(1),
+		renderer(0), desiredVisibleRows(5), maxItemCharacters(0), aveCharWidth(1), 
 #if GTK_CHECK_VERSION(3,0,0)
 		cssProvider(NULL),
 #endif
@@ -1198,8 +1199,9 @@
 		}
 #endif
 	}
+	void SetForeBack(ColourDesired fore, ColourDesired back);
 	void SetFont(Font &font) override;
-	void Create(Window &parent, int ctrlID, Point location_, int lineHeight_, bool unicodeMode_, int technology_) override;
+	void Create(Window &parent, int ctrlID, Point location_, int lineHeight_, bool unicodeMode_, int technology_, bool useThickFrame) override;
 	void SetAverageCharWidth(int width) override;
 	void SetVisibleRows(int rows) override;
 	int GetVisibleRows() const override;
@@ -1384,7 +1386,13 @@
 #endif
 }
 
-void ListBoxX::Create(Window &parent, int, Point, int, bool, int) {
+void ListBoxX::SetForeBack( ColourDesired fore, ColourDesired back) {
+	// todo: Implement
+	// colourBG=RGB(back.GetRed(), back.GetGreen(), back.GetBlue());
+	// colourFG=RGB(fore.GetRed(), fore.GetGreen(), fore.GetBlue());
+}
+
+void ListBoxX::Create(Window &parent, int, Point, int, bool, int,bool) {
 	if (widCached != 0) {
 		wid = widCached;
 		return;
diff -Nurw scintilla/include/Platform.h scintilla_mod/include/Platform.h
--- scintilla/include/Platform.h	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/include/Platform.h	2019-01-13 19:01:50.778472900 +0100
@@ -410,7 +410,7 @@
 	static ListBox *Allocate();
 
 	virtual void SetFont(Font &font)=0;
-	virtual void Create(Window &parent, int ctrlID, Point location, int lineHeight_, bool unicodeMode_, int technology_)=0;
+	virtual void Create(Window &parent, int ctrlID, Point location, int lineHeight_, bool unicodeMode_, int technology_, bool useThickFrame_)=0;
 	virtual void SetAverageCharWidth(int width)=0;
 	virtual void SetVisibleRows(int rows)=0;
 	virtual int GetVisibleRows() const=0;
@@ -428,6 +428,7 @@
 	virtual void ClearRegisteredImages()=0;
 	virtual void SetDelegate(IListBoxDelegate *lbDelegate)=0;
 	virtual void SetList(const char* list, char separator, char typesep)=0;
+	virtual void SetForeBack(ColourDesired fore, ColourDesired back)=0;
 };
 
 /**
diff -Nurw scintilla/src/AutoComplete.cxx scintilla_mod/src/AutoComplete.cxx
--- scintilla/src/AutoComplete.cxx	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/src/AutoComplete.cxx	2019-01-13 19:01:50.794095900 +0100
@@ -55,11 +55,11 @@
 
 void AutoComplete::Start(Window &parent, int ctrlID,
 	Sci::Position position, Point location, Sci::Position startLen_,
-	int lineHeight, bool unicodeMode, int technology) {
+	int lineHeight, bool unicodeMode, int technology, bool useThickFrame) {
 	if (active) {
 		Cancel();
 	}
-	lb->Create(parent, ctrlID, location, lineHeight, unicodeMode, technology);
+	lb->Create(parent, ctrlID, location, lineHeight, unicodeMode, technology, useThickFrame);
 	lb->Clear();
 	active = true;
 	startLen = startLen_;
@@ -290,3 +290,6 @@
 	}
 }
 
+void AutoComplete::SetForeBack( ColourDesired fore, ColourDesired back) {
+	lb->SetForeBack(fore, back);
+}
\ No newline at end of file
diff -Nurw scintilla/src/AutoComplete.h scintilla_mod/src/AutoComplete.h
--- scintilla/src/AutoComplete.h	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/src/AutoComplete.h	2019-01-13 19:01:50.794095900 +0100
@@ -49,7 +49,7 @@
 
 	/// Display the auto completion list positioned to be near a character position
 	void Start(Window &parent, int ctrlID, Sci::Position position, Point location,
-		Sci::Position startLen_, int lineHeight, bool unicodeMode, int technology);
+		Sci::Position startLen_, int lineHeight, bool unicodeMode, int technology, bool useThickFrame);
 
 	/// The stop chars are characters which, when typed, cause the auto completion list to disappear
 	void SetStopChars(const char *stopChars_);
@@ -84,6 +84,8 @@
 
 	/// Select a list element that starts with word as the current element
 	void Select(const char *word);
+	
+	void SetForeBack(ColourDesired fore, ColourDesired back);
 };
 
 }
diff -Nurw scintilla/src/RESearch.cxx scintilla_mod/src/RESearch.cxx
--- scintilla/src/RESearch.cxx	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/src/RESearch.cxx	2019-01-13 19:01:50.825347000 +0100
@@ -128,7 +128,7 @@
  *                      by user setting. The word must also be preceded and/or
  *                      followed by any character outside those mentioned.
  *
- *      [11]    \l      a backslash followed by d, D, s, S, w or W,
+ *      [11]    \\l   a double backslash followed by d, D, s, S, w or W,
  *                      becomes a character class (both inside and
  *                      outside sets []).
  *                        d: decimal digits
diff -Nurw scintilla/src/ScintillaBase.cxx scintilla_mod/src/ScintillaBase.cxx
--- scintilla/src/ScintillaBase.cxx	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/src/ScintillaBase.cxx	2019-01-14 15:49:53.066791500 +0100
@@ -258,8 +258,12 @@
 			return;
 		}
 	}
+	
+	bool useThickFrame=false; // change to test  .todo: Make user settable 
+	int acStyle = ( vs.styles[STYLE_CALLTIP].size > 0) ? STYLE_CALLTIP : STYLE_DEFAULT;
+	ac.SetForeBack(vs.styles[acStyle].fore, vs.styles[acStyle].back);
 	ac.Start(wMain, idAutoComplete, sel.MainCaret(), PointMainCaret(),
-				lenEntered, vs.lineHeight, IsUnicodeMode(), technology);
+				lenEntered, vs.HeightFromStyle(vs.styles[acStyle]), IsUnicodeMode(), technology, useThickFrame);
 
 	const PRectangle rcClient = GetClientRectangle();
 	Point pt = LocationFromPosition(sel.MainCaret() - lenEntered);
@@ -294,8 +298,10 @@
 	rcac.right = rcac.left + widthLB;
 	rcac.bottom = static_cast<XYPOSITION>(std::min(static_cast<int>(rcac.top) + heightLB, static_cast<int>(rcPopupBounds.bottom)));
 	ac.lb->SetPositionRelative(rcac, wMain);
-	ac.lb->SetFont(vs.styles[STYLE_DEFAULT].font);
-	const unsigned int aveCharWidth = static_cast<unsigned int>(vs.styles[STYLE_DEFAULT].aveCharWidth);
+	ac.lb->SetFont(vs.styles[acStyle].font);
+
+
+	unsigned int aveCharWidth = static_cast<unsigned int>(vs.styles[acStyle].aveCharWidth);
 	ac.lb->SetAverageCharWidth(aveCharWidth);
 	ac.lb->SetDelegate(this);
 
@@ -471,6 +477,7 @@
 		defn,
 		vs.styles[ctStyle].fontName,
 		vs.styles[ctStyle].sizeZoomed,
+		// vs.HeightFromStyle(vs.styles[ctStyle]), //xxx
 		CodePage(),
 		vs.styles[ctStyle].characterSet,
 		vs.technology,
diff -Nurw scintilla/src/SciTE.properties scintilla_mod/src/SciTE.properties
--- scintilla/src/SciTE.properties	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/src/SciTE.properties	2019-01-13 19:01:50.856593400 +0100
@@ -1,6 +1,6 @@
 # SciTE.properties is the per directory local options file and can be used to override
 # settings made in SciTEGlobal.properties
-command.build.directory.*.cxx=..\win32
-command.build.directory.*.h=..\win32
-command.build.*.cxx=nmake -f scintilla.mak QUIET=1
-command.build.*.h=nmake -f scintilla.mak QUIET=1
+#command.build.directory.*.cxx=..\win32
+#command.build.directory.*.h=..\win32
+#command.build.*.cxx=nmake -f scintilla.mak QUIET=1
+#command.build.*.h=nmake -f scintilla.mak QUIET=1
diff -Nurw scintilla/src/ViewStyle.cxx scintilla_mod/src/ViewStyle.cxx
--- scintilla/src/ViewStyle.cxx	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/src/ViewStyle.cxx	2019-01-13 19:01:50.872221200 +0100
@@ -610,3 +610,16 @@
 			maxDescent = it->second->descent;
 	}
 }
+
+/// Used for defining lineHeight in Calltips and Userlists 
+int ViewStyle::HeightFromStyle(const FontSpecification &fs) {
+	FontMap::iterator it = fonts.find(fs);
+	if ( !fs.fontName) return 0;
+	unsigned int fontHeight= it->second->ascent;
+	if (fontHeight <  it->second->descent)
+		fontHeight= it->second->descent;
+	
+	return(fontHeight);
+}
+
+
diff -Nurw scintilla/src/ViewStyle.h scintilla_mod/src/ViewStyle.h
--- scintilla/src/ViewStyle.h	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/src/ViewStyle.h	2019-01-13 19:01:50.887845800 +0100
@@ -205,6 +205,7 @@
 	bool SetWrapIndentMode(int wrapIndentMode_);
 
 	bool WhiteSpaceVisible(bool inIndent) const;
+	int HeightFromStyle(const FontSpecification  &fs);
 
 private:
 	void AllocStyles(size_t sizeNew);
diff -Nurw scintilla/win32/PlatWin.cxx scintilla_mod/win32/PlatWin.cxx
--- scintilla/win32/PlatWin.cxx	2019-01-12 20:37:06.000000000 +0100
+++ scintilla_mod/win32/PlatWin.cxx	2019-01-13 19:01:50.919099700 +0100
@@ -2023,6 +2023,10 @@
 	Point dragOffset;
 	Point location;	// Caret location at which the list is opened
 	int wheelDelta; // mouse wheel residue
+	COLORREF colourBG;
+	COLORREF colourFG;
+	bool useThickFrame;
+	HBRUSH hBrushBack;
 
 	HWND GetHWND() const;
 	void AppendListItem(const char *text, const char *numword);
@@ -2052,16 +2056,19 @@
 		desiredVisibleRows(9), maxItemCharacters(0), aveCharWidth(8),
 		parent(NULL), ctrlID(0),
 		delegate(nullptr),
-		widestItem(NULL), maxCharWidth(1), resizeHit(0), wheelDelta(0) {
+		widestItem(NULL), maxCharWidth(1), resizeHit(0), wheelDelta(0),
+		colourBG(RGB(215,215,215)), colourFG(RGB(0,0,0)), useThickFrame(1) {
 	}
 	~ListBoxX() override {
+		if (hBrushBack) ::DeleteObject(hBrushBack);
 		if (fontCopy) {
 			::DeleteObject(fontCopy);
 			fontCopy = 0;
 		}
 	}
+	void SetForeBack(ColourDesired fore, ColourDesired back);
 	void SetFont(Font &font) override;
-	void Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_) override;
+	void Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_, bool useThickFrame_);
 	void SetAverageCharWidth(int width) override;
 	void SetVisibleRows(int rows) override;
 	int GetVisibleRows() const override;
@@ -2085,15 +2092,17 @@
 };
 
 const Point ListBoxX::ItemInset(0, 0);
-const Point ListBoxX::TextInset(2, 0);
-const Point ListBoxX::ImageInset(1, 0);
+const Point ListBoxX::TextInset(2, 2); // .y gets multiplied in ItemHeight
+const Point ListBoxX::ImageInset(1, 1);
+
+long windowOpts=WS_POPUP;
 
 ListBox *ListBox::Allocate() {
 	ListBoxX *lb = new ListBoxX();
 	return lb;
 }
 
-void ListBoxX::Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_) {
+void ListBoxX::Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_, bool useThickFrame_) {
 	parent = &parent_;
 	ctrlID = ctrlID_;
 	location = location_;
@@ -2102,10 +2111,17 @@
 	technology = technology_;
 	HWND hwndParent = static_cast<HWND>(parent->GetID());
 	HINSTANCE hinstanceParent = GetWindowInstance(hwndParent);
+	if (useThickFrame_){
+		windowOpts=WS_POPUP | WS_THICKFRAME;
+		hBrushBack = reinterpret_cast<HBRUSH>(COLOR_WINDOW+1 );
+	} else {
+		hBrushBack = ::CreateSolidBrush(colourBG); // uses a grey shade for better visibility. 
+	}
+
 	// Window created as popup so not clipped within parent client area
 	wid = ::CreateWindowEx(
 		WS_EX_WINDOWEDGE, ListBoxX_ClassName, TEXT(""),
-		WS_POPUP | WS_THICKFRAME,
+		windowOpts,
 		100,100, 150,80, hwndParent,
 		NULL,
 		hinstanceParent,
@@ -2116,6 +2132,12 @@
 	location = Point::FromInts(locationw.x, locationw.y);
 }
 
+void ListBoxX::SetForeBack( ColourDesired fore, ColourDesired back) {
+	// convert to a COLORREF
+	 colourBG=RGB(back.GetRed(), back.GetGreen(), back.GetBlue());
+	 colourFG=RGB(fore.GetRed(), fore.GetGreen(), fore.GetBlue());
+}
+
 void ListBoxX::SetFont(Font &font) {
 	if (font.GetID()) {
 		if (fontCopy) {
@@ -2250,22 +2272,23 @@
 	images.Clear();
 }
 
+
 void ListBoxX::Draw(DRAWITEMSTRUCT *pDrawItem) {
+
 	if ((pDrawItem->itemAction == ODA_SELECT) || (pDrawItem->itemAction == ODA_DRAWENTIRE)) {
 		RECT rcBox = pDrawItem->rcItem;
 		rcBox.left += TextOffset();
 		if (pDrawItem->itemState & ODS_SELECTED) {
 			RECT rcImage = pDrawItem->rcItem;
 			rcImage.right = rcBox.left;
-			// The image is not highlighted
-			::FillRect(pDrawItem->hDC, &rcImage, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+			::FillRect(pDrawItem->hDC, &rcImage, hBrushBack); 			// The image is not highlighted
 			::FillRect(pDrawItem->hDC, &rcBox, reinterpret_cast<HBRUSH>(COLOR_HIGHLIGHT+1));
-			::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHT));
-			::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHTTEXT));
+			::SetBkColor(pDrawItem->hDC,  colourBG);
+			::SetTextColor(pDrawItem->hDC, colourFG);
 		} else {
-			::FillRect(pDrawItem->hDC, &pDrawItem->rcItem, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
-			::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOW));
-			::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOWTEXT));
+			::FillRect(pDrawItem->hDC, &pDrawItem->rcItem, hBrushBack);
+			::SetBkColor(pDrawItem->hDC, colourBG); 
+			::SetTextColor(pDrawItem->hDC, colourFG); 
 		}
 
 		const ListItemData item = lti.Get(pDrawItem->itemID);
@@ -2391,7 +2414,7 @@
 
 void ListBoxX::AdjustWindowRect(PRectangle *rc) {
 	RECT rcw = RectFromPRectangle(*rc);
-	::AdjustWindowRectEx(&rcw, WS_THICKFRAME, false, WS_EX_WINDOWEDGE);
+	::AdjustWindowRectEx(&rcw, windowOpts, false, WS_EX_WINDOWEDGE);
 	*rc = PRectangle::FromInts(rcw.left, rcw.top, rcw.right, rcw.bottom);
 }
 
@@ -2628,7 +2651,9 @@
 	// unpainted area when at the end of a non-integrally sized list with a
 	// vertical scroll bar
 	RECT rc = { 0, 0, extent.x, extent.y };
-	::FillRect(bitmapDC, &rc, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+	
+	//::FillRect(bitmapDC, &rc, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+	::FillRect(bitmapDC, &rc,	hBrushBack);
 	// Paint the entire client area and vertical scrollbar
 	::SendMessage(lb, WM_PRINT, reinterpret_cast<WPARAM>(bitmapDC), PRF_CLIENT|PRF_NONCLIENT);
 	::BitBlt(hDC, 0, 0, extent.x, extent.y, bitmapDC, 0, 0, SRCCOPY);
