// Adds: SCI_CALLTIPADDHLT, SCI_CALLTIPCLEARHLT,SCI_CALLTIPUPDATEHL,SCI_CALLTIPSETWORDWRAP
diff -Nurw scintilla/include/Scintilla.h scintilla_mod/include/Scintilla.h
--- scintilla/include/Scintilla.h	2018-10-10 08:41:16.401013200 +0200
+++ scintilla_mod/include/Scintilla.h	2018-10-23 17:03:38.978653000 +0200
@@ -468,6 +468,10 @@
 #define SCI_CALLTIPSETFOREHLT 2207
 #define SCI_CALLTIPUSESTYLE 2212
 #define SCI_CALLTIPSETPOSITION 2213
+#define SCI_CALLTIPADDHLT 4064
+#define SCI_CALLTIPCLEARHLT 4065
+#define SCI_CALLTIPUPDATEHLT 4066
+#define SCI_CALLTIPSETWORDWRAP 4067
 #define SCI_VISIBLEFROMDOCLINE 2220
 #define SCI_DOCLINEFROMVISIBLE 2221
 #define SCI_WRAPCOUNT 2235
diff -Nurw scintilla/include/Scintilla.iface scintilla_mod/include/Scintilla.iface
--- scintilla/include/Scintilla.iface	2018-10-10 08:41:16.416637400 +0200
+++ scintilla_mod/include/Scintilla.iface	2018-10-23 17:10:09.555275400 +0200
@@ -1160,7 +1160,19 @@
 
 # Set position of calltip, above or below text.
 set void CallTipSetPosition=2213(bool above,)
+##!-start-[BetterCalltips]
+# Add a range of characters to be displayed in a highlight style.
+fun void CallTipAddHlt=4064(int start, int end)
 
+# Delete all highlighted ranges
+fun void CallTipClearHlt=4065(,)
+
+# Update calltip window to reflect changes made by CallTipAddHlt and CallTipClearHlt
+fun void CallTipUpdateHlt=4066(,)
+
+# Set calltip line wrap bound in characters, 0 means no wrap
+fun void CallTipSetWordWrap=4067(int wrapBnd,)
+##!-end-[BetterCalltips]
 # Find the display line of a document line taking hidden lines into account.
 fun int VisibleFromDocLine=2220(int docLine,)
 
diff -Nurw scintilla/src/CallTip.cxx scintilla_mod/src/CallTip.cxx
--- scintilla/src/CallTip.cxx	2018-10-10 08:41:20.551231500 +0200
+++ scintilla_mod/src/CallTip.cxx	2018-10-23 16:57:12.568452600 +0200
@@ -9,7 +9,9 @@
 #include <cstring>
 #include <cstdio>
 
+
 #include <stdexcept>
+#include <vector>
 #include <string>
 #include <algorithm>
 #include <memory>
@@ -18,6 +20,7 @@
 
 #include "Scintilla.h"
 
+#include "SplitVector.h" //!-add-[BetterCalltips]
 #include "StringCopy.h"
 #include "Position.h"
 #include "CallTip.h"
@@ -32,8 +35,9 @@
 	rectDown = PRectangle(0,0,0,0);
 	lineHeight = 1;
 	offsetMain = 0;
-	startHighlight = 0;
-	endHighlight = 0;
+/*!	startHighlight = 0;
+	endHighlight = 0;*/
+	highlightChanged = false; //!-change-[BetterCalltips]
 	tabSize = 0;
 	above = false;
 	useStyleCallTip = false;    // for backwards compatibility
@@ -165,6 +169,7 @@
 	}
 }
 
+/*!
 int CallTip::PaintContents(Surface *surfaceWindow, bool draw) {
 	const PRectangle rcClientPos = wCallTip.GetClientPosition();
 	const PRectangle rcClientSize(0.0f, 0.0f, rcClientPos.right - rcClientPos.left,
@@ -215,6 +220,120 @@
 	}
 	return maxWidth;
 }
+*/
+//!-start-[BetterCalltips]
+#define IS_WS(ch) (((ch) == ' ') || ((ch) == '\t'))
+void CallTip::WrapLine(const char *text, int offset, int length, SplitVector<int> &wrapPosList) {
+	wrapPosList.DeleteAll();
+	int lastWrapPos = -1;
+	int nextWrapBound = offset + wrapBound;
+	for (int i = offset; i < offset + length; i++) {
+		if (IS_WS(text[i]) && (i > offset) && !IS_WS(text[i - 1])) {
+			lastWrapPos = i;
+		}
+		if ((i >= nextWrapBound) && (lastWrapPos != -1)) {
+			wrapPosList.Insert(wrapPosList.Length(), lastWrapPos);
+			nextWrapBound = lastWrapPos + wrapBound;
+			lastWrapPos = -1;
+		}
+	}
+}
+
+PRectangle CallTip::PaintContents(Surface *surfaceWindow, bool draw) {
+	PRectangle rcClientPos = wCallTip.GetClientPosition();
+	PRectangle rcClientSize(0, 0, rcClientPos.right - rcClientPos.left,
+	                        rcClientPos.bottom - rcClientPos.top);
+	PRectangle rcClient(1, 1, rcClientSize.right - 1, rcClientSize.bottom - 1);
+
+	// To make a nice small call tip window, it is only sized to fit most normal characters without accents
+	int ascent = static_cast<int>(surfaceWindow->Ascent(font) - surfaceWindow->InternalLeading(font));
+
+	int ytext = static_cast<int>(rcClient.top) + ascent + 1;
+	rcClient.bottom = ytext + surfaceWindow->Descent(font) + 1;
+	const char *chunkVal = val.c_str();
+	bool moreChunks = true;
+	int maxWidth = 0;
+	int numLines = 0;
+	SplitVector<int> wrapPosList;
+
+	while (moreChunks) {
+		const char *chunkEnd = strchr(chunkVal, '\n');
+		if (chunkEnd == NULL) {
+			chunkEnd = chunkVal + strlen(chunkVal);
+			moreChunks = false;
+		}
+		int chunkOffset = static_cast<int>(chunkVal - val.c_str());
+		int chunkLength = static_cast<int>(chunkEnd - chunkVal);
+		int chunkEndOffset = chunkOffset + chunkLength;
+
+		rcClient.top = ytext - ascent - 1;
+
+		int x = insetX;     // start each line at this inset
+
+		if (wrapBound)
+			WrapLine(val.c_str(), chunkOffset, chunkLength, wrapPosList);
+
+		int off = chunkOffset;
+		do {
+			int hlStart = chunkEndOffset;
+			int hlEnd = chunkEndOffset;
+			// find next highlighted range within the rest of the current line
+			int i;
+			for (i = 0; i < startHighlight.Length(); i++) {
+				if ((startHighlight[i] >= off) && (startHighlight[i] < chunkEndOffset)) {
+					if (hlStart > startHighlight[i]) {
+						hlStart = startHighlight[i];
+						hlEnd = endHighlight[i];
+					}
+				}
+			}
+			if (hlEnd > chunkEndOffset) hlEnd = chunkEndOffset;
+
+			// draw definition part (not highlighted)
+			int wrapPos = off;
+			for (i = 0; i < wrapPosList.Length(); i++) {
+				if ((wrapPosList[i] >= off) && (wrapPosList[i] <= hlStart) && (wrapPos != wrapPosList[i])) {
+					// line wrap is needed here
+					DrawChunk(surfaceWindow, x, chunkVal, wrapPos - chunkOffset, wrapPosList[i] - chunkOffset,
+						ytext, rcClient, false, draw);
+					wrapPos = wrapPosList[i];
+					ytext += lineHeight;
+					rcClient.bottom += lineHeight;
+					maxWidth = std::max(maxWidth, x);
+					x = insetX;
+					numLines++;
+				}
+			}
+			DrawChunk(surfaceWindow, x, chunkVal, wrapPos - chunkOffset, hlStart - chunkOffset,
+				ytext, rcClient, false, draw);
+			// draw definition part (highlighted)
+			wrapPos = hlStart;
+			for (i = 0; i < wrapPosList.Length(); i++) {
+				if ((wrapPosList[i] >= hlStart) && (wrapPosList[i] <= hlEnd) && (wrapPos != wrapPosList[i])) {
+					DrawChunk(surfaceWindow, x, chunkVal, wrapPos - chunkOffset, wrapPosList[i] - chunkOffset,
+						ytext, rcClient, true, draw);
+					wrapPos = wrapPosList[i];
+					ytext += lineHeight;
+					rcClient.bottom += lineHeight;
+					maxWidth = std::max(maxWidth, x);
+					x = insetX;
+					numLines++;
+				}
+			}
+			DrawChunk(surfaceWindow, x, chunkVal, wrapPos - chunkOffset, hlEnd - chunkOffset,
+				ytext, rcClient, true, draw);
+
+			off = hlEnd;
+		} while (off < chunkEndOffset);
+		chunkVal = chunkEnd + 1;
+		ytext += lineHeight;
+		rcClient.bottom += lineHeight;
+		maxWidth = std::max(maxWidth, x);
+		numLines++;
+	}
+	return PRectangle(0, 0, maxWidth + insetX, lineHeight * numLines - surfaceWindow->InternalLeading(font) + 2 + 2);
+}
+//!-end-[BetterCalltips]
 
 void CallTip::PaintCT(Surface *surfaceWindow) {
 	if (val.empty())
@@ -254,7 +373,7 @@
                                  const char *faceName, int size,
                                  int codePage_, int characterSet,
 								 int technology, Window &wParent) {
-	clickPlace = 0;
+/*!	clickPlace = 0;
 	val = defn;
 	codePage = codePage_;
 	std::unique_ptr<Surface> surfaceMeasure(Surface::Allocate(technology));
@@ -293,6 +412,47 @@
 		return PRectangle(pt.x - offsetMain, pt.y + verticalOffset + textHeight, pt.x + width - offsetMain, pt.y + verticalOffset + textHeight + height);
 	}
 }
+*/
+//!-start-[BetterCalltips]
+	clickPlace = 0;
+/*	if (val)
+		delete []val;
+	val = new char[strlen(defn) + 1];
+	if (!val)
+		return PRectangle();*/
+	val = defn;
+	codePage = codePage_;
+	Surface *surfaceMeasure = Surface::Allocate(technology);
+	if (!surfaceMeasure)
+		return PRectangle();
+	surfaceMeasure->Init(wParent.GetID());
+	surfaceMeasure->SetUnicodeMode(SC_CP_UTF8 == codePage);
+	surfaceMeasure->SetDBCSMode(codePage);
+	ClearHighlight();
+	inCallTipMode = true;
+	posStartCallTip = pos;
+	int deviceHeight = surfaceMeasure->DeviceHeightFont(size);
+	FontParameters fp(faceName, deviceHeight / SC_FONT_SIZE_MULTIPLIER, SC_WEIGHT_NORMAL, false, 0, technology, characterSet);
+	font.Create(fp);
+	// Look for multiple lines in the text
+	// Only support \n here - simply means container must avoid \r!
+	rectUp = PRectangle(0,0,0,0);
+	rectDown = PRectangle(0,0,0,0);
+	offsetMain = insetX;            // changed to right edge of any arrows
+	lineHeight = surfaceMeasure->Height(font);
+	PRectangle rcSize = PaintContents(surfaceMeasure, false);
+	delete surfaceMeasure;
+
+	// Extra line for border and an empty line at top and bottom. The returned
+	// rectangle is aligned to the right edge of the last arrow encountered in
+	// the tip text, else to the tip text left edge.
+	if (above) {
+		return PRectangle(pt.x - offsetMain, pt.y - 1 - rcSize.Height(), pt.x + rcSize.Width() - offsetMain, pt.y - 1);
+	} else {
+		return PRectangle(pt.x - offsetMain, pt.y + 1 + textHeight, pt.x - offsetMain + rcSize.Width(), pt.y + 1 + rcSize.Height() + textHeight);
+	}
+}
+//!-end-[BetterCalltips]
 
 void CallTip::CallTipCancel() {
 	inCallTipMode = false;
@@ -301,6 +461,7 @@
 	}
 }
 
+/*!
 void CallTip::SetHighlight(int start, int end) {
 	// Avoid flashing by checking something has really changed
 	if ((start != startHighlight) || (end != endHighlight)) {
@@ -311,6 +472,51 @@
 		}
 	}
 }
+*/
+//!-start-[BetterCalltips]
+void CallTip::SetHighlight(int start, int end) {
+	ClearHighlight();
+	AddHighlight(start, end);
+	UpdateHighlight();
+}
+
+void CallTip::AddHighlight(int start, int end) {
+	int i = 0;
+	if (start == end) return;
+	while (i < startHighlight.Length()) {
+		if ((start == startHighlight[i]) && (end == endHighlight[i])) return;
+		// check if ranges overlap
+		if ((start <= endHighlight[i]) && (end >= startHighlight[i])) {
+			// combine ranges
+			start = std::min(start, startHighlight[i]);
+			end = std::min(end, endHighlight[i]);
+			// delete old range
+			startHighlight.Delete(i);
+			endHighlight.Delete(i);
+		}
+		else {
+			i++;
+		}
+	}
+	startHighlight.Insert(startHighlight.Length(), start);
+	endHighlight.Insert(endHighlight.Length(), end);
+	highlightChanged = true;
+}
+
+void CallTip::ClearHighlight() {
+	if (startHighlight.Length() != 0) highlightChanged = true;
+	startHighlight.DeleteAll();
+	endHighlight.DeleteAll();
+}
+
+void CallTip::UpdateHighlight() {
+	// Avoid flashing by checking something has really changed
+	if (highlightChanged && wCallTip.Created()) {
+		highlightChanged = false;
+		wCallTip.InvalidateAll();
+	}
+}
+//!-end-[BetterCalltips]
 
 // Set the tab size (sizes > 0 enable the use of tabs). This also enables the
 // use of the STYLE_CALLTIP.
@@ -331,3 +537,8 @@
 	colourBG = back;
 	colourUnSel = fore;
 }
+//!-start-[BetterCalltips]
+void CallTip::SetWrapBound(int wrapBnd) {
+	wrapBound = wrapBnd;
+}
+//!-end-[BetterCalltips]
diff -Nurw scintilla/src/CallTip.h scintilla_mod/src/CallTip.h
--- scintilla/src/CallTip.h	2018-10-10 08:41:20.613729400 +0200
+++ scintilla_mod/src/CallTip.h	2018-10-23 16:32:15.891669000 +0200
@@ -13,8 +13,15 @@
 /**
  */
 class CallTip {
+/*!
 	int startHighlight;    // character offset to start and...
 	int endHighlight;      // ...end of highlighted text
+*/
+//!-start-[BetterCalltips]
+	bool highlightChanged;              // flag to indicate that highlight ranges were changed
+	SplitVector<int> startHighlight;    // character offset to start and...
+	SplitVector<int> endHighlight;      // ...end of highlighted text
+//!-end-[BetterCalltips]
 	std::string val;
 	Font font;
 	PRectangle rectUp;      // rectangle of last up angle in the tip
@@ -23,14 +30,17 @@
 	int offsetMain;         // The alignment point of the call tip
 	int tabSize;            // Tab size in pixels, <=0 no TAB expand
 	bool useStyleCallTip;   // if true, STYLE_CALLTIP should be used
+	int wrapBound;          // calltip wrap bound in chars, 0 - no wrap //!-add-[BetterCalltips]
 	bool above;		// if true, display calltip above text
 
 	void DrawChunk(Surface *surface, int &x, const char *s,
 		int posStart, int posEnd, int ytext, PRectangle rcClient,
 		bool highlight, bool draw);
-	int PaintContents(Surface *surfaceWindow, bool draw);
+	//int PaintContents(Surface *surfaceWindow, bool draw);
+	PRectangle PaintContents(Surface *surfaceWindow, bool draw); //!-change-[BetterCalltips]
 	bool IsTabCharacter(char ch) const;
 	int NextTabPos(int x) const;
+	void WrapLine(const char *text, int offset, int length, SplitVector<int> &wrapPosList); //!-add-[BetterCalltips]	
 
 public:
 	Window wCallTip;
@@ -70,6 +80,14 @@
 	/// Set a range of characters to be displayed in a highlight style.
 	/// Commonly used to highlight the current parameter.
 	void SetHighlight(int start, int end);
+//!-start-[BetterCalltips]
+	/// Add a range of characters to be displayed in a highlight style.
+	void AddHighlight(int start, int end);
+	/// Delete all highlighted ranges
+	void ClearHighlight();
+	/// Update calltip window to reflect changes made by AddHighlight() and ClearHighlight()
+	void UpdateHighlight();
+//!-end-[BetterCalltips]
 
 	/// Set the tab size in pixels for the call tip. 0 or -ve means no tab expand.
 	void SetTabSize(int tabSz);
@@ -81,6 +99,10 @@
 	bool UseStyleCallTip() const { return useStyleCallTip;}
 
 	// Modify foreground and background colours
+//!-start-[BetterCalltips]
+	// Set calltip line wrap bound in characters, 0 means no wrap
+	void SetWrapBound(int wrapBnd);
+//!-end-[BetterCalltips]
 	void SetForeBack(const ColourDesired &fore, const ColourDesired &back);
 };
 
diff -Nurw scintilla/src/ScintillaBase.cxx scintilla_mod/src/ScintillaBase.cxx
--- scintilla/src/ScintillaBase.cxx	2018-10-10 08:41:21.019968600 +0200
+++ scintilla_mod/src/ScintillaBase.cxx	2018-10-23 16:29:22.341923300 +0200
@@ -489,6 +489,13 @@
 		rc.top += offset;
 		rc.bottom += offset;
 	}
+//!-start-[BetterCalltips]
+	// adjust X position so that max. amount of calltip text is visible
+	if (rc.Width() > rcClient.Width())
+		rc.Move(-rc.left, 0);
+	else if (rc.right > rcClient.right)
+		rc.Move(-(rc.right - rcClient.right), 0);
+//!-end-[BetterCalltips]
 	// Now display the window.
 	CreateCallTipWindow(rc);
 	ct.wCallTip.SetPositionRelative(rc, wMain);
@@ -1005,6 +1012,19 @@
 	case SCI_CALLTIPSETHLT:
 		ct.SetHighlight(static_cast<int>(wParam), static_cast<int>(lParam));
 		break;
+//!-start-[BetterCalltips]
+	case SCI_CALLTIPADDHLT:
+		ct.AddHighlight(wParam, lParam);
+		break;
+
+	case SCI_CALLTIPCLEARHLT:
+		ct.ClearHighlight();
+		break;
+
+	case SCI_CALLTIPUPDATEHLT:
+		ct.UpdateHighlight();
+		break;
+//!-end-[BetterCalltips]
 
 	case SCI_CALLTIPSETBACK:
 		ct.colourBG = ColourDesired(static_cast<long>(wParam));
@@ -1027,6 +1047,10 @@
 		ct.SetTabSize(static_cast<int>(wParam));
 		InvalidateStyleRedraw();
 		break;
+//!-start-[BetterCalltips]
+	case SCI_CALLTIPSETWORDWRAP:
+		ct.SetWrapBound((int)wParam);
+//!-end-[BetterCalltips]
 
 	case SCI_CALLTIPSETPOSITION:
 		ct.SetPosition(wParam != 0);
