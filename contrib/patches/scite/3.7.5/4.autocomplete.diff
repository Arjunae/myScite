///@brief regrow Autocomplete List when hitting backspace.
diff -Nurw scintilla-scite/src/SciTEBase.cxx scite/src/SciTEBase.cxx
--- scintilla-scite/src/SciTEBase.cxx	2016-10-08 14:58:36.000000000 +0200
+++ scite/src/SciTEBase.cxx	2016-10-08 14:59:12.000000000 +0200
@@ -1687,7 +1687,8 @@
 	if (apis) {
 		std::string words = GetNearestWords(root.c_str(), root.length(),
 			calltipParametersStart.c_str(), autoCompleteIgnoreCase);
-		if (words.length()) {
+		// Show list on x typed chars (root.length() >0) 
+			if (words.length() && root.length()>3 ) { 
 			EliminateDuplicateWords(words);
 			wEditor.Call(SCI_AUTOCSETSEPARATOR, ' ');
 			wEditor.CallString(SCI_AUTOCSHOW, root.length(), words.c_str());
@@ -3958,6 +3959,10 @@
 			//this will be called a lot, and usually means "typing".
 			EnableAMenuItem(IDM_UNDO, true);
 			EnableAMenuItem(IDM_REDO, false);
+			// Grow Autocomplete list on backspace
+			if (!wEditor.Call(SCI_CALLTIPACTIVE) && wEditor.Call(SCI_AUTOCACTIVE)) { 
+				StartAutoComplete();
+			}
 			if (CurrentBuffer()->findMarks == Buffer::fmMarked) {
 				CurrentBuffer()->findMarks = Buffer::fmModified;
 			}
diff -Nurw scite/src/SciTEProps.cxx scite_mod/src/SciTEProps.cxx
--- scite/src/SciTEProps.cxx	2017-05-26 00:25:03.000000000 +0200
+++ scite_mod/src/SciTEProps.cxx	2018-12-18 19:47:57.214210400 +0100
@@ -106,21 +106,24 @@
 const GUI::gui_char propLocalFileName[] = GUI_TEXT("SciTE.properties");
 const GUI::gui_char propDirectoryFileName[] = GUI_TEXT("SciTEDirectory.properties");
 
+/** 
+Push system env on propsPlatform. Format Key=value
+*/
 void SciTEBase::ReadEnvironment() {
 #if defined(__unix__)
 	extern char **environ;
-	char **e = environ;
+	char **pEnv= environ;
 #else
-	char **e = _environ;
+	char **pEnv= _environ;
 #endif
-	for (; e && *e; e++) {
+	for (; pEnv&& *pEnv; pEnv++) {
 		char key[1024];
-		char *k = *e;
-		char *v = strchr(k, '=');
-		if (v && (static_cast<size_t>(v - k) < sizeof(key))) {
-			memcpy(key, k, v - k);
-			key[v - k] = '\0';
-			propsPlatform.Set(key, v + 1);
+		char *pMe= *pEnv; // Varname's start position 
+		char *pValue = strchr(pMe, '='); // Values start position
+		if (pValue && ((int)(pValue - pMe) < (int)(sizeof(key)))) { // Validate length 
+			memcpy(key, pMe, pValue - pMe);
+			key[pValue - pMe] = '\0';
+			propsPlatform.Set(key, pValue + 1);
 		}
 	}
 }
@@ -701,12 +704,12 @@
 
 		for (int baseStyle=0;baseStyle<lenSSB;baseStyle++) {
 			//substyles.cpp.11=2
-			std::string ssSubStylesKey = "substyles.";
-			ssSubStylesKey += language;
-			ssSubStylesKey += ".";
-			ssSubStylesKey += StdStringFromInteger(subStyleBases[baseStyle]);
-			std::string ssNumber = props.GetNewExpandString(ssSubStylesKey.c_str());
-			int subStyleIdentifiers = atoi(ssNumber.c_str());
+			std::string SubStylesKey = "substyles.";
+			SubStylesKey += language;
+			SubStylesKey += ".";
+			SubStylesKey += StdStringFromInteger(subStyleBases[baseStyle]);
+			std::string SBStyleNumber = props.GetNewExpandString(SubStylesKey.c_str());
+			int subStyleIdentifiers = atoi(SBStyleNumber.c_str());
 
 			int subStyleIdentifiersStart = 0;
 			if (subStyleIdentifiers) {
