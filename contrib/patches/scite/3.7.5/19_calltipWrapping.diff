// Automatic linewrap SciTe's Calltips with  calltip.*.use.escapes // Preserve current behaviour with calltip.*.use.manual.escapes // Show/omit Functions Documentation with calltip.*.show.funcdocs
diff -Nurw scite/src/SciTEBase.cxx scite_mod/src/SciTEBase.cxx
--- scite/src/SciTEBase.cxx	2017-05-26 00:25:03.000000000 +0200
+++ scite_mod/src/SciTEBase.cxx	2018-11-10 21:31:43.764352400 +0100
@@ -1497,6 +1497,91 @@
 	return words;
 }
 
+unsigned int SciTEBase::parseFunctionDefinition(std::string text, unsigned int partNo) {
+/* 
+		Returns positions of parts within an api entry. ( params / funcs Documentation )
+		coops with subfunctions() within the funcs definition.
+*/
+
+
+size_t pos=0;
+unsigned int brackets=0;
+unsigned int marker=0;
+ 	
+	// Attributes dont have parameters. 
+	// Lets define @@ as an optional sep between attributes name and Documentation
+	pos=text.find("@@");
+	if ( pos != std::string::npos && partNo==1 ) return pos-1;
+	if ( pos != std::string::npos && partNo==2 ) return pos+2;
+	if ( pos != std::string::npos && partNo==3) return pos+3;
+	pos=0;
+
+	// Otherwise, continue parsing calltipParameters.
+    while (pos < text.size()){ 
+			if (text.substr(pos,1)==calltipParametersStart.substr(0,1)) {
+					brackets++;
+					marker=1;
+        			if (marker==1 && partNo==1 ) return pos; // start functions params							
+			} else if ( brackets>0 && (text.substr(pos,1)==calltipParametersEnd.substr(0,1))){
+					brackets--;
+					if (brackets==0 && partNo==2 ) return pos; // end functions params			
+			} else if (brackets==0 && marker==1) {
+					marker=2;
+					if (!(text[pos]==':' && partNo==3)) return pos; // noParams, start functions Description 				
+			} else if (marker==2 && (isspace(text[pos]))) {
+					if (partNo==3) return pos; // start functions Description
+					marker=3;
+			}
+			pos++;
+
+    }
+
+    return(std::string::npos);
+}
+
+std::string SciTEBase::wrapText(std::string text, unsigned per_line) {
+/*	Submitted by Sean Hubbard on https://www.cprogramming.com/snippets/source-code/word-wrap-in-c
+		This function takes a string and an output buffer and a desired width. It then copies 
+		the string to the buffer, inserting a new line character when a certain line
+		length is reached.  If the end of the line is in the middle of a word, it will
+		backtrack along the string until white space is found.
+*/	 
+
+    unsigned line_begin = 0;
+
+    while (line_begin < text.size())
+    {
+        const unsigned ideal_end = line_begin + per_line ;
+        unsigned line_end = ideal_end <= text.size() ? ideal_end : text.size()-1;
+
+        if (line_end == text.size() - 1)
+            ++line_end;
+        else if (isspace(text[line_end]))
+        {
+            text[line_end] = '\n';
+            ++line_end;
+        }
+        else    // backtrack current word
+        {
+            unsigned end = line_end;
+            while ( end > line_begin && !isspace(text[end]))
+                --end;
+
+            if (end != line_begin)                  
+            {                                       
+                line_end = end;                     
+                text[line_end++] = '\n';            
+            }                                       
+            else                                 
+                text.insert(line_end++, 1, '\n');
+        }
+
+        line_begin = line_end;
+    }
+
+    return text;
+}
+
 void SciTEBase::FillFunctionDefinition(int pos /*= -1*/) {
 	if (pos > 0) {
 		lastPosCallTip = pos;
@@ -1512,14 +1597,56 @@
 		// Should get current api definition
 		std::string word = apis.GetNearestWord(currentCallTipWord.c_str(), currentCallTipWord.length(),
 		        callTipIgnoreCase, calltipWordCharacters, currentCallTip);
+					
+		// lineWrap that functions Api Documentation
 		if (word.length()) {
-			functionDefinition = word;
+
+			unsigned int wrapPos;
+			unsigned int maxOneLiner=100; // do not linewrap below that size
+			unsigned int minWrapPos=70; // minimum / maximum linewrap size to use.
+			unsigned int maxWrapPos=callTipMaxWrapPos;
+			unsigned int docSep=parseFunctionDefinition(word,3); // get Function Description
+			
+			std::string funcDescr= word.substr(0,docSep);
+			std::string funcDocs = (docSep==std::string::npos)?"":word.substr(docSep, std::string::npos);
+			functionDefinition=funcDescr;
+			
+			// User choice: Show/Omit Function Documentation ?
+			funcDocs=(!callTipShowFuncDocs)?"":funcDocs; 
+			
+			// User choice: wrap manually / automatically.		
+			if (callTipUseEscapes && !callTipUseManualEscapes) {
+					// replace fixed position line ends 
+					funcDocs=UnSlashString(funcDocs.c_str());
+					for (unsigned int cnt = funcDocs.find("\t\n") ; cnt != std::string::npos ; cnt = funcDocs.find("\t\n"))
+						funcDocs.erase(cnt, 2);
+						
+					// does the text fit within the first line ?
+					if (funcDocs.size()<maxOneLiner) {	
+							wrapPos=funcDocs.size()+1;
+					} else {
+						unsigned int lineRest;					
+						// dont try to align to funcDescrs boundaries if that will be to small.
+						wrapPos=(funcDescr.size()<minWrapPos)?minWrapPos:funcDescr.size();
+						//  move smaller chunks back to the previous lines.
+						std::string strTmp = std::to_string((funcDocs.size()*1000 / wrapPos*1000)/1000);
+						lineRest=std::stoi(strTmp.substr(strTmp.size()-3,std::string::npos));
+						if (lineRest<36) wrapPos+=lineRest;
+					}
+					// In case of a long funcDescr, keep an eye on the maximum linewrap. 
+					wrapPos=(wrapPos<maxWrapPos)?wrapPos:maxWrapPos;
+					functionDefinition+= wrapText(funcDocs, wrapPos);		
+				}	else {	
+					functionDefinition+= funcDocs;
+			} 
+
+
 			if (maxCallTips > 1) {
 				functionDefinition.insert(0, "\001");
 			}
 
 			if (calltipEndDefinition != "") {
-				size_t posEndDef = functionDefinition.find(calltipEndDefinition.c_str());
+				size_t posEndDef= parseFunctionDefinition(functionDefinition,2); // fix constructs aka fn(p1,p2=z.(),p3)
 				if (maxCallTips > 1) {
 					if (posEndDef != std::string::npos) {
 						functionDefinition.insert(posEndDef + calltipEndDefinition.length(), "\n\002");
@@ -1536,7 +1663,7 @@
 			}
 
 			std::string definitionForDisplay;
-			if (callTipUseEscapes) {
+			if (callTipUseEscapes  || callTipUseManualEscapes) {
 				definitionForDisplay = UnSlashString(functionDefinition.c_str());
 			} else {
 				definitionForDisplay = functionDefinition;
diff -Nurw scite/src/SciTEBase.h scite_mod/src/SciTEBase.h
--- scite/src/SciTEBase.h	2017-05-26 00:25:03.000000000 +0200
+++ scite_mod/src/SciTEBase.h	2018-11-05 17:35:37.050289700 +0100
@@ -461,10 +461,13 @@
 
 	int indentationWSVisible;
 	int indentExamine;
+	int callTipMaxWrapPos;
 	bool autoCompleteIgnoreCase;
 	bool imeAutoComplete;
 	bool callTipUseEscapes;
+	bool callTipUseManualEscapes;
 	bool callTipIgnoreCase;
+	bool callTipShowFuncDocs;
 	bool autoCCausedByOnlyOne;
 	std::string calltipWordCharacters;
 	std::string calltipParametersStart;
@@ -757,6 +760,8 @@
 	void ShowMessages(int line);
 	void GoMessage(int dir);
 	virtual bool StartCallTip();
+	unsigned int parseFunctionDefinition(std::string text, unsigned int partNo);
+	std::string wrapText(std::string text, unsigned per_line);
 	std::string GetNearestWords(const char *wordStart, size_t searchLen,
 		const char *separators, bool ignoreCase=false, bool exactLen=false);
 	virtual void FillFunctionDefinition(int pos = -1);
diff -Nurw scite/src/SciTEProps.cxx scite_mod/src/SciTEProps.cxx
--- scite/src/SciTEProps.cxx	2018-11-03 19:43:03.835934500 +0100
+++ scite_mod/src/SciTEProps.cxx	2018-11-05 17:35:07.675460000 +0100
@@ -925,6 +925,11 @@
 	callTipIgnoreCase = sval == "1";
 	sval = FindLanguageProperty("calltip.*.use.escapes");
 	callTipUseEscapes = sval == "1";
+	sval = FindLanguageProperty("calltip.*.use.manual.escapes");
+	callTipUseManualEscapes = sval == "1";
+	sval = FindLanguageProperty("calltip.*.show.funcdocs","1");
+	callTipShowFuncDocs= sval == "1";
+	callTipMaxWrapPos = props.GetInt("calltip.max.wrappos",140);	
 
 	calltipWordCharacters = FindLanguageProperty("calltip.*.word.characters",
 		"_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
