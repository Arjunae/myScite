--- LexMake.cxx	2017-04-01 19:11:22.000000000 +0200
+++ LexMake_mod.cxx	2017-05-24 22:08:52.000000000 +0200
@@ -37,6 +37,7 @@
     Sci_PositionU lengthLine,
     Sci_PositionU startLine,
     Sci_PositionU endPos,
+		WordList *keywordlists[],
     Accessor &styler) {
 
 	Sci_PositionU i = 0;
@@ -44,6 +45,16 @@
 	unsigned int state = SCE_MAKE_DEFAULT;
 	bool bSpecial = false;
 
+	/*
+	// todo fetch current word to search for below
+	WordList &kwDirective = *keywordlists[0]; // Directives
+
+	if (kwDirective.InList(words)) {
+		styler.ColourTo(endPos, SCE_MAKE_VARIABLE);
+		return;
+	}	
+	*/
+	
 	// check for a tab character in column 0 indicating a command
 	bool bCommand = false;
 	if ((lengthLine > 0) && (lineBuffer[0] == '\t'))
@@ -63,16 +74,45 @@
 			return;
 		}
 	}
-	int varCount = 0;
+	
+	int varCount = 0; // increments on $
+	int inVarCount = 0; // increments on identifiers within $vars @...D/F
+	unsigned int state_prev;
 	while (i < lengthLine) {
-		if (((i + 1) < lengthLine) && (lineBuffer[i] == '$' && lineBuffer[i + 1] == '(')) {
+		// same Style for Variables $(...) 
+		if (((i + 1) < lengthLine) && lineBuffer[i] == '$' && lineBuffer[i] == '(')  {
 			styler.ColourTo(startLine + i - 1, state);
-			state = SCE_MAKE_IDENTIFIER;
+			state_prev = state;
+			state = SCE_MAKE_VARIABLE;
 			varCount++;
-		} else if (state == SCE_MAKE_IDENTIFIER && lineBuffer[i] == ')') {
+		// and $ based automatic Variables $@
+		} else if (((i + 1) < lengthLine) && lineBuffer[i] == '$' && (strchr( "@%<?^+*",(int)lineBuffer[i+1]) >0) ) {
+			styler.ColourTo(startLine + i - 1, state);
+			state_prev = state;
+			state = SCE_MAKE_AUTOM_VARIABLE;
+			varCount++;			
+		} else if (state == SCE_MAKE_VARIABLE && lineBuffer[i]==')') {
 			if (--varCount == 0) {
 				styler.ColourTo(startLine + i, state);
-				state = SCE_MAKE_DEFAULT;
+				state = state_prev;
+			}
+		} else if (state == SCE_MAKE_AUTOM_VARIABLE && (strchr( "@%<?^+*",(int)lineBuffer[i]) >0) && lineBuffer[i-1]=='$') {
+			if (--varCount == 0) {
+				styler.ColourTo(startLine + i, state);
+				state = state_prev;
+			}
+		}
+		
+		// Style for automatic Variables in standard variables (@%<^+)
+		if (((i + 1) < lengthLine) && (strchr( "@%<?^+*",(int)lineBuffer[i]) >0) && (strchr( "DF",(int)lineBuffer[i+1]) >0))  {
+			styler.ColourTo(startLine + i -1 , state);
+			state_prev=state;
+			state = SCE_MAKE_AUTOM_VARIABLE;
+			inVarCount++;
+		} else if (state == SCE_MAKE_AUTOM_VARIABLE && (strchr( "@%<^+",(int)lineBuffer[i-1]) >0) && (strchr( "DF",(int)lineBuffer[i]) >0)) {
+			if (--inVarCount == 0) {
+				styler.ColourTo(startLine + i, state);
+				state = state_prev;
 			}
 		}
 
@@ -116,7 +158,7 @@
 	}
 }
 
-static void ColouriseMakeDoc(Sci_PositionU startPos, Sci_Position length, int, WordList *[], Accessor &styler) {
+static void ColouriseMakeDoc(Sci_PositionU startPos, Sci_Position length, int, WordList *keywords[], Accessor &styler) {
 	char lineBuffer[1024];
 	styler.StartAt(startPos);
 	styler.StartSegment(startPos);
@@ -127,13 +169,13 @@
 		if (AtEOL(styler, i) || (linePos >= sizeof(lineBuffer) - 1)) {
 			// End of line (or of line buffer) met, colourise it
 			lineBuffer[linePos] = '\0';
-			ColouriseMakeLine(lineBuffer, linePos, startLine, i, styler);
+			ColouriseMakeLine(lineBuffer, linePos, startLine, i, keywords, styler);
 			linePos = 0;
 			startLine = i + 1;
 		}
 	}
 	if (linePos > 0) {	// Last line does not have ending characters
-		ColouriseMakeLine(lineBuffer, linePos, startLine, startPos + length - 1, styler);
+		ColouriseMakeLine(lineBuffer, linePos, startLine, startPos + length - 1, keywords, styler);
 	}
 }
 
--- SciLexer.h	2017-04-14 20:58:48.000000000 +0200
+++ SciLexer_mod.h	2017-05-24 22:10:04.000000000 +0200
@@ -548,6 +548,8 @@
 #define SCE_MAKE_IDENTIFIER 3
 #define SCE_MAKE_OPERATOR 4
 #define SCE_MAKE_TARGET 5
+#define SCE_MAKE_VARIABLE 6
+#define SCE_MAKE_AUTOM_VARIABLE 7
 #define SCE_MAKE_IDEOL 9
 #define SCE_DIFF_DEFAULT 0
 #define SCE_DIFF_COMMENT 1
