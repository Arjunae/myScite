///@brief smaller and styleable Autcocomplete lists . WorkInProgress. Test with
// style.*.38=back:#DFD0D0,fore:#0A0A40,$(font.base),size:8
// 258  bool useThickFrame=false; // change here to test. 
// -- todo: Use a Message to toggle thickFrame
//  currently viewStyle imply just picks the biggest style Defined Fontsize, which is not desireable for userlists and Calltips.
//  --todo: Enhance Viewstyle to store the lineheight per Style.
diff -Nurw scintilla/gtk/PlatGTK.cxx scintilla_m/gtk/PlatGTK.cxx
--- scintilla/gtk/PlatGTK.cxx	2017-05-26 00:25:00.000000000 +0200
+++ scintilla_m/gtk/PlatGTK.cxx	2017-12-08 01:59:08.000000000 +0100
@@ -1225,6 +1225,9 @@
 	int desiredVisibleRows;
 	unsigned int maxItemCharacters;
 	unsigned int aveCharWidth;
+	long colourBG;
+	long colourFG;
+	bool useThickFrame;
 #if GTK_CHECK_VERSION(3,0,0)
 	GtkCssProvider *cssProvider;
 #endif
@@ -1233,9 +1236,7 @@
 	void *doubleClickActionData;
 
 	ListBoxX() : widCached(0), frame(0), list(0), scroller(0), pixhash(NULL), pixbuf_renderer(0),
-		renderer(0),
-		desiredVisibleRows(5), maxItemCharacters(0),
-		aveCharWidth(1),
+		renderer(0), desiredVisibleRows(5), maxItemCharacters(0), aveCharWidth(1), 
 #if GTK_CHECK_VERSION(3,0,0)
 		cssProvider(NULL),
 #endif
@@ -1257,8 +1258,9 @@
 		}
 #endif
 	}
+	void SetForeBack(ColourDesired fore, ColourDesired back);
 	void SetFont(Font &font) override;
-	void Create(Window &parent, int ctrlID, Point location_, int lineHeight_, bool unicodeMode_, int technology_) override;
+	void Create(Window &parent, int ctrlID, Point location_, int lineHeight_, bool unicodeMode_, int technology_, bool useThickFrame) override;
 	void SetAverageCharWidth(int width) override;
 	void SetVisibleRows(int rows) override;
 	int GetVisibleRows() const override;
@@ -1431,7 +1433,13 @@
 #endif
 }
 
-void ListBoxX::Create(Window &parent, int, Point, int, bool, int) {
+void ListBoxX::SetForeBack( ColourDesired fore, ColourDesired back) {
+	// todo: Implement
+	// colourBG=RGB(back.GetRed(), back.GetGreen(), back.GetBlue());
+	// colourFG=RGB(fore.GetRed(), fore.GetGreen(), fore.GetBlue());
+}
+
+void ListBoxX::Create(Window &parent, int, Point, int, bool, int,bool) {
 	if (widCached != 0) {
 		wid = widCached;
 		return;
diff -Nurw scintilla/include/Platform.h scintilla_m/include/Platform.h
--- scintilla/include/Platform.h	2017-05-26 00:25:00.000000000 +0200
+++ scintilla_m/include/Platform.h	2017-12-08 01:59:08.000000000 +0100
@@ -404,7 +404,7 @@
 	static ListBox *Allocate();
 
 	virtual void SetFont(Font &font)=0;
-	virtual void Create(Window &parent, int ctrlID, Point location, int lineHeight_, bool unicodeMode_, int technology_)=0;
+	virtual void Create(Window &parent, int ctrlID, Point location, int lineHeight_, bool unicodeMode_, int technology_, bool useThickFrame_)=0;
 	virtual void SetAverageCharWidth(int width)=0;
 	virtual void SetVisibleRows(int rows)=0;
 	virtual int GetVisibleRows() const=0;
@@ -422,6 +422,7 @@
 	virtual void ClearRegisteredImages()=0;
 	virtual void SetDoubleClickAction(CallBackAction, void *)=0;
 	virtual void SetList(const char* list, char separator, char typesep)=0;
+	virtual void SetForeBack(ColourDesired fore, ColourDesired back)=0;
 };
 
 /**
diff -Nurw scintilla/src/AutoComplete.cxx scintilla_m/src/AutoComplete.cxx
--- scintilla/src/AutoComplete.cxx	2017-05-26 00:25:00.000000000 +0200
+++ scintilla_m/src/AutoComplete.cxx	2017-12-08 19:12:40.000000000 +0100
@@ -46,6 +46,7 @@
 }
 
 AutoComplete::~AutoComplete() {
+	font.Release();
 	if (lb) {
 		lb->Destroy();
 	}
@@ -57,11 +58,18 @@
 
 void AutoComplete::Start(Window &parent, int ctrlID,
 	Sci::Position position, Point location, int startLen_,
-	int lineHeight, bool unicodeMode, int technology) {
+ const char *faceName, int characterSet, int size, bool unicodeMode, int technology,bool useThickFrame,Window &wParent) {
 	if (active) {
 		Cancel();
 	}
-	lb->Create(parent, ctrlID, location, lineHeight, unicodeMode, technology);
+	std::unique_ptr<Surface> surfaceMeasure(Surface::Allocate(technology));
+	surfaceMeasure->Init(wParent.GetID());
+	surfaceMeasure->SetUnicodeMode(unicodeMode);
+	XYPOSITION deviceHeight = static_cast<XYPOSITION>(surfaceMeasure->DeviceHeightFont(size));
+	FontParameters fp(faceName, deviceHeight / SC_FONT_SIZE_MULTIPLIER, SC_WEIGHT_NORMAL, false, 0, technology, characterSet);
+	font.Create(fp);
+	int lineHeight = RoundXYPosition(surfaceMeasure->Height(font));
+	lb->Create(parent, ctrlID, location, lineHeight, unicodeMode, technology, useThickFrame);
 	lb->Clear();
 	active = true;
 	startLen = startLen_;
@@ -292,3 +300,6 @@
 	}
 }
 
+void AutoComplete::SetForeBack( ColourDesired fore, ColourDesired back) {
+	lb->SetForeBack(fore, back);
+}
\ No newline at end of file
diff -Nurw scintilla/src/AutoComplete.h scintilla_m/src/AutoComplete.h
--- scintilla/src/AutoComplete.h	2017-05-26 00:25:00.000000000 +0200
+++ scintilla_m/src/AutoComplete.h	2017-12-08 19:09:24.000000000 +0100
@@ -22,6 +22,7 @@
 	char typesep; // Type seperator
 	enum { maxItemLen=1000 };
 	std::vector<int> sortMatrix;
+	Font font;
 
 public:
 
@@ -51,7 +52,7 @@
 
 	/// Display the auto completion list positioned to be near a character position
 	void Start(Window &parent, int ctrlID, Sci::Position position, Point location,
-		int startLen_, int lineHeight, bool unicodeMode, int technology);
+		int startLen_, const char *faceName, int characterSet, int size,  bool unicodeMode, int technology, bool useThickFrame, Window &wParent);
 
 	/// The stop chars are characters which, when typed, cause the auto completion list to disappear
 	void SetStopChars(const char *stopChars_);
@@ -86,6 +87,8 @@
 
 	/// Select a list element that starts with word as the current element
 	void Select(const char *word);
+	
+	void SetForeBack(ColourDesired fore, ColourDesired back);
 };
 
 #ifdef SCI_NAMESPACE
diff -Nurw scintilla/src/RESearch.cxx scintilla_m/src/RESearch.cxx
--- scintilla/src/RESearch.cxx	2017-05-26 00:25:02.000000000 +0200
+++ scintilla_m/src/RESearch.cxx	2017-12-08 01:59:08.000000000 +0100
@@ -128,7 +128,7 @@
  *                      by user setting. The word must also be preceded and/or
  *                      followed by any character outside those mentioned.
  *
- *      [11]    \l      a backslash followed by d, D, s, S, w or W,
+ *      [11]    \\l   a double backslash followed by d, D, s, S, w or W,
  *                      becomes a character class (both inside and
  *                      outside sets []).
  *                        d: decimal digits
diff -Nurw scintilla/src/ScintillaBase.cxx scintilla_m/src/ScintillaBase.cxx
--- scintilla/src/ScintillaBase.cxx	2017-05-26 00:25:02.000000000 +0200
+++ scintilla_m/src/ScintillaBase.cxx	2017-12-08 21:57:00.000000000 +0100
@@ -254,8 +254,16 @@
 			return;
 		}
 	}
+	
+		// Backward Compatibility. 
+	bool useThickFrame=true; // change to test  .todo: Make user settable 
+	int acStyle =STYLE_DEFAULT
+	
+	// Decision -> Shouldnt we just allocate style.40 and bump up val STYLE_LASTPREDEFINED=40 ?
+	if (!useThickFrame) acStyle ( vs.styles[STYLE_CALLTIP].size > 0) ? STYLE_CALLTIP : STYLE_DEFAULT;
+
 	ac.Start(wMain, idAutoComplete, sel.MainCaret(), PointMainCaret(),
-				lenEntered, vs.lineHeight, IsUnicodeMode(), technology);
+				lenEntered, vs.styles[acStyle].fontName,  vs.styles[acStyle].characterSet, vs.styles[acStyle].sizeZoomed, IsUnicodeMode(), technology, useThickFrame, wMain);
 
 	PRectangle rcClient = GetClientRectangle();
 	Point pt = LocationFromPosition(sel.MainCaret() - lenEntered);
@@ -290,8 +298,10 @@
 	rcac.right = rcac.left + widthLB;
 	rcac.bottom = static_cast<XYPOSITION>(std::min(static_cast<int>(rcac.top) + heightLB, static_cast<int>(rcPopupBounds.bottom)));
 	ac.lb->SetPositionRelative(rcac, wMain);
-	ac.lb->SetFont(vs.styles[STYLE_DEFAULT].font);
-	unsigned int aveCharWidth = static_cast<unsigned int>(vs.styles[STYLE_DEFAULT].aveCharWidth);
+	ac.lb->SetFont(vs.styles[acStyle].font);
+	ac.SetForeBack(vs.styles[acStyle].fore, vs.styles[acStyle].back);
+
+	unsigned int aveCharWidth = static_cast<unsigned int>(vs.styles[acStyle].aveCharWidth);
 	ac.lb->SetAverageCharWidth(aveCharWidth);
 	ac.lb->SetDoubleClickAction(AutoCompleteDoubleClick, this);
 
diff -Nurw scintilla/win32/PlatWin.cxx scintilla_m/win32/PlatWin.cxx
--- scintilla/win32/PlatWin.cxx	2017-05-26 00:25:02.000000000 +0200
+++ scintilla_m/win32/PlatWin.cxx	2017-12-08 18:50:06.000000000 +0100
@@ -2046,6 +2046,10 @@
 	Point dragOffset;
 	Point location;	// Caret location at which the list is opened
 	int wheelDelta; // mouse wheel residue
+	COLORREF colourBG;
+	COLORREF colourFG;
+	bool useThickFrame;
+	HBRUSH hBrushBack;
 
 	HWND GetHWND() const;
 	void AppendListItem(const char *text, const char *numword);
@@ -2073,16 +2077,19 @@
 	ListBoxX() : lineHeight(10), fontCopy(0), technology(0), lb(0), unicodeMode(false),
 		desiredVisibleRows(9), maxItemCharacters(0), aveCharWidth(8),
 		parent(NULL), ctrlID(0), doubleClickAction(NULL), doubleClickActionData(NULL),
-		widestItem(NULL), maxCharWidth(1), resizeHit(0), wheelDelta(0) {
+		widestItem(NULL), maxCharWidth(1), resizeHit(0), wheelDelta(0), 
+		colourBG(RGB(215,215,215)), colourFG(RGB(0,0,0)), useThickFrame(1) {
 	}
 	~ListBoxX() override {
+	if (hBrushBack) ::DeleteObject(hBrushBack);
 		if (fontCopy) {
 			::DeleteObject(fontCopy);
 			fontCopy = 0;
 		}
 	}
+	void SetForeBack(ColourDesired fore, ColourDesired back);
 	void SetFont(Font &font) override;
-	void Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_) override;
+	void Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_, bool useThickFrame_) override;
 	void SetAverageCharWidth(int width) override;
 	void SetVisibleRows(int rows) override;
 	int GetVisibleRows() const override;
@@ -2112,12 +2119,14 @@
 const Point ListBoxX::TextInset(2, 0);
 const Point ListBoxX::ImageInset(1, 0);
 
+long windowOpts=WS_POPUP;
+	
 ListBox *ListBox::Allocate() {
 	ListBoxX *lb = new ListBoxX();
 	return lb;
 }
 
-void ListBoxX::Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_) {
+void ListBoxX::Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_, bool useThickFrame_) {
 	parent = &parent_;
 	ctrlID = ctrlID_;
 	location = location_;
@@ -2126,10 +2135,17 @@
 	technology = technology_;
 	HWND hwndParent = static_cast<HWND>(parent->GetID());
 	HINSTANCE hinstanceParent = GetWindowInstance(hwndParent);
+	if (useThickFrame_){
+		windowOpts=WS_POPUP | WS_THICKFRAME;
+		hBrushBack = reinterpret_cast<HBRUSH>(COLOR_WINDOW+1 );
+	} else {
+		hBrushBack = ::CreateSolidBrush(colourBG); // uses a grey shade for better visibility. 
+	}
+
 	// Window created as popup so not clipped within parent client area
 	wid = ::CreateWindowEx(
 		WS_EX_WINDOWEDGE, ListBoxX_ClassName, TEXT(""),
-		WS_POPUP | WS_THICKFRAME,
+		windowOpts,
 		100,100, 150,80, hwndParent,
 		NULL,
 		hinstanceParent,
@@ -2140,6 +2156,12 @@
 	location = Point::FromInts(locationw.x, locationw.y);
 }
 
+void ListBoxX::SetForeBack( ColourDesired fore, ColourDesired back) {
+	// convert to a COLORREF
+	 colourBG=RGB(back.GetRed(), back.GetGreen(), back.GetBlue());
+	 colourFG=RGB(fore.GetRed(), fore.GetGreen(), fore.GetBlue());
+}
+
 void ListBoxX::SetFont(Font &font) {
 	if (font.GetID()) {
 		if (fontCopy) {
@@ -2273,7 +2295,9 @@
 	images.Clear();
 }
 
+
 void ListBoxX::Draw(DRAWITEMSTRUCT *pDrawItem) {
+
 	if ((pDrawItem->itemAction == ODA_SELECT) || (pDrawItem->itemAction == ODA_DRAWENTIRE)) {
 		RECT rcBox = pDrawItem->rcItem;
 		rcBox.left += TextOffset();
@@ -2281,14 +2305,20 @@
 			RECT rcImage = pDrawItem->rcItem;
 			rcImage.right = rcBox.left;
 			// The image is not highlighted
-			::FillRect(pDrawItem->hDC, &rcImage, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+			//::FillRect(pDrawItem->hDC, &rcImage, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+			::FillRect(pDrawItem->hDC, &rcImage, hBrushBack);
 			::FillRect(pDrawItem->hDC, &rcBox, reinterpret_cast<HBRUSH>(COLOR_HIGHLIGHT+1));
-			::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHT));
-			::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHTTEXT));
-		} else {
-			::FillRect(pDrawItem->hDC, &pDrawItem->rcItem, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
-			::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOW));
-			::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOWTEXT));
+			//::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHT));
+			//::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHTTEXT));
+			::SetBkColor(pDrawItem->hDC,  colourBG);
+			::SetTextColor(pDrawItem->hDC, colourFG);
+		} else {
+			//::FillRect(pDrawItem->hDC, &pDrawItem->rcItem, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+			::FillRect(pDrawItem->hDC, &pDrawItem->rcItem, hBrushBack);
+		//::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOW));
+		//::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOWTEXT));
+			::SetBkColor(pDrawItem->hDC, colourBG); 
+			::SetTextColor(pDrawItem->hDC, colourFG); 
 		}
 
 		const ListItemData item = lti.Get(pDrawItem->itemID);
@@ -2410,7 +2440,7 @@
 
 void ListBoxX::AdjustWindowRect(PRectangle *rc) {
 	RECT rcw = RectFromPRectangle(*rc);
-	::AdjustWindowRectEx(&rcw, WS_THICKFRAME, false, WS_EX_WINDOWEDGE);
+	::AdjustWindowRectEx(&rcw, windowOpts, false, WS_EX_WINDOWEDGE);
 	*rc = PRectangle::FromInts(rcw.left, rcw.top, rcw.right, rcw.bottom);
 }
 
@@ -2640,7 +2670,9 @@
 	// unpainted area when at the end of a non-integrally sized list with a
 	// vertical scroll bar
 	RECT rc = { 0, 0, extent.x, extent.y };
-	::FillRect(bitmapDC, &rc, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+	
+	//::FillRect(bitmapDC, &rc, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+	::FillRect(bitmapDC, &rc,	hBrushBack);
 	// Paint the entire client area and vertical scrollbar
 	::SendMessage(lb, WM_PRINT, reinterpret_cast<WPARAM>(bitmapDC), PRF_CLIENT|PRF_NONCLIENT);
 	::BitBlt(hDC, 0, 0, extent.x, extent.y, bitmapDC, 0, 0, SRCCOPY);
