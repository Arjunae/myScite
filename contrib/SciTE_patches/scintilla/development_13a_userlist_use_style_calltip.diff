diff -Nurw scintilla/include/Platform.h scintilla_m/include/Platform.h
--- scintilla/include/Platform.h	2017-05-26 00:25:00.000000000 +0200
+++ scintilla_m/include/Platform.h	2017-12-05 20:45:20.000000000 +0100
@@ -422,6 +421,7 @@
 	virtual void ClearRegisteredImages()=0;
 	virtual void SetDoubleClickAction(CallBackAction, void *)=0;
 	virtual void SetList(const char* list, char separator, char typesep)=0;
+	virtual void SetForeBack(ColourDesired fore, ColourDesired back)=0;
 };
 
 /**
diff -Nurw scintilla/src/AutoComplete.cxx scintilla_m/src/AutoComplete.cxx
--- scintilla/src/AutoComplete.cxx	2017-05-26 00:25:00.000000000 +0200
+++ scintilla_m/src/AutoComplete.cxx	2017-12-05 20:39:30.000000000 +0100
@@ -292,3 +292,6 @@
 	}
 }
 
+void AutoComplete::SetForeBack( ColourDesired fore, ColourDesired back) {
+	lb->SetForeBack(fore, back);
+}
\ No newline at end of file
diff -Nurw scintilla/src/AutoComplete.h scintilla_m/src/AutoComplete.h
--- scintilla/src/AutoComplete.h	2017-05-26 00:25:00.000000000 +0200
+++ scintilla_m/src/AutoComplete.h	2017-12-05 20:46:00.000000000 +0100
@@ -86,6 +86,8 @@
 
 	/// Select a list element that starts with word as the current element
 	void Select(const char *word);
+	
+	void SetForeBack(ColourDesired fore, ColourDesired back);
 };
 
 #ifdef SCI_NAMESPACE
diff -Nurw scintilla/src/RESearch.cxx scintilla_m/src/RESearch.cxx
--- scintilla/src/RESearch.cxx	2017-05-26 00:25:02.000000000 +0200
+++ scintilla_m/src/RESearch.cxx	2017-11-24 22:05:46.000000000 +0100
@@ -128,7 +128,7 @@
  *                      by user setting. The word must also be preceded and/or
  *                      followed by any character outside those mentioned.
  *
- *      [11]    \l      a backslash followed by d, D, s, S, w or W,
+ *      [11]    \\l   a double backslash followed by d, D, s, S, w or W,
  *                      becomes a character class (both inside and
  *                      outside sets []).
  *                        d: decimal digits
diff -Nurw scintilla/src/ScintillaBase.cxx scintilla_m/src/ScintillaBase.cxx
--- scintilla/src/ScintillaBase.cxx	2017-05-26 00:25:02.000000000 +0200
+++ scintilla_m/src/ScintillaBase.cxx	2017-12-07 10:17:08.000000000 +0100
@@ -254,6 +254,7 @@
 			return;
 		}
 	}
+	
 	ac.Start(wMain, idAutoComplete, sel.MainCaret(), PointMainCaret(),
 				lenEntered, vs.lineHeight, IsUnicodeMode(), technology);
 
@@ -290,8 +291,13 @@
 	rcac.right = rcac.left + widthLB;
 	rcac.bottom = static_cast<XYPOSITION>(std::min(static_cast<int>(rcac.top) + heightLB, static_cast<int>(rcPopupBounds.bottom)));
 	ac.lb->SetPositionRelative(rcac, wMain);
-	ac.lb->SetFont(vs.styles[STYLE_DEFAULT].font);
-	unsigned int aveCharWidth = static_cast<unsigned int>(vs.styles[STYLE_DEFAULT].aveCharWidth);
+	ac.lb->SetFont(vs.styles[STYLE_CALLTIP].font);
+	
+	if ( vs.styles[STYLE_CALLTIP].back.AsLong() != vs.styles[STYLE_DEFAULT].back.AsLong())  {
+		ac.SetForeBack(vs.styles[STYLE_CALLTIP].fore, vs.styles[STYLE_CALLTIP].back);
+	}
+	
+	unsigned int aveCharWidth = static_cast<unsigned int>(vs.styles[STYLE_CALLTIP].aveCharWidth);
 	ac.lb->SetAverageCharWidth(aveCharWidth);
 	ac.lb->SetDoubleClickAction(AutoCompleteDoubleClick, this);
 
diff -Nurw scintilla/win32/PlatWin.cxx scintilla_m/win32/PlatWin.cxx
--- scintilla/win32/PlatWin.cxx	2017-05-26 00:25:02.000000000 +0200
+++ scintilla_m/win32/PlatWin.cxx	2017-12-07 09:29:40.000000000 +0100
@@ -2046,6 +2046,8 @@
 	Point dragOffset;
 	Point location;	// Caret location at which the list is opened
 	int wheelDelta; // mouse wheel residue
+	COLORREF colourBG;
+	COLORREF colourFG;
 
 	HWND GetHWND() const;
 	void AppendListItem(const char *text, const char *numword);
@@ -2073,7 +2076,8 @@
 	ListBoxX() : lineHeight(10), fontCopy(0), technology(0), lb(0), unicodeMode(false),
 		desiredVisibleRows(9), maxItemCharacters(0), aveCharWidth(8),
 		parent(NULL), ctrlID(0), doubleClickAction(NULL), doubleClickActionData(NULL),
-		widestItem(NULL), maxCharWidth(1), resizeHit(0), wheelDelta(0) {
+		widestItem(NULL), maxCharWidth(1), resizeHit(0), wheelDelta(0), 
+		colourBG(RGB(180,180,180)), colourFG(RGB(0,0,0)) {
 	}
 	~ListBoxX() override {
 		if (fontCopy) {
@@ -2081,6 +2085,7 @@
 			fontCopy = 0;
 		}
 	}
+	void SetForeBack(ColourDesired fore, ColourDesired back);
 	void SetFont(Font &font) override;
 	void Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_) override;
 	void SetAverageCharWidth(int width) override;
@@ -2129,7 +2135,7 @@
 	// Window created as popup so not clipped within parent client area
 	wid = ::CreateWindowEx(
 		WS_EX_WINDOWEDGE, ListBoxX_ClassName, TEXT(""),
-		WS_POPUP | WS_THICKFRAME,
+		WS_POPUP,
 		100,100, 150,80, hwndParent,
 		NULL,
 		hinstanceParent,
@@ -2140,6 +2146,12 @@
 	location = Point::FromInts(locationw.x, locationw.y);
 }
 
+void ListBoxX::SetForeBack( ColourDesired fore, ColourDesired back) {
+		// convert to a COLORREF
+	 colourBG=RGB(back.GetRed(), back.GetGreen(), back.GetBlue());
+	 colourFG=RGB(fore.GetRed(), fore.GetGreen(), fore.GetBlue());
+}
+
 void ListBoxX::SetFont(Font &font) {
 	if (font.GetID()) {
 		if (fontCopy) {
@@ -2274,6 +2286,7 @@
 }
 
 void ListBoxX::Draw(DRAWITEMSTRUCT *pDrawItem) {
+HBRUSH hBrushBack = CreateSolidBrush(colourBG);
 	if ((pDrawItem->itemAction == ODA_SELECT) || (pDrawItem->itemAction == ODA_DRAWENTIRE)) {
 		RECT rcBox = pDrawItem->rcItem;
 		rcBox.left += TextOffset();
@@ -2281,14 +2294,20 @@
 			RECT rcImage = pDrawItem->rcItem;
 			rcImage.right = rcBox.left;
 			// The image is not highlighted
-			::FillRect(pDrawItem->hDC, &rcImage, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+			//::FillRect(pDrawItem->hDC, &rcImage, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+			::FillRect(pDrawItem->hDC, &rcImage, hBrushBack);
 			::FillRect(pDrawItem->hDC, &rcBox, reinterpret_cast<HBRUSH>(COLOR_HIGHLIGHT+1));
-			::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHT));
-			::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHTTEXT));
+			//::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHT));
+			//::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_HIGHLIGHTTEXT));
+			::SetBkColor(pDrawItem->hDC,  colourBG);
+			::SetTextColor(pDrawItem->hDC, colourFG);
 		} else {
-			::FillRect(pDrawItem->hDC, &pDrawItem->rcItem, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
-			::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOW));
-			::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOWTEXT));
+			//::FillRect(pDrawItem->hDC, &pDrawItem->rcItem, reinterpret_cast<HBRUSH>(COLOR_WINDOW+1));
+			::FillRect(pDrawItem->hDC, &pDrawItem->rcItem, hBrushBack);
+		//::SetBkColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOW));
+		//::SetTextColor(pDrawItem->hDC, ::GetSysColor(COLOR_WINDOWTEXT));
+			::SetBkColor(pDrawItem->hDC, colourBG); 
+			::SetTextColor(pDrawItem->hDC, colourFG); 
 		}
 
 		const ListItemData item = lti.Get(pDrawItem->itemID);
@@ -2410,7 +2429,7 @@
 
 void ListBoxX::AdjustWindowRect(PRectangle *rc) {
 	RECT rcw = RectFromPRectangle(*rc);
-	::AdjustWindowRectEx(&rcw, WS_THICKFRAME, false, WS_EX_WINDOWEDGE);
+	::AdjustWindowRectEx(&rcw,0, false, WS_EX_WINDOWEDGE);
 	*rc = PRectangle::FromInts(rcw.left, rcw.top, rcw.right, rcw.bottom);
 }
 
