diff -Nurw scintilla-scite/src/SciTEProps.cxx scite/src/SciTEProps.cxx
--- scintilla-scite/src/SciTEProps.cxx	2017-11-08 13:21:16.000000000 +0100
+++ scite/src/SciTEProps.cxx	2017-11-08 13:15:34.000000000 +0100
@@ -54,17 +54,27 @@
 #include "SciTEBase.h"
 
 void SciTEBase::SetImportMenu() {
+// Reset Options->configFiles
 	for (int i = 0; i < importMax; i++) {
-		DestroyMenuItem(menuOptions, importCmdID + i);
+     DestroyMenuItem(menuOptions,1300+ i);
 	}
+  //importCmdID, FillUp above Menu with property fileNames
 	if (!importFiles.empty()) {
 		for (int stackPos = 0; stackPos < static_cast<int>(importFiles.size()) && stackPos < importMax; stackPos++) {
 			int itemID = importCmdID + stackPos;
 			if (importFiles[stackPos].IsSet()) {
-				GUI::gui_string entry = localiser.Text("Open");
-				entry += GUI_TEXT(" ");
-				entry += importFiles[stackPos].Name().AsInternal();
-				SetMenuItem(menuOptions, IMPORT_START + stackPos, itemID, entry.c_str());
+				GUI::gui_string sEntry = importFiles[stackPos].Name().AsInternal();
+				GUI::gui_string sFile= sEntry.substr(sEntry.rfind(GUI_TEXT("/"))+1, GUI::gui_string::npos);
+				sFile= sFile.substr(sFile.rfind(GUI_TEXT("/"))+1,GUI::gui_string::npos);
+				sFile=localiser.Text("Open") + GUI_TEXT(" ") + sFile;
+
+				//  Depends on names to display properties sorted.
+				if (sFile.find(GUI_TEXT("theme")) != GUI::gui_string::npos || sFile.find(GUI_TEXT("ettings")) != GUI::gui_string::npos || sFile.find(GUI_TEXT("ools")) != GUI::gui_string::npos) {
+					SetMenuItemNew(menuOptions, 1, IMPORT_START+stackPos, itemID, sFile.c_str());
+				} else {
+					SetMenuItemNew(menuOptions, 2, stackPos, itemID, sFile.c_str());
+				}
+
 			}
 		}
 	}
@@ -106,21 +116,24 @@
 const GUI::gui_char propLocalFileName[] = GUI_TEXT("SciTE.properties");
 const GUI::gui_char propDirectoryFileName[] = GUI_TEXT("SciTEDirectory.properties");
 
+/** 
+Push system env on propsPlatform. Format Key=value
+*/
 void SciTEBase::ReadEnvironment() {
 #if defined(__unix__)
 	extern char **environ;
-	char **e = environ;
+	char **env = environ;
 #else
-	char **e = _environ;
+	char **env = _environ;
 #endif
-	for (; e && *e; e++) {
+	for (; env && *env; env++) {
 		char key[1024];
-		char *k = *e;
-		char *v = strchr(k, '=');
-		if (v && (static_cast<size_t>(v - k) < sizeof(key))) {
-			memcpy(key, k, v - k);
-			key[v - k] = '\0';
-			propsPlatform.Set(key, v + 1);
+		char *me = *env; 
+		char *value = strchr(me, '=');
+		if (value && (static_cast<int>(value - me) < static_cast<int>(sizeof(key)))) {
+			memcpy(key, me, value - me);
+			key[value - me] = '\0';
+			propsPlatform.Set(key, value + 1);
 		}
 	}
 }
