diff -Nurw scintilla-scite/src/SciTE.h scite/src/SciTE.h
--- scintilla-scite/src/SciTE.h	2016-12-21 04:18:32.000000000 +0100
+++ scite/src/SciTE.h	2016-12-21 04:19:10.000000000 +0100
@@ -54,7 +54,7 @@
 #define IDM_ENCODING_UCOOKIE	154
 
 #define MRU_START	17
-#define IMPORT_START 20
+#define IMPORT_START 8 // Itemposition to add config filenames (Menu-Options-Config Files)
 #define TOOLS_START 4
 
 // Edit

diff -Nurw scintilla-scite/gtk/SciTEGTK.cxx scite/gtk/SciTEGTK.cxx
--- scintilla-scite/gtk/SciTEGTK.cxx	2017-02-26 12:52:52.000000000 +0100
+++ scite/gtk/SciTEGTK.cxx	2017-02-26 07:28:04.000000000 +0100
@@ -573,8 +578,12 @@
 	bool UpdateOutputSize();
 
 	GtkWidget *MenuItemFromAction(int itemID);
+	virtual void SetMenuItemNew(int menuNumber, int SubMenuNumber, int position, int itemID,
+	                         const char *text, const char *mnemonic = 0);
+
 	virtual void SetMenuItem(int menuNumber, int position, int itemID,
 	                         const char *text, const char *mnemonic = 0);
+
 	virtual void DestroyMenuItem(int menuNumber, int itemID);
 	virtual void CheckAMenuItem(int wIDCheckItem, bool val);
 	virtual void EnableAMenuItem(int wIDCheckItem, bool val);
@@ -1309,6 +1338,48 @@
 	return sCaption;
 }
 
+void SciTEGTK::SetMenuItemNew(int, int, int, int itemID, const char *text, const char *mnemonic) {
+	DestroyMenuItem(0, itemID);
+
+	// On GTK+ the menuNumber and position are ignored as the menu item already exists and is in the right
+	// place so only needs to be shown and have its text set.
+
+	std::string itemText = GtkFromWinCaption(text);
+
+	long keycode = 0;
+	if (mnemonic && *mnemonic) {
+		keycode = SciTEKeys::ParseKeyCode(mnemonic);
+		if (keycode) {
+			itemText += " ";
+			itemText += mnemonic;
+		}
+		// the keycode could be used to make a custom accelerator table
+		// but for now, the menu's item data is used instead for command
+		// tools, and for other menu entries it is just discarded.
+	}
+
+	// Reorder shift and ctrl indicators for compatibility with other menus
+	Substitute(itemText, "Ctrl+Shift+", "Shift+Ctrl+");
+
+	GtkWidget *item = MenuItemFromAction(itemID);
+	if (item) {
+		GList *al = gtk_container_get_children(GTK_CONTAINER(item));
+		for (unsigned int ii = 0; ii < g_list_length(al); ii++) {
+			gpointer d = g_list_nth(al, ii);
+			GtkWidget **w = (GtkWidget **)d;
+			gtk_label_set_text_with_mnemonic(GTK_LABEL(*w), itemText.c_str());
+		}
+		g_list_free(al);
+		gtk_widget_show(item);
+
+		if (itemID >= IDM_TOOLS && itemID < IDM_TOOLS + toolMax) {
+			// Stow the keycode for later retrieval.
+			// Do this even if 0, in case the menu already existed (e.g. ModifyMenu)
+			g_object_set_data(G_OBJECT(item), "key", GINT_TO_POINTER(static_cast<int>(keycode)));
+		}
+	}
+}
+
 void SciTEGTK::SetMenuItem(int, int, int itemID, const char *text, const char *mnemonic) {
 	DestroyMenuItem(0, itemID);
 
diff -Nurw scintilla-scite/src/SciTEBase.cxx scite/src/SciTEBase.cxx
--- scintilla-scite/src/SciTEBase.cxx	2017-02-26 12:53:08.000000000 +0100
+++ scite/src/SciTEBase.cxx	2017-02-26 10:51:16.000000000 +0100
@@ -4299,7 +4299,7 @@
 }
 
 void SciTEBase::UIAvailable() {
-	SetImportMenu();
+	SetImportMenu(props.GetInt("menu.options.showUserProps"));
 	if (extender) {
 		SetHomeProperties();
 		extender->Initialise(this);
diff -Nurw scintilla-scite/src/SciTEBase.h scite/src/SciTEBase.h
--- scintilla-scite/src/SciTEBase.h	2017-02-26 12:52:52.000000000 +0100
+++ scite/src/SciTEBase.h	2017-02-26 10:49:38.000000000 +0100
@@ -824,6 +824,8 @@
 	virtual void SizeContentWindows() = 0;
 	virtual void SizeSubWindows() = 0;
 
+	virtual void SetMenuItemNew(int menuNumber, int subMenuNumber, int position, int itemID,
+		const GUI::gui_char *text, const GUI::gui_char *mnemonic = 0) = 0;
 	virtual void SetMenuItem(int menuNumber, int position, int itemID,
 		const GUI::gui_char *text, const GUI::gui_char *mnemonic = 0) = 0;
 	virtual void RedrawMenu() {}
@@ -857,7 +859,7 @@
 	void AssignKey(int key, int mods, int cmd);
 	void ViewWhitespace(bool view);
 	void SetAboutMessage(GUI::ScintillaWindow &wsci, const char *appTitle);
-	void SetImportMenu();
+	void SetImportMenu(int iShow);
 	void ImportMenu(int pos);
 	void SetLanguageMenu();
 	void SetPropertiesInitial();
diff -Nurw scintilla-scite/src/SciTEIO.cxx scite/src/SciTEIO.cxx
--- scintilla-scite/src/SciTEIO.cxx	2016-10-16 04:59:54.000000000 +0200
+++ scite/src/SciTEIO.cxx	2017-02-26 10:45:06.000000000 +0100
@@ -1005,7 +1005,7 @@
 
 void SciTEBase::ReloadProperties() {
 	ReadGlobalPropFile();
-	SetImportMenu();
+	SetImportMenu(props.GetInt("menu.options.showUserProps"));
 	ReadLocalPropFile();
 	ReadAbbrevPropFile();
 	ReadProperties();
diff -Nurw scintilla-scite/src/SciTEProps.cxx scite/src/SciTEProps.cxx
--- scintilla-scite/src/SciTEProps.cxx	2017-02-26 12:52:52.000000000 +0100
+++ scite/src/SciTEProps.cxx	2017-02-26 10:40:08.000000000 +0100
@@ -52,10 +52,13 @@
 #include "MatchMarker.h"
 #include "SciTEBase.h"
 
-void SciTEBase::SetImportMenu() {
+void SciTEBase::SetImportMenu(int iShow) {
+// Reset Options->configFiles
+    DestroyMenuItem(menuOptions,222000); // How to toggle Branch visibility ?
 	for (int i = 0; i < importMax; i++) {
-		DestroyMenuItem(menuOptions, importCmdID + i);
+     DestroyMenuItem(menuOptions,1300+ i);
 	}
+  //importCmdID, FillUp above Menu with property fileNames
 	if (!importFiles.empty()) {
 		for (int stackPos = 0; stackPos < static_cast<int>(importFiles.size()) && stackPos < importMax; stackPos++) {
 			int itemID = importCmdID + stackPos;
@@ -63,7 +66,13 @@
 				GUI::gui_string entry = localiser.Text("Open");
 				entry += GUI_TEXT(" ");
 				entry += importFiles[stackPos].Name().AsInternal();
-				SetMenuItem(menuOptions, IMPORT_START + stackPos, itemID, entry.c_str());
+				std::string sEntry= GUI::UTF8FromString(entry);
+				if (iShow==0) {
+					if (sEntry.find("theme") != std::string::npos or sEntry.find("ddons") != std::string::npos)
+						SetMenuItemNew(menuOptions, 9, IMPORT_START+stackPos, itemID, entry.c_str());
+					}
+				if (iShow==1)
+						SetMenuItemNew(menuOptions, 9, IMPORT_START+stackPos, itemID, entry.c_str()); 
 			}
 		}
 	}
@@ -105,21 +114,24 @@
 const GUI::gui_char propLocalFileName[] = GUI_TEXT("SciTE.properties");
 const GUI::gui_char propDirectoryFileName[] = GUI_TEXT("SciTEDirectory.properties");
 
+/** 
+Push system env on propsPlatform. Format Key=value
+*/
 void SciTEBase::ReadEnvironment() {
 #if defined(__unix__)
 	extern char **environ;
-	char **e = environ;
+	char **env = environ;
 #else
-	char **e = _environ;
+	char **env = _environ;
 #endif
-	for (; e && *e; e++) {
+	for (; env && *env; env++) {
 		char key[1024];
-		char *k = *e;
-		char *v = strchr(k, '=');
-		if (v && (static_cast<size_t>(v - k) < sizeof(key))) {
-			memcpy(key, k, v - k);
-			key[v - k] = '\0';
-			propsPlatform.Set(key, v + 1);
+		char *me = *env; 
+		char *value = strchr(me, '=');
+		if (value && (static_cast<int>(value - me) < static_cast<int>(sizeof(key)))) {
+			memcpy(key, me, value - me);
+			key[value - me] = '\0';
+			propsPlatform.Set(key, value + 1);
 		}
 	}
 }
Binary files scintilla-scite/win32/buttons.bmp and scite/win32/buttons.bmp differ
diff -Nurw scintilla-scite/win32/makefile scite/win32/makefile
--- scintilla-scite/win32/makefile	2016-10-16 04:59:54.000000000 +0200
+++ scite/win32/makefile	2017-02-26 11:50:48.000000000 +0100
@@ -27,7 +27,7 @@
 endif
 endif
 else
-	DEL = rm -f
+	DEL = del /f /q
 	COPY = cp -a
 	UXLIB:=-luxtheme
 endif
@@ -74,7 +74,7 @@
 
 CXXFLAGS = $(CFLAGS) -pedantic --std=gnu++11
 
-LDFLAGS=-mwindows -lmsimg32 -lcomctl32 -limm32 -lole32 -luuid -loleaut32 $(UXLIB) $(LUA_LDFLAGS)
+LDFLAGS=-mwindows -lmsimg32 -lcomctl32 -limm32 -lole32 -luuid -loleaut32 --static $(UXLIB) $(LUA_LDFLAGS)
 
 .cxx.o:
 	$(CXX) $(CXXFLAGS) -c $< -o $@
diff -Nurw scintilla-scite/win32/SciTERes.rc scite/win32/SciTERes.rc
--- scintilla-scite/win32/SciTERes.rc	2017-02-26 12:53:08.000000000 +0100
+++ scite/win32/SciTERes.rc	2017-02-24 19:18:42.000000000 +0100
@@ -143,6 +143,8 @@
 	MENUITEM "Wrap Out&put",			IDM_WRAPOUTPUT
 	MENUITEM "&Read-Only",				IDM_READONLY
 	MENUITEM SEPARATOR
+	POPUP "Editor"
+  BEGIN
 	POPUP "&Line End Characters"
 	BEGIN
 		MENUITEM "CR &+ LF",	IDM_EOL_CRLF
@@ -153,15 +155,19 @@
 	MENUITEM SEPARATOR
 	MENUITEM "Change Inden&tation Settings...\tCtrl+Shift+I",	IDM_TABSIZE
 	MENUITEM "Use &Monospaced Font\tCtrl+F11",	IDM_MONOFONT
+	END
 	MENUITEM SEPARATOR
-	MENUITEM "Open Local &Options File",		IDM_OPENLOCALPROPERTIES
-	MENUITEM "Open &Directory Options File",		IDM_OPENDIRECTORYPROPERTIES
+  POPUP "Config Files"
+  BEGIN
+//    MENUITEM "Open Local Options File",		IDM_OPENLOCALPROPERTIES
+//    MENUITEM "Open Directory Options File",		IDM_OPENDIRECTORYPROPERTIES
 	MENUITEM "Open &User Options File",		IDM_OPENUSERPROPERTIES
 	MENUITEM "Open &Global Options File",		IDM_OPENGLOBALPROPERTIES
 	MENUITEM "Open A&bbreviations File",		IDM_OPENABBREVPROPERTIES
-	MENUITEM "Open Lua Startup Scr&ipt", 		IDM_OPENLUAEXTERNALFILE
+//	MENUITEM "Open Lua Startup Scr&ipt", 		IDM_OPENLUAEXTERNALFILE
+	END
 	MENUITEM SEPARATOR
-END // used: abcghlmoprstux
+END // used: abcghilmprstux
 
 POPUP "&Language"
 BEGIN
 
diff -Nurw scintilla-scite/win32/SciTEWin.h scite/win32/SciTEWin.h
--- scintilla-scite/win32/SciTEWin.h	2017-02-26 12:52:52.000000000 +0100
+++ scite/win32/SciTEWin.h	2017-02-26 10:53:34.000000000 +0100
@@ -253,6 +253,9 @@
 	virtual void SizeContentWindows();
 	virtual void SizeSubWindows();
 
+	virtual void SetMenuItemNew(int menuNumber, int subMenuNumber, int position, int itemID,
+	                         const GUI::gui_char *text, const GUI::gui_char *mnemonic = 0);
+
 	virtual void SetMenuItem(int menuNumber, int position, int itemID,
 	                         const GUI::gui_char *text, const GUI::gui_char *mnemonic = 0);
 	virtual void RedrawMenu();
diff -Nurw scintilla-scite/win32/SciTEWinBar.cxx scite/win32/SciTEWinBar.cxx
--- scintilla-scite/win32/SciTEWinBar.cxx	2017-02-26 12:52:52.000000000 +0100
+++ scite/win32/SciTEWinBar.cxx	2017-02-26 10:55:38.000000000 +0100
@@ -630,7 +630,46 @@
 	delete []tbb;
 	CheckMenus();
 }
+void SciTEWin::SetMenuItemNew(int menuNumber, int subMenuNumber, int position, int itemID,
+                           const GUI::gui_char *text, const GUI::gui_char *mnemonic) {
+	// On Windows the menu items are modified if they already exist or are created
+    HMENU hmenu = ::GetSubMenu(::GetMenu(MainHWND()), menuNumber);
+ // About to modify a submenu (eg Options-> Config Files)   
+	if(subMenuNumber >0) {
+    HMENU smenu = ::GetSubMenu(hmenu, subMenuNumber);
+    hmenu = smenu;
+  }
+	GUI::gui_string sTextMnemonic = text;
+	long keycode = 0;
+	if (mnemonic && *mnemonic) {
+		keycode = SciTEKeys::ParseKeyCode(GUI::UTF8FromString(mnemonic).c_str());
+		if (keycode) {
+			sTextMnemonic += GUI_TEXT("\t");
+			sTextMnemonic += mnemonic;
+		}
+		// the keycode could be used to make a custom accelerator table
+		// but for now, the menu's item data is used instead for command
+		// tools, and for other menu entries it is just discarded.
+	}
+  
+	UINT typeFlags = (text[0]) ? MF_STRING : MF_SEPARATOR;
+	if (::GetMenuState(hmenu, itemID, MF_BYCOMMAND) == (UINT)(-1)) {
+		// Not present so insert
+		::InsertMenuW(hmenu, position, MF_BYPOSITION | typeFlags, itemID, sTextMnemonic.c_str());
+	} else {
+		::ModifyMenuW(hmenu, itemID, MF_BYCOMMAND | typeFlags, itemID, sTextMnemonic.c_str());
+	}
 
+	if (itemID >= IDM_TOOLS && itemID < IDM_TOOLS + toolMax) {
+		// Stow the keycode for later retrieval.
+		// Do this even if 0, in case the menu already existed (e.g. ModifyMenu)
+		MENUITEMINFO mii;
+		mii.cbSize = sizeof(MENUITEMINFO);
+		mii.fMask = MIIM_DATA;
+		mii.dwItemData = keycode;
+		::SetMenuItemInfo(hmenu, itemID, FALSE, &mii);
+	}
+}
 
 
 void SciTEWin::SetMenuItem(int menuNumber, int position, int itemID,
