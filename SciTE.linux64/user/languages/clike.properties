# Define SciTE settings for C++, C, Ch, IDL, Flash (ActionScript 3) files.
# CleanUp Okt 2016, Marcedo@HabmalneFrage.de
# -> extrapolated c#, java and javascript handling for better maintainability.

file.patterns.cpp=*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hpp;*.hxx;*.ipp;*.m;*.mm
file.patterns.rc=*.rc;*.rc2;*.dlg;*.def
file.patterns.idl=*.idl;*.odl

# ---- C-Like Languages
# go (used on google)
file.patterns.go=*.go
# vala (used on gnome gtk+ )
file.patterns.vala=*.vala
# pike ( Macintosh Platform )
file.patterns.pike=*.pike
# swift  ( Macintosh Platform )
file.patterns.swift=*.swift
# actionscript 3 (adobe/flex/haxe) (ECMA4)
file.patterns.flash=*.as;*.asc;*.jsfl
# pln, inc and t = SilkTest (4Test, automated function and regression testing)
file.patterns.test=*.pln;*.inc;*.t
# sma files (SMAll script C-like)
file.patterns.sma=*.sma
# ch (c/cpp scripts)
file.patterns.ch=*.ch;*.chf;*.chs

file.patterns.c.like=$(file.patterns.go);$(file.patterns.vala);$(file.patterns.pike);$(file.patterns.flash);$(file.patterns.sma);$(file.patterns.ch)
*source.patterns.cpp=$(file.patterns.cpp);
*source.patterns.resource=$(file.patterns.rc);
*source.patterns.go=$(file.patterns.go);

*filter.cpp=C/C++ ( c cpp cxx hpp h rc def idl )|$(file.patterns.cpp);$(file.patterns.rc);$(file.patterns.idl)|
*filter.clike=C-Based ( vala go pike swift flash )|$(file.patterns.c.like)|
*language.clike=&C / C++|cpp||

shbang.tcc=cpp
shbang.tinycc=cpp

lexer.$(file.patterns.cpp)=cpp
lexer.$(file.patterns.rc)=cpp
lexer.$(file.patterns.idl)=cpp
# moved c_sharp
lexer.$(file.patterns.test)=cpp
# moved javascript
# moved java
lexer.$(file.patterns.flash)=cpp
lexer.$(file.patterns.vala)=cpp
lexer.$(file.patterns.go)=cpp
lexer.$(file.patterns.pike)=cpp

# todo: reimport keywords based on http://en.cppreference.com/w/
keywordclass.cpp.reserved=\
auto break bool case char const continue default do double else enum extern float for goto if int long \
register return short signed sizeof static switch typedef union unsigned void while class struct new try \
catch alignas alignof asm catch char16_t char32_t const_cast constexpr decltype delete double dynamic_cast \
explicit export true false final friend inline mutable namespace noexcept nullptr operator override private \
protected public reinterpret_cast static_assert static_cast template this thread_local throw try typeid \
typename using virtual volatile int8_t uint8_t int16_t uint16_t int32_t uint32_t int64_t uint64_t int_least8_t \
uint_least8_t int_least16_t uint_least16_t int_least32_t uint_least32_t int_least64_t uint_least64_t int_fast8_t \
uint_fast8_t int_fast16_t uint_fast16_t int_fast32_t uint_fast32_t int_fast64_t uint_fast64_t intptr_t uintptr_t \
intmax_t uintmax_t wint_t wchar_t wctrans_t wctype_t size_t time_t std string __LINE__ __FILE__ __DATE__ __TIME__ __STDC__ \
FENV_ACCESS FE_ALL_EXCEPT FE_DFL_ENV FE_DIVBYZERO FE_DOWNWARD FE_INEXACT FE_INVALID FE_OVERFLOW FE_TONEAREST FE_TOWARDZERO \
FE_UNDERFLOW FE_UPWARD NULL HUGE_VAL HUGE_VALF HUGE_VALL INFINITY NAN HWND LPSTR LPCSTR LPWSTR LPCWSTR HANDLE WCHAR WORD DWORD \
ULONG UINT USHORT LONG PVOID TRUE FALSE FILE BOOL BUFSIZ EOF FILENAME_MAX FOPEN_MAX L_tmpnam TMP_MAX EXIT_FAILURE EXIT_SUCCESS \
MB_CUR_MAX RAND_MAX CLOCKS_PER_SEC WCHAR_MAX WCHAR_MIN WEOF ATOMIC_FLAG_INIT ATOMIC_VAR_INIT

# CPP11
keywordclass.cpp11=\
max_align_t nullptr_t array adopt_lock_t allocator_arg_t allocator_traits allocate_shared all_of any_of addressof bind bit_and bit_or bit_xor bad_function_call bad_weak_ptr \
bad_array_new_length bernoulli_distribution binomial_distribution basic_regex begin condition_variable condition_variable_any cv_status common_type  common_type codecvt_utf16 \
codecvt_utf8 codecvt_utf8_utf16 codecvt_mode cref cauchy_distribution chi_squared_distribution cmatch csub_match current_exception const_pointer_cast copy_if copy_n call_once \
defer_lock_t duration_values default_delete discrete_distribution default_random_engine discard_block_engine declval declare_no_pointers duration_cast dynamic_pointer_cast defaultfloat \
declare_reachable enable_shared_from_this exponential_distribution extreme_value_distribution error_category error_code error_condition forward_list future future_error future_errc \
future_status function fisher_f_distribution future_category find_if_not forward_as_tuple gamma_distribution geometric_distribution get_terminate get_unexpected get_pointer_safety \
get_new_handler generic_category get_deleter get_money get_time generate_canonical high_resolution_clock hours hash hexfloat io_errc is_heap is_heap_until is_permutation is_sorted \
is_sorted_until is_bind_expression is_placeholder initializer_list independent_bits_engine is_error_code_enum is_error_condition_enum ignore iostream_category iota is_partitioned \
knuth_b launch lock_guard lognormal_distribution linear_congruential_engine mutex minmax_element move_backward microseconds milliseconds minutes mersenne_twister_engine minstd_rand \
minstd_rand0 mt19937 mt19937_64 match_results make_shared make_move_iterator minmax make_exception_ptr make_error_code make_error_condition mem_fn move_if_noexcept make_tuple nanoseconds \
nested_exception negative_binomial_distribution notify_all_at_thread_exit none_of once_flag owner_less packaged_task promise partition_copy placeholders pointer_traits pointer_safety \
piecewise_constant_distribution piecewise_linear_distribution poisson_distribution piecewise_construct_t proj put_money put_time partition_point recursive_mutex recursive_timed_mutex \
reference_wrapper random_device ranlux24 ranlux24_base ranlux48 ranlux48_base ratio_add ratio_divide ratio_equal ratio_greater ratio_greater_equal ratio_less ratio_less_equal ratio_multiply \
ratio_not_equal ratio_subtract regex_constants regex_error regex_iterator regex_token_iterator regex_traits regex_replace regex_match regex_search rethrow_if_nested rethrow_exception \
shared_future steady_clock system_clock shared_ptr student_t_distribution shuffle_order_engine subtract_with_carry_engine seed_seq sub_match ssub_match system_error system_category \
static_pointer_cast stoi try_to_lock_t this_thread treat_as_floating_point to_string to_wstring tuple tuple_element tuple_size type_index time_point_cast try_lock throw_with_nested \
tuple_cat tie unordered_map unordered_multimap unordered_multiset unordered_set unique_lock unique_ptr uses_allocator uniform_int_distribution uniform_real_distribution u16string \
u32string uninitialized_copy_n undeclare_no_pointers undeclare_reachable wbuffer_convert wstring_convert weibull_distribution wcmatch wcsub_match wregex wsmatch wssub_match \
allocator_traits alignment_of add_const add_cv add_lvalue_reference add_pointer add_rvalue_reference add_volatile aligned_storage aligned_union basic_regex conditional decay extent \
enable_if false_type has_virtual_destructor integral_constant is_abstract is_arithmetic is_array is_assignable is_base_of is_class is_compound is_const is_constructible \
is_convertible is_copy_assignable is_copy_constructible is_default_constructible is_destructible is_empty is_enum is_floating_point is_function is_fundamental is_integral \
is_literal_type is_lvalue_reference is_member_function_pointer is_member_object_pointer is_member_pointer is_move_assignable is_move_constructible is_nothrow_assignable \
is_nothrow_constructible is_nothrow_copy_assignable is_nothrow_copy_constructible is_nothrow_default_constructible is_nothrow_destructible is_nothrow_move_assignable \
is_nothrow_move_constructible is_object is_pod is_pointer is_polymorphic is_reference is_rvalue_reference is_same is_scalar is_signed is_standard_layout is_trivial \
is_trivially_assignable is_trivially_constructible is_trivially_copyable is_trivially_copy_assignable is_trivially_copy_constructible is_trivially_default_constructible \
is_trivially_destructible is_trivially_move_assignable is_trivially_move_constructible is_union is_unsigned is_void is_volatile make_signed make_unsigned pointer_traits rank \
remove_all_extents remove_const remove_cv remove_extent remove_pointer remove_reference remove_volatile result_of true_type underlying_type is_null_pointer stack std streambuf \
stringstream student_t_distribution sub_match substr subtract_with_carry subtract_with_carry_01 subtract_with_carry_engine swap swap_ranges sync_none sync_per_container \
sync_per_thread sync_shared system_error time_base time_get time_get_byname time_put time_put_byname to_array tr1 transform tuple tuple_element tuple_size type_info unary_function \
unary_negate unchecked_uninitialized_copy unchecked_uninitialized_fill_n underflow_error uniform_int  uniform_real uninitialized_copy uninitialized_fill uninitialized_fill_n unique \
unique_copy upper_bound valarray value_type variate_generator vector wcerr wcin wcout weak_ptr wfilebuf wfstream wifstream wiostream wistream wofstream wregex xor_combine wsprintf lstrcpy lstrcat strcmpin strscan sprintf

# C99
keywordclass.c99.math=atol atoi atof asctime acos cos cosh sin sinh tan tanh asin atan abs acosh asinh atanh atan2 ceil exp frexp \
ldexp exp2 log log10 modf pow sqrt fabs fmod floor frexp ldiv div rand srand \
keywordclass.c99.file=fclose feof ferror fflush ftell fprintf fscanf fsetpos fgetpos fseek fread fesetenv feupdateenv fesetexceptflag fputws \
clearerr remove rename rewind setbuf setvbuf tmpfile tmpnam fpos_t fopen freopen fwrite \
keywordclass.c99.char=printf scanf fgetc fgets fputc fputs getc getchar gets putc putchar puts ungetc getc getchar gets putc putchar puts ungetc \
keywordclass.c99.string=atof atoi atol strtod strtol strtoul memchr memcmp memcpy memmove memset strcat strncat strchr strcmp strncmp strcoll strcpy strncpy \
strcspn strerror strlen strpbrk strrchr strspn strstr strok strxfrm mblen mbstowcs mbtowc wcstombs wctomb \
keywordclass.c99.mem=calloc free malloc realloc \
keywordclass.c99.env=abort atexit exit getenv system \
keywordclass.c99.misc=bsearch qsort asctime clock ctime difftime gmtime localtime mktime strftime time assert atexit abort clock_t cbrt copysign \
calloc double_t div_t div errno erfc erf expm1 fenv_t fexcept_t fpclassify fdim fmax fmin fegetenv feholdexcept fegetexceptflag fgetwc fwprintf \
fwscanf fwide feclearexcept feraiseexcept fetestexcept fesetround fegetround free fputwc fgetws getwchar hypot isfinite isgreater isgreaterequal \
isinf isless islessequal islessgreater isnan isnormal isunordered exit getenv labs ldiv perror ldexp log \

keywordclass.c99=$(keywordclass.c99.math) $(keywordclass.c99.file) $(keywordclass.c99.char) $(keywordclass.c99.string) $(keywordclass.c99.mem) $(keywordclass.c99.env) $(keywordclass.c99.misc)

directives.objective.c=\
@class @defs @protocol @required @optional @end @interface @public @package @protected @private @property \
@implementation @synthesize @dynamic @throw @try @catch @finally @synchronized @autoreleasepool \
@selector @encode @compatibility_alias

# Since Objective C and C++ share the .h extension, allow Objective C directives as keywords
# For stricter display of pure C++, specify keywords.$(file.patterns.cpp)=$(keywordclass.cpp)
keywords.$(file.patterns.cpp)=$(keywordclass.cpp.reserved) $(directives.objective.c)

#keywords2 is for highlighting user defined keywords- or function calls or similar
keywords2.$(file.patterns.cpp)=$(keywordclass.cpp11) $(keywordclass.c99)

# keywords3 is for doc comment keywords-, highlighted in style 17
#CPP doxygen
file.patterns.doxygen.langs=$(file.patterns.cpp);$(file.patterns.java)
keywordclass.doxygen=a addindex addtogroup anchor arg attention \
author b brief bug c class code date def defgroup deprecated dontinclude \
e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example \
exception f$ f[ f] file fn hideinitializer htmlinclude htmlonly if image include \
ingroup internal invariant interface latexonly li line link mainpage name namespace \
nosubgrouping note overload p page par param param[in] param[out] post pre ref \
relates remarks return retval sa section see showinitializer since skip skipline \
struct subsection test throw throws todo typedef union until var verbatim \
verbinclude version warning weakgroup $ @ \ & < > # { }
keywords3.$(file.patterns.doxygen.langs)=$(keywordclass.doxygen)

# -keywords5 is for preprocessor definitions- and will cause inactive code
# to be greyed out. This setting is a space separated list of definitions
# where a definition may be of the form NAME=VALUE or simply NAME.
# keywords5.$(file.patterns.cpp)=_MSC_VER SCI_NAMESPACE GTK_MAJOR_VERSION=2

word.characters.$(file.patterns.cpp)=,$(chars.alpha)$(chars.numeric)_#.

# The position where ctrl-q inserts the comment char (Edit-> BlockComment - ctrl-q)
comment.block.at.line.start.cpp=1
comment.block.cpp=//~
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/
comment.box.start.cpp=/*
comment.box.middle.cpp= *
comment.box.end.cpp= */

# : for jQuery Selectors
autocomplete.cpp.start.characters=$(chars.alpha)$(chars.numeric)$:
autocomplete.cpp.fillups=
# .ignorecase for javascript
autocomplete.cpp.ignorecase=1
autocomplete.cpp.choose.single=0

#------ \t\n makes a calltip multiline
calltip.cpp.use.escapes=1
calltip.cpp.word.characters=$(chars.alpha)$(chars.numeric)_:
calltip.cpp.ignorecase=1
calltip.cpp.end.definition=)
calltip.cpp.parameters.start=@ (
calltip.cpp.parameters.separators=,
calltip.cpp.parameters.end=@)

api.$(file.patterns.cpp)=\
$(SciteDefaultHome)/user/languages/cpp_withdoc_05_2017.api;$(SciteDefaultHome)/user/languages/cpp11_withdoc_05_2017.api;\
$(SciteDefaultHome)/languages/cpp_withdoc_05_2017.api;$(SciteDefaultHome)/languages/cpp11_withdoc_05_2017.api


# Folds
#fold.cpp.syntax.based=0
#fold.comment=0
#fold.cpp.comment.multiline=0
#fold.cpp.comment.explicit=0
#defaults for fold.cpp.explicit.start=//{ and fold.cpp.explicit.end=//}
#  can be replaced by defining custom strings, e.g. //[ and //]
#fold.cpp.explicit.start=//[
#fold.cpp.explicit.end=//]
#if fold strings are set to something like /*{{{ and /*}}} (Origami/WinF style fold strings), enable
#  fold.cpp.explicit.anywhere, allowing explicit fold points being anywhere, not just in line comments
#fold.cpp.explicit.anywhere=1
#fold.preprocessor=1
#fold.compact=1
#fold.at.else=1

file.patterns.c.except.cpp=$(file.patterns.idl);$(file.patterns.flash);$(file.patterns.java);$(file.patterns.ch)
statement.indent.$(file.patterns.c.except.cpp)=5 case default do else for if while
statement.indent.$(file.patterns.cpp)=5 case default do else for if private protected public while
statement.end.$(file.patterns.c.like)=10 ;
statement.lookback.$(file.patterns.c.like)=20
block.start.$(file.patterns.c.like)=10 {
block.end.$(file.patterns.c.like)=10 }

#styling.within.preprocessor=1
preprocessor.symbol.$(file.patterns.cpp)=#
preprocessor.start.$(file.patterns.cpp)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cpp)=else elif
preprocessor.end.$(file.patterns.cpp)=endif

keywordclass.ch=\
auto array bool break case char class complex ComplexInf ComplexNaN const continue \
default delete do double else enum export extern float for foreach goto if Inf inline int \
long namespace NaN new NULL private public register restrict return short signed sizeof \
static string_t struct switch this typedef union unsigned using void volatile wchar_t while __declspec
keywords.$(file.patterns.ch)=$(keywordclass.ch)
word.chars.ch=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.ch)=$(word.chars.cxx)
comment.block.ch=//~
#comment.block.at.line.start.ch=1
comment.stream.start.ch=/*
comment.stream.end.ch=*/
comment.box.start.ch=/*
comment.box.middle.ch= *
comment.box.end.ch= */
preprocessor.symbol.$(file.patterns.ch)=#
preprocessor.start.$(file.patterns.ch)=if ifdef ifndef
preprocessor.middle.$(file.patterns.ch)=else elif
preprocessor.end.$(file.patterns.ch)=endif

# April 2016 Arjunea / update go keywords
keywordclass.go.types=bool byte int8 uint8 rune string int16 uint16 int32 uint32 uint64 int64 \ 
float32 float64 uint int uintptr complex64 complex128 struct type chan
keywordclass.go.func=complex const real continue defer go goto fallthrough import interface \ 
len map package if falseif else return select switch case default for var range func fallthough \
break append cap close copy delete error imag make new panic print println recover defer
keywordclass.go.const=nil true false 
keywords.$(file.patterns.go)=$(keywordclass.go.types) $(keywordclass.go.func) $(keywordclass.go.const) 

keywordclass.rc= \
ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON \
BEGIN BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS \
COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX DISCARDABLE \
EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE LISTBOX LTEXT \
MENU MENUEX MENUITEM MESSAGETABLE POPUP PUSHBUTTON RADIOBUTTON \
RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 STRINGTABLE STYLE TEXTINCLUDE \
VALUE VERSION VERSIONINFO VIRTKEY
keywords.$(file.patterns.rc)=$(keywordclass.rc)

keywordclass.idl= \
aggregatable allocate appobject arrays async async_uuid auto_handle \
bindable boolean broadcast byte byte_count call_as callback char coclass code comm_status \
const context_handle context_handle_noserialize context_handle_serialize control cpp_quote custom \
decode default defaultbind defaultcollelem defaultvalue defaultvtable dispinterface displaybind dllname \
double dual enable_allocate encode endpoint entry enum error_status_t explicit_handle \
fault_status first_is float handle_t heap helpcontext helpfile helpstring helpstringcontext helpstringdll \
hidden hyper id idempotent ignore iid_as iid_is immediatebind implicit_handle import importlib in include \
in_line int __int64 __int3264 interface last_is lcid length_is library licensed local long max_is maybe message \
methods midl_pragma midl_user_allocate midl_user_free min_is module ms_union ncacn_at_dsp ncacn_dnet_nsp \
ncacn_http ncacn_ip_tcp ncacn_nb_ipx ncacn_nb_nb ncacn_nb_tcp ncacn_np ncacn_spx ncacn_vns_spp \
ncadg_ip_udp ncadg_ipx ncadg_mq ncalrpc nocode nonbrowsable noncreatable nonextensible notify \
object odl oleautomation optimize optional out out_of_line pipe pointer_default pragma properties propget \
propput propputref ptr public range readonly ref represent_as requestedit restricted retval shape short \
signed size_is small source strict_context_handle string struct switch switch_is switch_type \
transmit_as typedef uidefault union unique unsigned user_marshal usesgetlasterror uuid \
v1_enum vararg version void wchar_t wire_marshal

keywordclass.msidl=handle
keywordclass.xpidl=attribute native noscript scriptable shared wstring inout
keywords.$(file.patterns.idl)=$(keywordclass.idl) $(keywordclass.xpidl)

# moved java.

# After 10 Years..Update Oktober2016 - Actionscript 3.
keywordclass.flash=class extends implements import interface new case do while else if for in switch throw get set function \
var try catch finally while with default break continue delete return each const namespace package include use is as instanceof \
typeof add and dynamic eq false ge gt Infinity interface intrinsic le lt NaN ne not null or private public static super this true typeof \
undefined void private public internal native override protected AS3 final

keywordclass2.flash=void Null ArgumentError arguments Array Boolean Class Date DefinitionError Error EvalError Function int Math Namespace \
Number Object QName RangeError ReferenceError RegExp SecurityError String SyntaxError TypeError uint URIError \
VerifyError XML XMLList Accessibility AccessibilityProperties ActionScriptVersion AVM1Movie Bitmap BitmapData \
BitmapDataChannel BlendMode CapsStyle DisplayObject DisplayObjectContainer FrameLabel GradientType Graphics \
IBitmapDrawable InteractiveObject InterpolationMethod JointStyle LineScaleMode Loader LoaderInfo MorphShape MovieClip \
PixelSnapping Scene Shape SimpleButton SpreadMethod Sprite Stage StageAlign StageDisplayState StageQuality StageScaleMode \
SWFVersion EOFError IllegalOperationError InvalidSWFError IOError MemoryError ScriptTimeoutError StackOverflowError \
ActivityEvent AsyncErrorEvent ContextMenuEvent DataEvent ErrorEvent Event EventDispatcher EventPhase FocusEvent \
FullScreenEvent HTTPStatusEvent IEventDispatcher IMEEvent IOErrorEvent KeyboardEvent MouseEvent NetStatusEvent ProgressEvent \
SecurityErrorEvent StatusEvent SyncEvent TextEvent TimerEvent ExternalInterface BevelFilter BitmapFilter \
BitmapFilterQuality BitmapFilterType BlurFilter ColorMatrixFilter ConvolutionFilter DisplacementMapFilter \
DisplacementMapFilterMode DropShadowFilter GlowFilter GradientBevelFilter GradientGlowFilter ColorTransform Matrix \
Point Rectangle Transform Camera ID3Info Microphone Sound SoundChannel SoundLoaderContext SoundMixer SoundTransform \
Video FileFilter FileReference FileReferenceList IDynamicPropertyOutput IDynamicPropertyWriter LocalConnection \
NetConnection NetStream ObjectEncoding Responder SharedObject SharedObjectFlushStatus Socket URLLoader \
URLLoaderDataFormat URLRequest URLRequestHeader URLRequestMethod URLStream URLVariables XMLSocket \
PrintJob PrintJobOptions PrintJobOrientation ApplicationDomain Capabilities IME IMEConversionMode LoaderContext \
Security SecurityDomain SecurityPanel System AntiAliasType CSMSettings Font FontStyle FontType GridFitType \
StaticText StyleSheet TextColorType TextDisplayMode TextField TextFieldAutoSize TextFieldType TextFormat \
TextFormatAlign TextLineMetrics TextRenderer TextSnapshot ContextMenu ContextMenuBuiltInItems ContextMenuItem \
Keyboard KeyLocation Mouse ByteArray Dictionary Endian IDataInput IDataOutput IExternalizable Proxy Timer \
XMLDocument XMLNode XMLNodeType author copy default deprecated eventType example exampleText exception haxe \
inheritDoc internal link mtasc mxmlc param private return see serial serialData serialField since throws usage version langversion \
playerversion productversion

keywords.$(file.patterns.flash)=$(keywordclass.flash)
keywords2.$(file.patterns.flash)=$(keywordclass2.flash)

keywordclass.vala=if else switch case default break continue return yield for foreach in \
do while try catch finally throw

keywordclass2.vala=namespace interface class struct enum delegate signal errordomain \
construct get set value base const static var dynamic weak unowned virtual abstract \
override public protected private extern throws requires ensures yields out ref lock \
using true false null delete generic new this typeof sizeof as owned int string char bool

keywords.$(file.patterns.vala)=$(keywordclass.vala)
keywords2.$(file.patterns.vala)=$(keywordclass2.vala)

keywordclass.pike=constant enum if do for while else foreach case switch break continue \
return typeof catch class lambda import inherit static void int string float mixed object \
function program array mapping multiset
keywords.$(file.patterns.pike)=$(keywordclass.pike)

keywordclass.swift.declarations=class deinit enum extension func import init \
internal let operator private protocol public static struct subscript typealias var
keywordclass.swift.statements=break case continue default do else fallthrough \
for if in return switch where while

keywordclass.swift.expressions=as dynamicType false is nil self Self super \
true __COLUMN__ __FILE__ __FUNCTION__ __LINE__
# The contextual keywords are only keywords in particular contexts
keywordclass.swift.contextual=associativity convenience dynamic didSet final get \
infix inout lazy left mutating none nonmutating optional override postfix \
precedence prefix Protocol required right set Type unowned weak willSet

keywords.$(file.patterns.swift)=$(keywordclass.swift.declarations) \
$(keywordclass.swift.statements) $(keywordclass.swift.expressions) \
$(keywordclass.swift.contextual)

# Markers
# keywords6.$(file.patterns.c.like)=FIXME TODO XXX HACK UnresolvedMergeConflict UNDONE

#styling.within.preprocessor=1
lexer.cpp.allow.dollars=1
#lexer.cpp.track.preprocessor=1
#lexer.cpp.update.preprocessor=1

# For C# leave lexer.cpp.verbatim.strings.allow.escapes as 0 but change to 1 for Objective C
#lexer.cpp.verbatim.strings.allow.escapes=1
#lexer.cpp.triplequoted.strings=1
#lexer.cpp.hashquoted.strings=1
#lexer.cpp.backquoted.strings=1
#lexer.cpp.escape.sequence=1
#lexer.cpp.update.preprocessor=1
#lexer.cpp.escape.sequence=1

# C++ styles

# Default
style.cpp.32=$(font.default)
# White space
style.cpp.0=$(whitespace.fore),$(whitespace.back)
# Comment: /* */.
style.cpp.1=$(colour.comment.box),$(font.comment.box)
# Line Comment: //.
style.cpp.2=$(colour.comment.line),$(font.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(colour.comment.doc),$(font.comment.doc)
# Number
style.cpp.4=$(colour.number)
# Keyword used ??
style.cpp.5=$(colour.keyword)
# Identifier (everything else...) used ?
style.cpp.11=$(colour.identifier)
# Style 16 for keywords 2
style.cpp.16=$(colour.keyword2)

# Double quoted string
style.cpp.6=$(colour.string)
# Single quoted string
style.cpp.7=$(colour.char)
# UUIDs (only in IDL)
style.cpp.8=$(colour.idl)
# Preprocessor
style.cpp.9=$(colour.preproc)
# Operators
style.cpp.10=$(colour.operator)
# End of line where string is not closed
style.cpp.12=$(colour.eolstringnotclosed)
# Verbatim strings for C#
style.cpp.13=$(colour.strverbatimcnet)
# Regular expressions for JavaScript
style.cpp.14=$(colour.regexjavascript)
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(colour.doccommenttripledash)
# Comment keyword
style.cpp.17=$(colour.commentkeyword)
# Comment keyword error
style.cpp.18=$(colour.commentkeyworderr)
# Global class (Keywords4 for cpp)
style.cpp.19=$(colour.globalclass)
# Raw strings for C++0x
style.cpp.20=$(colour.cpprawstring)
# Triple-quoted strings for Vala
style.cpp.21=$(colour.valatriplequotedstring)
# Hash-quoted strings for Pike
style.cpp.22=$(colour.pikehashqoutedstring)
# Preprocessor stream comment
style.cpp.23=$(colour.preprocstreamcomment)
# Preprocessor stream doc comment
style.cpp.24=$(colour.preprocstreamdoccomment)
# User defined literals
style.cpp.25=$(colour.userdefinedliterals)
# Task Marker
style.cpp.26=$(colour.taskmarker)
# Escape sequence
style.cpp.27=$(colour.escapeseq)

# Substyles can be used for extra lists of highlighted identifiers and doc comment keywords
# Identifiers
#substyles.cpp.11=2
#substylewords.11.1.$(file.patterns.cpp)=std map string vector
#style.cpp.11.1=fore:#EE00AA
#style.cpp.75.1=$(style.cpp.75),fore:#BB6666
# Doc comment keywords
#substyles.cpp.17=1
#style.cpp.17.1=$(style.cpp.17),fore:#00AAEE
#style.cpp.81.1=$(style.cpp.81),fore:#6699AA
#substylewords.17.1.$(file.patterns.cpp)=check

# Braces are only matched in operator style
braces.cpp.style=10
ccopts=-pedantic -Os
cc=g++ $(ccopts)
ccc=gcc $(ccopts)

#~--- Commands
make.command=make
command.compile.*.c=cmd /c $(ccc)  *.c -o $(FileName).o
command.build.*.c=cmd /c $(ccc) -c *.c -o $(FileName).o && g++ -o "$(FileName).exe" *.o -s $(libs)
command.build.*.h=cmd /c $(ccc) -c *.c -o $(FileName).o && g++ -o "$(FileName).exe" *.o -s $(libs)
command.clean.*.c=del /Q $(FileName).o $(FileName).exe >NUL
command.clean.*.h=del /Q $(FileName).o $(FileName).exe >NUL
command.go.*.c=cmd /c $(ccc) -c *.c -o $(FileName).o && g++ -o "$(FileName).exe" *.o -s $(libs) && $(FileName).exe
# To make the Go command both compile (if needed) and execute, use this setting:
#command.go.needs.*.c=gcc $(ccopts) -std=c99 $(FileNameExt) -o $(FileName)

command.compile.$(file.patterns.cplusplus)=$(cc)
command.build.$(file.patterns.cplusplus)=$(make.command)
command.clean.$(file.patterns.cplusplus)=$(make.command) clean
command.go.$(file.patterns.cplusplus)=./$(FileName)
command.go.needs.$(file.patterns.cplusplus)=g++ $(ccopts) $(FileNameExt) -o $(FileName)

if PLAT_WIN
	command.compile.*.rc=windres $(FileNameExt) $(FileName).o
	command.build.*.rc=$(make.command)
	command.help.$(file.patterns.cpp)=$(CurrentWord)!G:\Program Files\Microsoft Visual Studio\MSDN98\98VSa\1033\MSDNVS6A.COL
	command.help.subsystem.$(file.patterns.cpp)=4
# When maintaining old Win16 programs...
#command.help.$(file.patterns.cpp)=$(CurrentWord)!I:\msvc\help\win31wh.hlp
#command.help.subsystem.$(file.patterns.cpp)=5

if PLAT_GTK
	command.help.$(file.patterns.cpp)=man $(CurrentWord) | col -b

if PLAT_WIN
	command.build.*.cs=csc /t:winexe $(FileNameExt) /r:system.dll,system.drawing.dll
	command.go.*.cs=$(FileName)
	command.go.subsystem.*.cs=0
if PLAT_GTK
	command.build.*.cs=mcs /t:winexe $(FileNameExt) /r:System,System.Drawing
	command.go.*.cs=mono $(FileName).exe
	command.go.subsystem.*.cs=1

# ch
command.compile.*.ch=ch -n $(FileNameExt)
command.build.*.ch=ch -n  $(FileNameExt)
command.go.*.ch=ch -u $(FileNameExt)

# Actionscript
command.compile.*.as=mtasc -strict $(FileNameExt)
command.build.*.as=mtasc -strict *.as

# Vala
command.build.$(file.patterns.vala)=valac $(FileNameExt)
command.go.*.vala=./$(FileName)

# GO - can also be 6g for 64-bit systems!
command.compile.*.go=8g $(FileNameExt)
command.build.*.go=$(make.command)
command.go.*.go=./$(FileName)

# GO Code formatter
#command.name.0.*.go=gofmt
#command.0.*.go=gofmt -w $(FilePath)
#command.mode.0.*.go=filter:yes,savebefore:yes

# -- Define regexp for sidbar functions
routines.regex.c=(static\s+)?(\w+\s+)?\w+[\s\*]+\w+\s*\(((\s*\w+\s+\w+\s*)(,)?)*\)
routines.regex.h=$(routines.regex.c)
routines.regex.cpp=(static\s+)?(\w+\s+)?\w+[\s\*]+(\w+::)?\w+\s*\([\w\s\*\[\],]*\)
routines.regex.hpp=$(routines.regex.cpp)
