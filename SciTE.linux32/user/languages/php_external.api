curl_close ( resource $ch ):void\t\nCloses a cURL session and frees all resources. The cURL handle, ch, is also deleted. 
curl_copy_handle ( $ch ):resource\t\nCopies a cURL handle keeping the same preferences. 
curl_errno ( resource $ch ):int\t\nReturns the error number for the last cURL operation. 
curl_error ( resource $ch ):string\t\nReturns a clear text error message for the last cURL operation. 
curl_escape ( resource $ch , $str ):string\t\nThis function URL encodes the given string according to » RFC 3986. 
curl_exec ( resource $ch ):mixed\t\n Perform a CURL session
curl_file_create(->) function is an alias of: CURLFile::__construct() :This\t\n
curl_getinfo ( resource $ch [, int $opt ] ):mixed\t\nGets information about the last transfer. 
curl_init ([ string $url = NULL ] ):resource\t\nInitializes a new session and return a cURL handle for use with the curl_setopt(), curl_exec(), and curl_close() functions. 
curl_multi_add_handle ( resource $mh , resource $ch ):int\t\nAdds the ch handle to the multi handle mh 
curl_multi_close ( resource $mh ):void\t\nCloses a set of cURL handles. 
curl_multi_errno ( resource $mh ):int\t\nReturn an integer containing the last multi curl error number. 
curl_multi_exec ( resource $mh , &$still_running ):int\t\nProcesses each of the handles in the stack. This method can be called whether or not a handle needs to read or write data. 
curl_multi_getcontent ( resource $ch ):string\t\nIf CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string. 
curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] ):array\t\n Get information about the current transfers
curl_multi_init ( void ):resource\t\nAllows the processing of multiple cURL handles asynchronously. 
curl_multi_remove_handle ( resource $mh , resource $ch ):int\t\nRemoves a given ch handle from the given mh handle. When the ch handle has been removed, it is again perfectly legal to run curl_exec() on this handle. Removing the ch handle while being used, will effectively halt the transfer in progress involving that handle. 
curl_multi_select ( resource $mh [, float $timeout = 1.0 ] ):int\t\nBlocks until there is activity on any of the curl_multi connections. 
curl_multi_setopt ( resource $mh , int $option , mixed $value ):bool\t\n
curl_multi_strerror ( int $errornum ):string\t\nReturns a text error message describing the given CURLM error code. 
curl_pause ( resource $ch , $bitmask ):int\t\n
curl_reset ( resource $ch ):void\t\nThis function re-initializes all options set on the given cURL handle to the default values. 
curl_setopt_array ( resource $ch , array $options ):bool\t\nSets multiple options for a cURL session. This function is useful for setting a large number of cURL options without repetitively calling curl_setopt(). 
curl_setopt ( resource $ch , int $option , mixed $value ):bool\t\nSets an option on the given cURL session handle. 
curl_share_close ( resource $sh ):void\t\nCloses a cURL share handle and frees all resources. 
curl_share_errno ( resource $sh ):int\t\nReturn an integer containing the last share curl error number. 
curl_share_init ( void ):resource\t\nAllows to share data between cURL handles. 
curl_share_setopt ( resource $sh , int $option , string $value ):bool\t\nSets an option on the given cURL share handle. 
curl_share_strerror ( int $errornum ):string\t\nReturns a text error message describing the given error code. 
curl_strerror ( int $errornum ):string\t\nReturns a text error message describing the given error code. 
curl_unescape ( resource $ch , $str ):string\t\nThis function decodes the given URL encoded string. 
curl_version ([ int $age = CURLVERSION_NOW ] ):array\t\nReturns information about the cURL version. 
dbase_add_record ( resource $dbase_identifier , array $record ):bool\t\nAdds the given data to the database. 
dbase_close ( resource $dbase_identifier ):bool\t\nCloses the given database link identifier. 
dbase_create ( string $filename , array $fields [, int $type = DBASE_TYPE_DBASE ] ):resource\t\n Creates a new dBase-format database file
dbase_delete_record ( resource $dbase_identifier , int $record_number ):bool\t\n Marks a record to be deleted
dbase_get_header_info ( resource $dbase_identifier ):array\t\nReturns information on the column structure of the given database link identifier. 
dbase_get_record_with_names ( resource $dbase_identifier , int $record_number ):array\t\nGets a record from a dBase database as an associative array. 
dbase_get_record ( resource $dbase_identifier , int $record_number ):array\t\nGets a record from a database as an indexed array. 
dbase_numfields ( resource $dbase_identifier ):int\t\n Returns the number of fields (columns) in the database
dbase_numrecords ( resource $dbase_identifier ):int\t\n Returns the number of records in the database
dbase_open ( string $filename , int $mode ):resource\t\n Opens a dBase-format database file
dbase_pack ( resource $dbase_identifier ):bool\t\nPacks the specified database by permanently deleting all records marked for deletion using dbase_delete_record(). Note that the file will be truncated after successful packing (contrary to dBASE III's PACK command). 
dbase_replace_record ( resource $dbase_identifier , array $record , int $record_number ):bool\t\nReplaces the given record in the database with the given data. 
dom_import_simplexml ( SimpleXMLElement $node ):DOMElement\t\nThis function takes the node node of class SimpleXML and makes it into a DOMElement node. This new object can then be used as a native DOMElement node. 
enchant_broker_describe ( resource $broker ):array\t\nEnumerates the Enchant providers and tells you some rudimentary information about them. The same info is provided through phpinfo(). 
enchant_broker_dict_exists ( resource $broker , string $tag ):bool\t\nTells if a dictionary exists or not, using a non-empty tags 
enchant_broker_free_dict ( resource $dict ):bool\t\nFree a dictionary resource. 
enchant_broker_free ( resource $broker ):bool\t\nFree a broker resource with all its dictionaries. 
enchant_broker_get_dict_path ( resource $broker , int $dict_type ):bool\t\nGet the directory path for a given backend. 
enchant_broker_get_error ( resource $broker ):string\t\nReturns the last error which occurred in this broker. 
enchant_broker_init ( void ):resource\t\n
enchant_broker_list_dicts ( resource $broker ):mixed\t\nReturns a list of available dictionaries with their details. 
enchant_broker_request_dict ( $broker , string $tag ):resource\t\ncreate a new dictionary using tag, the non-empty language tag you wish to request a dictionary for ("en_US", "de_DE", ...) 
enchant_broker_request_pwl_dict ( $broker , string $filename ):resource\t\nCreates a dictionary using a PWL file. A PWL file is personal word file one word per line. 
enchant_broker_set_dict_path ( resource $broker , int $dict_type , string $value ):bool\t\nSet the directory path for a given backend. 
enchant_broker_set_ordering ( resource $broker , string $tag , string $ordering ):bool\t\nDeclares a preference of dictionaries to use for the language described/referred to by 'tag'. (Comma delimited Taglist)\t\nThe "*" tag can be used as a language tag to declare a default ordering for any language that does not explicitly declare an ordering. 
enchant_dict_add_to_personal ( resource $dict , string $word ):void\t\nAdd a word to personal word list of the given dictionary. 
enchant_dict_add_to_session ( resource $dict , string $word ):void\t\nAdd a word to the given dictionary. It will be added only for the active spell-checking session. 
enchant_dict_check ( resource $dict , string $word ):bool\t\nIf the word is correctly spelled return TRUE, otherwise return FALSE 
enchant_dict_describe ( resource $dict ):mixed\t\nReturns the details of the dictionary. 
enchant_dict_get_error ( resource $dict ):string\t\nReturns the last error of the current spelling-session 
enchant_dict_is_in_session ( resource $dict , string $word ):bool\t\nTells whether or not a word already exists in the current session. 
enchant_dict_quick_check ( resource $dict , string $word [, array &$suggestions ] ):bool\t\nIf the word is correctly spelled return TRUE, otherwise return FALSE, if suggestions variable is provided, fill it with spelling alternatives. 
enchant_dict_store_replacement ( resource $dict , string $mis , string $cor ):void\t\nAdd a correction for 'mis' using 'cor'. Notes that you replaced @mis with @cor, so it's possibly more likely that future occurrences of @mis will be replaced with @cor. So it might bump @cor up in the suggestion list. 
enchant_dict_suggest ( resource $dict , string $word ):array\t\n
fbsql_affected_rows ([ resource $link_identifier ] ):int\t\n Get the number of rows affected by the last statement
fbsql_autocommit ( resource $link_identifier [, $OnOff ] ):bool\t\nReturns the current autocommit status. 
fbsql_blob_size ( string $blob_handle [, resource $link_identifier ] ):int\t\nReturns the size of the given BLOB. 
fbsql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] ):bool\t\nfbsql_change_user() changes the logged in user of the specified connection. If the new user and password authorization fails, the current connected user stays active. 
fbsql_clob_size ( string $clob_handle [, resource $link_identifier ] ):int\t\nReturns the size of the given CLOB. 
fbsql_close ([ resource $link_identifier ] ):bool\t\n Close a connection to a database server
fbsql_commit ([ resource $link_identifier ] ):bool\t\nEnds the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction. This command is only needed if autocommit is set to false. 
fbsql_connect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] ):resource\t\n Create a connection to a database server
fbsql_create_blob ( $blob_data [, resource $link_identifier ] ):string\t\nCreates a BLOB from the given data. 
fbsql_create_clob ( $clob_data [, resource $link_identifier ] ):string\t\nCreates a CLOB from the given data. 
fbsql_create_db ( string $database_name [, resource $link_identifier [, string $database_options ]] ):bool\t\nAttempts to create a new database on the specified server. 
fbsql_data_seek ( resource $result , int $row_number ):bool\t\n Move the internal row counter to the specified row_number
fbsql_database_password ( resource $link_identifier [, $database_password ] ):string\t\n Get or set the databsae password used with a connection
fbsql_database ( resource $link_identifier [, $database ] ):string\t\nGet or set the database name used with the connection. 
fbsql_db_query ( string $database , string $query [, $link_identifier ] ):resource\t\nSelects a database and executes a query on it. 
fbsql_db_status ( string $database_name [, resource $link_identifier ] ):int\t\nGets the current status of the specified database. 
fbsql_drop_db ( string $database_name [, resource $link_identifier ] ):bool\t\nfbsql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier. 
fbsql_errno ([ resource $link_identifier ] ):int\t\n Returns the last error code
fbsql_error ([ resource $link_identifier ] ):string\t\n Returns the last error string
fbsql_fetch_( resource $result [, int $result_type ] ):array\t\n Fetches a result row as an array (associative, numeric or both)
fbsql_fetch_assoc ( resource $result ):array\t\n Detch a row of data. Returns an assoc array
fbsql_fetch_field ( resource $result [, int $field_offset ] ):object\t\nUsed in order to obtain information about fields in a certain query result. 
fbsql_fetch_lengths ( resource $result ):array\t\nStores the lengths of each result column in the last row returned by fbsql_fetch_row(), fbsql_fetch_array() and fbsql_fetch_object() in an array. 
fbsql_fetch_( resource $result ):object\t\n Fetch a row of data. Returns an object
fbsql_fetch_row ( resource $result ):array\t\n Fetch a row of data. Returns an indexed array
fbsql_field_flags ( resource $result [, int $field_offset ] ):string\t\nGets the flags associated with the specified field in a result. 
fbsql_field_len ( resource $result [, $field_offset ] ):int\t\nReturns the length of the specified field. 
fbsql_field_name ( resource $result [, int $field_index ] ):string\t\nReturns the name of the specified field index. 
fbsql_field_seek ( resource $result [, int $field_offset ] ):bool\t\nSeeks to the specified field offset. If the next call to fbsql_fetch_field() doesn't include a field offset, the field offset specified in fbsql_field_seek() will be returned. 
fbsql_field_table ( resource $result [, int $field_offset ] ):string\t\nReturns the name of the table that the specified field is in. 
fbsql_field_type ( resource $result [, int $field_offset ] ):string\t\nfbsql_field_type() is similar to the fbsql_field_name() function, but the field type is returned instead. 
fbsql_free_result ( resource $result ):bool\t\n free the memory used to store a result
fbsql_get_autostart_info ([ resource $link_identifier ] ):array\t\n
fbsql_hostname ( resource $link_identifier [, $host_name ] ):string\t\nGets or sets the host name used with a connection. 
fbsql_insert_id ([ resource $link_identifier ] ):int\t\n Get the internal index for the last insert statement
fbsql_list_dbs ([ $link_identifier ] ):resource\t\nReturn a result pointer containing the databases available from the current fbsql daemon. Use the fbsql_tablename() to traverse this result pointer. 
fbsql_list_fields ( string $database_name , string $table_name [, $link_identifier ] ):resource\t\nRetrieves information about the given table. 
fbsql_list_tables ( string $database [, $link_identifier ] ):resource\t\nReturns a result pointer describing the database. 
fbsql_next_result ( resource $result ):bool\t\nThis function will test for additional results available form the server. 
fbsql_num_fields ( resource $result ):int\t\nReturns the number of fields in the given result set. 
fbsql_num_rows ( resource $result ):int\t\n Get number of rows
fbsql_password ( resource $link_identifier [, $password ] ):string\t\nGet or set the user password used with a connection. 
fbsql_pconnect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] ):resource\t\n Create a persistant connection to a database server
fbsql_query ( string $query [, $link_identifier [, int $batch_size ]] ):resource\t\n Send one or more SQL statements to the server and execute them
fbsql_read_blob ( $blob_handle [, resource $link_identifier ] ):string\t\n Read the BLOB data identified by blob_handle
fbsql_read_clob ( $clob_handle [, resource $link_identifier ] ):string\t\n Read the CLOB data identified by clob_handle
fbsql_result ( resource $result [, int $row [, $field ]] ):mixed\t\n
fbsql_rollback ([ resource $link_identifier ] ):bool\t\n Rollback all statments since last commit
fbsql_rows_fetched ( resource $result ):int\t\nGets the number of rows affected by the last statement. 
fbsql_select_db ([ string $database_name [, resource $link_identifier ]] ):bool\t\n Select the database to open
fbsql_set_characterset ( resource $link_identifier , int $characterset [, int $in_out_both ] ):void\t\n
fbsql_set_lob_mode ( resource $result , int $lob_mode ):bool\t\n Sets the mode for how LOB data re retreived (actual data or a handle)
fbsql_set_password ( resource $link_identifier , string $user , string $password , string $old_password ):bool\t\nChanges the password for the given user. 
fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation ):void\t\nSets the transaction locking and isolation. 
fbsql_start_db ( string $database_name [, resource $link_identifier [, string $database_options ]] ):bool\t\nStart a database on local or remote server. 
fbsql_stop_db ( string $database_name [, resource $link_identifier ] ):bool\t\nStops a database on local or remote server. 
fbsql_table_name ( resource $result , int $index ):string\t\n Retreive the table name for index after a call to fbsql_list_tables()
fbsql_tablename(->) function is an alias of: fbsql_table_name(). :This\t\n
fbsql_username ( resource $link_identifier [, $username ] ):string\t\nGet or set the username used for the connection. 
fbsql_warnings ([ $OnOff ] ):bool\t\nEnables or disables FrontBase warnings. 
bind_textdomain_codeset ( $domain , $codeset ):string\t\nWith bind_textdomain_codeset(), you can set in which encoding will be messages from domain returned by gettext() and similar functions. 
bindtextdomain ( $domain , $directory ):string\t\nThe bindtextdomain() function sets the path for a domain. 
dcgettext ( $domain , $message , int $category ):string\t\nThis function allows you to override the current domain for a single message lookup. 
dcngettext ( $domain , $msgid1 , $msgid2 , int $n , int $category ):string\t\nThis function allows you to override the current domain for a single plural message lookup. 
dgettext ( $domain , $message ):string\t\nThe dgettext() function allows you to override the current domain for a single message lookup. 
dngettext ( $domain , $msgid1 , $msgid2 , int $n ):string\t\nThe dngettext() function allows you to override the current domain for a single plural message lookup. 
gettext ( $message ):string\t\nLooks up a message in the current domain. 
ngettext ( $msgid1 , $msgid2 , int $n ):string\t\nThe plural version of gettext(). Some languages have more than one form for plural messages dependent on the count. 
textdomain ( $text_domain = NULL ):string\t\nThis function sets the domain to search within when calls are made to gettext(), usually the named after an application. 
gmp_abs ( $a ):GMP\t\nGet the absolute value of a number. 
gmp_add ( $a , $b ):GMP\t\nAdd two numbers. 
gmp_and ( $a , $b ):GMP\t\nCalculates bitwise AND of two GMP numbers. 
gmp_binomial ( mixed $n , int $k ):GMP\t\nCalculates the binomial coefficient C(n, k). 
gmp_clrbit ( GMP $a , int $index ):void\t\nClears (sets to 0) bit index in a. The index starts at 0. 
gmp_cmp ( GMP $a , GMP $b ):int\t\nCompares two numbers. 
gmp_com ( $a ):GMP\t\nReturns the one's complement of a. 
gmp_div_q ( $a , $b [, int $round = GMP_ROUND_ZERO ] ):GMP\t\nDivides a by b and returns the integer result. 
gmp_div_qr ( GMP $n , GMP $d [, int $round = GMP_ROUND_ZERO ] ):array\t\nThe function divides n by d. 
gmp_div_r ( $n , $d [, int $round = GMP_ROUND_ZERO ] ):GMP\t\nCalculates remainder of the integer division of n by d. The remainder has the sign of the n argument, if not zero. 
gmp_div(->) function is an alias of: gmp_div_q(). :This\t\n
gmp_divexact ( $n , $d ):GMP\t\nDivides n by d, using fast "exact division" algorithm. This function produces correct results only when it is known in advance that d divides n. 
gmp_export ( GMP $gmpnumber [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ]] ):string\t\nExport a GMP number to a binary string 
gmp_fact ( mixed $a ):GMP\t\nCalculates factorial (a!) of a. 
gmp_gcd ( $a , $b ):GMP\t\nCalculate greatest common divisor of a and b. The result is always positive even if either of, or both, input operands are negative. 
gmp_gcdext ( GMP $a , GMP $b ):array\t\n Computes G, S, and T, such that AS\t\n\t\n\t\nBT = G = `gcd' (A, B)
gmp_hamdist ( GMP $a , GMP $b ):int\t\nReturns the hamming distance between a and b. Both operands should be non-negative. 
gmp_import ( string $data [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ]] ):GMP\t\nImport a GMP number from a binary string 
gmp_init ( mixed $number [, int $base = 0 ] ):GMP\t\nCreates a GMP number from an integer or string. 
gmp_intval ( GMP $gmpnumber ):int\t\nThis function converts GMP number into native PHP integers. 
gmp_invert ( $a , $b ):GMP\t\nComputes the inverse of a modulo b. 
gmp_jacobi ( GMP $a , GMP $p ):int\t\nComputes » Jacobi symbol of a and p. p should be odd and must be positive. 
gmp_legendre ( GMP $a , GMP $p ):int\t\nCompute the »\t\nLegendre symbol of a and p. p should be odd and must be positive. 
gmp_mod ( $n , $d ):GMP\t\nCalculates n modulo d. The result is always non-negative, the sign of d is ignored. 
gmp_mul ( $a , $b ):GMP\t\nMultiplies a by b and returns the result. 
gmp_neg ( $a ):GMP\t\nReturns the negative value of a number. 
gmp_nextprime ( int $a ):GMP\t\nFind next prime number 
gmp_or ( $a , $b ):GMP\t\nCalculates bitwise inclusive OR of two GMP numbers. 
gmp_perfect_square ( GMP $a ):bool\t\nCheck if a number is a perfect square. 
gmp_popcount ( GMP $a ):int\t\nGet the population count. 
gmp_pow ( $base , int $exp ):GMP\t\nRaise base into power exp. 
gmp_powm ( $base , $exp , $mod ):GMP\t\nCalculate (base raised into power exp) modulo mod. If exp is negative, result is undefined. 
gmp_prob_prime ( GMP $a [, $reps = 10 ] ):int\t\nThe function uses Miller-Rabin's probabilistic test to check if a number is a prime. 
gmp_random_bits ( int $bits ):GMP\t\n
gmp_random_range ( $min , $max ):GMP\t\n
gmp_random_seed ( mixed $seed ):void\t\n
gmp_random ([ int $limiter = 20 ] ):GMP\t\n Gets random number
gmp_root ( $a , int $nth ):GMP\t\nTakes the nth root of a and returns the integer component of the result. 
gmp_rootrem ( GMP $a , int $nth ):array\t\nTakes the nth root of a and returns the integer component and remainder of the result. 
gmp_scan0 ( GMP $a , $start ):int\t\nScans a, starting with bit start, towards more significant bits, until the first clear bit is found. 
gmp_scan1 ( GMP $a , $start ):int\t\nScans a, starting with bit start, towards more significant bits, until the first set bit is found. 
gmp_setbit ( GMP $a , int $index [, bool $bit_on = TRUE ] ):void\t\nSets bit index in a. 
gmp_sign ( GMP $a ):int\t\nChecks the sign of a number. 
gmp_sqrt ( $a ):GMP\t\nCalculates square root of a. 
gmp_sqrtrem ( GMP $a ):array\t\nCalculate the square root of a number, with remainder. 
gmp_strval ( GMP $gmpnumber [, int $base = 10 ] ):string\t\nConvert GMP number to string representation in base base. The default base is 10. 
gmp_sub ( $a , $b ):GMP\t\nSubtracts b from a and returns the result. 
gmp_testbit ( GMP $a , int $index ):bool\t\nTests if the specified bit is set. 
gmp_xor ( $a , $b ):GMP\t\nCalculates bitwise exclusive OR (XOR) of two GMP numbers. 
ibase_add_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] ):bool\t\n Add an user to security database (only for IB6 or later)
ibase_affected_rows ([ resource $link_identifier ] ):int\t\nThis function returns the number of rows that were affected by the previous query (INSERT, UPDATE or DELETE) that was executed from within the specified transaction context. 
ibase_backup ( resource $service_handle , string $source_db , string $dest_file [, int $options = 0 [, bool $verbose = FALSE ]] ):mixed\t\n
ibase_blob_add ( resource $blob_handle , string $data ):void\t\nibase_blob_add() adds data into a blob created with ibase_blob_create(). 
ibase_blob_cancel ( resource $blob_handle ):bool\t\nThis function will discard a BLOB if it has not yet been closed by ibase_blob_close(). 
ibase_blob_close ( resource $blob_handle ):mixed\t\nThis function closes a BLOB that has either been opened for reading by ibase_blob_open() or has been opened for writing by ibase_blob_create(). 
ibase_blob_create ([ $link_identifier = NULL ] ):resource\t\nibase_blob_create() creates a new BLOB for filling with data. 
ibase_blob_echo ( string $blob_id ):bool\t\n Output blob contents to browser
ibase_blob_get ( resource $blob_handle , int $len ):string\t\n Get len bytes data from open blob
ibase_blob_import ( resource $link_identifier , resource $file_handle ):string\t\n Create blob, copy file in it, and close it
ibase_blob_info ( resource $link_identifier , string $blob_id ):array\t\n Return blob length and other useful info
ibase_blob_open ( $link_identifier , string $blob_id ):resource\t\n Open blob for retrieving data parts
ibase_close ([ resource $connection_id = NULL ] ):bool\t\nCloses the link to an InterBase database that's associated with a connection id returned from ibase_connect(). Default transaction on link is committed, other transactions are rolled back. 
ibase_commit_ret ([ resource $link_or_trans_identifier = NULL ] ):bool\t\nCommits a transaction without closing it. 
ibase_commit ([ resource $link_or_trans_identifier = NULL ] ):bool\t\nCommits a transaction. 
ibase_connect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] ):resource\t\n Open a connection to an InterBase database
ibase_db_info ( resource $service_handle , $db , int $action [, int $argument = 0 ] ):string\t\n
ibase_delete_user ( resource $service_handle , string $user_name ):bool\t\n Delete an user from security database (only for IB6 or later)
ibase_drop_db ([ resource $connection = NULL ] ):bool\t\nThis functions drops a database that was opened by either ibase_connect() or ibase_pconnect(). The database is closed and deleted from the server. 
ibase_errcode ( void ):int\t\nReturns the error code that resulted from the most recent InterBase function call. 
ibase_errmsg ( void ):string\t\nReturns the error message that resulted from the most recent InterBase function call. 
ibase_execute ( $query [, mixed $bind_arg [, mixed $... ]] ):resource\t\n Execute a previously prepared query
ibase_fetch_assoc ( resource $result [, int $fetch_flag = 0 ] ):array\t\n Fetch a row\t\nfrom the results of a query
ibase_fetch_( resource $result_id [, int $fetch_flag = 0 ] ):object\t\n Fetch a object from the results of a query
ibase_fetch_row ( resource $result_identifier [, int $fetch_flag = 0 ] ):array\t\n Fetch a row\t\nfrom the results of a query
ibase_field_info ( resource $result , int $field_number ):array\t\nReturns an array with information about a field after a select query has been run. 
ibase_free_event_handler ( resource $event ):bool\t\nThis function causes the registered event handler specified by event to be cancelled. The callback function will no longer be called for the events it was registered to handle. 
ibase_free_query ( resource $query ):bool\t\nFrees a prepared query. 
ibase_free_result ( resource $result_identifier ):bool\t\nFrees a result set. 
ibase_gen_id ( string $generator [, int $increment = 1 [, resource $link_identifier = NULL ]] ):mixed\t\n Increments the named generator and returns its new value
ibase_maintain_db ( resource $service_handle , string $db , int $action [, int $argument = 0 ] ):bool\t\n
ibase_modify_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] ):bool\t\n Modify an user in security database (only for IB6 or later)
ibase_name_result ( resource $result , string $name ):bool\t\nThis function assigns a name to a result set. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF name statements. 
ibase_num_fields ( resource $result_id ):int\t\nGet the number of fields in a result set. 
ibase_num_params ( resource $query ):int\t\nThis function returns the number of parameters in the prepared query specified by query. This is the number of binding arguments that must be present when calling ibase_execute(). 
ibase_param_info ( resource $query , int $param_number ):array\t\nReturns an array with information about a parameter after a query has been prepared. 
ibase_pconnect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] ):resource\t\n Open a persistent connection to an InterBase database
ibase_prepare ( string $query ):resource\t\n Prepare a query for later execution
ibase_query ([ $link_identifier ], string $query [, int $bind_args ] ):resource\t\nPerforms a query on an InterBase database. 
ibase_restore ( resource $service_handle , string $source_file , string $dest_db [, int $options = 0 [, bool $verbose = FALSE ]] ):mixed\t\n
ibase_rollback_ret ([ resource $link_or_trans_identifier = NULL ] ):bool\t\nRolls back a transaction without closing it. 
ibase_rollback ([ resource $link_or_trans_identifier = NULL ] ):bool\t\nRolls back a transaction. 
ibase_server_info ( resource $service_handle , int $action ):string\t\n
ibase_service_attach ( string $host , string $dba_username , string $dba_password ):resource\t\n
ibase_service_detach ( resource $service_handle ):bool\t\n
ibase_set_event_handler ( callable $event_handler , string $event_name1 [, string $event_name2 [, string $... ]] ):resource\t\n Register the callback for handling each of the named events
ibase_trans ([ int $trans_args [, $link_identifier ]] ):resource\t\n Start a transaction over one or several databases
ibase_wait_event ( $event_name1 [, $event_name2 [, $... ]] ):string\t\n Waits for any one of the passed Interbase events to be posted by the database, and returns its name
ifx_affected_rows ( resource $result_id ):int\t\n Returns the number of rows affected by query identified by resultid
ifx_blobinfile_mode ( int $mode ):bool\t\nSet the default blob mode for all select queries. 
ifx_byteasvarchar ( int $mode ):bool\t\nSets the default byte mode for all select-queries. 
ifx_close ([ resource $link_identifier ] ):bool\t\n Close informix connection
ifx_connect ([ string $database [, string $userid [, string $password ]]] ):resource\t\n Connects to database using userid/password, returns connection id
ifx_copy_blob ( $bid ):int\t\nDuplicates the given blob object. 
ifx_create_blob ( $type , $mode , string $param ):int\t\nCreates a blob object. 
ifx_create_char ( string $param ):int\t\nCreates an char object. 
ifx_do ( resource $result_id ):bool\t\n Executes a previously prepared query or opens a cursor for it
ifx_error ([ resource $link_identifier ] ):string\t\nReturns in a string one character describing the general results of a statement and both SQLSTATE and SQLCODE associated with the most recent SQL statement executed. 
ifx_errormsg ([ int $errorcode ] ):string\t\nReturns the Informix error message associated with the most recent Informix error. 
ifx_fetch_row ( resource $result_id [, mixed $position ] ):array\t\n Fetches the next row or <position> row if using a scroll cursor
ifx_fieldproperties ( resource $result_id ):array\t\nReturns the Informix SQL fieldproperties of every field in the query as an associative array. Properties are encoded as: "SQLTYPE;length;precision;scale;ISNULLABLE" where SQLTYPE = the Informix type like "SQLVCHAR" etc. and ISNULLABLE = "Y" or "N". 
ifx_fieldtypes ( resource $result_id ):array\t\nReturns an associative array with fieldnames as key and the SQL fieldtypes as data for the query associated with result_id. 
ifx_free_blob ( int $bid ):bool\t\nDeletes the blobobject for the given blob object-id. 
ifx_free_char ( int $bid ):bool\t\nDeletes the charobject for the given char object-id. 
ifx_free_result ( resource $result_id ):bool\t\nReleases resources for the query associated with result_id. 
ifx_get_blob ( int $bid ):string\t\nReturns the content of the blob object. 
ifx_get_char ( int $bid ):string\t\nReturns the content of the char object. 
ifx_getsqlca ( resource $result_id ):array\t\n Returns the sqlerrd[] fields of the sqlca struct for query resultid
ifx_htmltbl_result ( resource $result_id [, string $html_table_options ] ):int\t\nFormats and prints all rows of the result_id query into a HTML table. 
ifx_nullformat ( int $mode ):bool\t\nSets the default return value of a NULL-value on a fetch row. 
ifx_num_fields ( resource $result_id ):int\t\nAfter preparing or executing a query, this call gives you the number of columns in the query. 
ifx_num_rows ( resource $result_id ):int\t\nGives the number of rows fetched so far for a query with result_id after a ifx_query() or ifx_do() query. 
ifx_pconnect ([ string $database [, string $userid [, string $password ]]] ):resource\t\n Connects to database using userid/password, returns connection id
ifx_prepare ( string $query , $link_identifier [, int $cursor_def ], mixed $blobidarray ):resource\t\n Prepare a query on a given connection
ifx_query ( string $query , $link_identifier [, int $cursor_type [, mixed $blobidarray ]] ):resource\t\n Perform a query on a given connection
ifx_textasvarchar ( int $mode ):bool\t\nSets the default text mode for all select-queries. 
ifx_update_blob ( int $bid , string $content ):bool\t\nUpdates the content of the blob object for the given blob object bid. 
ifx_update_char ( int $bid , string $content ):bool\t\nUpdates the content of the char object for the given char object bid. 
ifxus_close_slob ( int $bid ):bool\t\nDeletes the slob object on the given slob object-id bid. 
ifxus_create_slob ( $mode ):int\t\nCreates an slob object and opens it. 
ifxus_free_slob ( int $bid ):bool\t\nDeletes the slob object. 
ifxus_open_slob ( $bid , $mode ):int\t\nOpens an slob object. bid should be an existing slob id. 
ifxus_read_slob ( int $bid , int $nbytes ):string\t\nReads nbytes of the slob object. 
ifxus_seek_slob ( $bid , $mode , $offset ):int\t\nSets the current file or seek position of an open slob object. 
ifxus_tell_slob ( $bid ):int\t\nReturns the current file or seek position of an open slob object 
ifxus_write_slob ( $bid , string $content ):int\t\nWrites a string into the slob object. 
imap_8bit ( $):string\t\nConvert an 8bit string to a quoted-printable string (according to » RFC2045, section 6.7). 
imap_alerts ( void ):array\t\n Returns an array of all IMAP alerts that have been generated since the last page load or since the last imap_alerts() call, whichever came last. The alert stack is cleared after imap_alerts() is called.
imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options = NULL [, string $internal_date = NULL ]] ):bool\t\nAppends a string message to the specified mailbox. 
imap_base64 ( $text ):string\t\nDecodes the given BASE-64 encoded text. 
imap_binary ( $):string\t\nConvert an 8bit string to a base64 string according to » RFC2045, Section 6.8. 
imap_body ( resource $imap_stream , int $msg_number [, int $options = 0 ] ):string\t\n Read the message body
imap_bodystruct ( resource $imap_stream , int $msg_number , string $section ):object\t\nRead the structure of a specified body section of a specific message. 
imap_check ( resource $imap_stream ):object\t\nChecks information about the current mailbox. 
imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = 0 ] ):bool\t\nThis function causes a store to delete the specified flag to the flags set for the messages in the specified sequence. 
imap_close ( resource $imap_stream [, int $flag = 0 ] ):bool\t\nCloses the imap stream. 
imap_create(->) function is an alias of: imap_createmailbox(). :This\t\n
imap_createmailbox ( resource $imap_stream , string $mailbox ):bool\t\nCreates a new mailbox specified by mailbox. 
imap_delete ( resource $imap_stream , int $msg_number [, int $options = 0 ] ):bool\t\nMarks messages listed in msg_number for deletion. Messages marked for deletion will stay in the mailbox until either imap_expunge() is called or imap_close() is called with the optional parameter CL_EXPUNGE. 
imap_deletemailbox ( resource $imap_stream , string $mailbox ):bool\t\nDeletes the specified mailbox. 
imap_errors ( void ):array\t\n Returns an array of all IMAP errors generated since the last page load, or since the last imap_errors() call, whichever came last. The error stack is cleared after imap_errors() is called.
imap_expunge ( resource $imap_stream ):bool\t\nDeletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full(). 
imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options = 0 ] ):array\t\nThis function fetches mail headers for the given sequence and returns an overview of their contents. 
imap_fetchbody ( resource $imap_stream , int $msg_number , $section [, int $options = 0 ] ):string\t\nFetch of a particular section of the body of the specified messages. Body parts are not decoded by this function. 
imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options = 0 ] ):string\t\nThis function causes a fetch of the complete, unfiltered » RFC2822 format header of the specified message. 
imap_fetchmime ( resource $imap_stream , int $msg_number , $section [, int $options = 0 ] ):string\t\nFetch the MIME headers of a particular section of the body of the specified messages. 
imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options = 0 ] ):object\t\nFetches all the structured information for a given message. 
imap_fetchtext(->) function is an alias of: imap_body(). :This\t\n
imap_gc ( resource $imap_stream , int $caches ):bool\t\nPurges the cache of entries of a specific type. 
imap_get_quota ( resource $imap_stream , string $quota_root ):array\t\n Returns the quota set to the mailbox account qroot
imap_get_quotaroot ( resource $imap_stream , string $quota_root ):array\t\nRetrieve the quota settings per user. The limit value represents the total amount of space allowed for this user's total mailbox usage. The usage value represents the user's current total mailbox capacity. 
imap_getacl ( resource $imap_stream , string $mailbox ):array\t\nGets the ACL for a given mailbox. 
imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern ):array\t\nGets information on the mailboxes. 
imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern ):array\t\n Return a list of subscribed mailboxes, in the same format as imap_getmailboxes()
imap_header(->) function is an alias of: imap_headerinfo(). :This\t\n
imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] ):object\t\nGets information about the given message number by reading its headers. 
imap_headers ( resource $imap_stream ):array\t\nReturns headers for all messages in a mailbox. 
imap_last_error ( void ):string\t\nGets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error. 
imap_list ( resource $imap_stream , string $ref , string $pattern ):array\t\nRead the list of mailboxes. 
imap_listmailbox(->) function is an alias of: imap_list(). :This\t\n
imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content ):array\t\n
imap_listsubscribed(->) function is an alias of: imap_lsub(). :This\t\n
imap_lsub ( resource $imap_stream , string $ref , string $pattern ):array\t\nGets an array of all the mailboxes that you have subscribed. 
imap_mail_compose ( array $envelope , array $body ):string\t\nCreate a MIME message based on the given envelope and body sections. 
imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] ):bool\t\nCopies mail messages specified by msglist to specified mailbox. 
imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] ):bool\t\nMoves mail messages specified by msglist to the specified mailbox. 
imap_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]] ):bool\t\n Send an email message
imap_mailboxmsginfo ( resource $imap_stream ):object\t\nChecks the current mailbox status on the server. It is similar to imap_status(), but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute. 
imap_mime_header_decode ( string $text ):array\t\nDecodes MIME message header extensions that are non ASCII text (see » RFC2047). 
imap_msgno ( resource $imap_stream , $uid ):int\t\n Get the sequence number associated with a UID
imap_mutf7_to_utf8 ( $in ):string\t\n
imap_num_msg ( resource $imap_stream ):int\t\nGets the number of messages in the current mailbox. 
imap_num_recent ( resource $imap_stream ):int\t\nGets the number of recent messages in the current mailbox. 
imap_open ( string $mailbox , string $username , string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]] ):resource\t\n Open an IMAP stream to a mailbox
imap_ping ( resource $imap_stream ):bool\t\nimap_ping() pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic "new mail check" as well as a "keep alive" for servers which have inactivity timeout. 
imap_qprint ( $):string\t\nConvert a quoted-printable string to an 8 bit string according to » RFC2045, section 6.7. 
imap_rename(->) function is an alias of: imap_renamemailbox(). :This\t\n
imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox ):bool\t\nThis function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names). 
imap_reopen ( resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]] ):bool\t\nReopens the specified stream to a new mailbox on an IMAP or NNTP server. 
imap_rfc822_parse_adrlist ( string $address , string $default_host ):array\t\nParses the address string as defined in » RFC2822 and for each address. 
imap_rfc822_parse_headers ( string $headers [, string $defaulthost = "UNKNOWN" ] ):object\t\nGets an object of various header elements, similar to imap_header(). 
imap_rfc822_write_address ( $mailbox , $host , $personal ):string\t\nReturns a properly formatted email address as defined in » RFC2822 given the needed information. 
imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number = "" [, int $options = 0 ]] ):bool\t\nSaves a part or the whole body of the specified message. 
imap_scan(->) function is an alias of: imap_listscan(). :This\t\n Read list of mailboxes containing a certain string
imap_scanmailbox(->) function is an alias of: imap_listscan(). :This\t\n
imap_search ( resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NULL ]] ):array\t\n Return a list of messages matching the given criteria
imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit ):bool\t\nSets an upper limit quota on a per mailbox basis. 
imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights ):bool\t\nSets the ACL for a giving mailbox. 
imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = NIL ] ):bool\t\nCauses a store to add the specified flag to the flags set for the messages in the specified sequence. 
imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NULL ]]] ):array\t\nGets and sorts message numbers by the given parameters. 
imap_status ( resource $imap_stream , string $mailbox , int $options ):object\t\nGets status information about the given mailbox. 
imap_subscribe ( resource $imap_stream , string $mailbox ):bool\t\nSubscribe to a new mailbox. 
imap_thread ( resource $imap_stream [, int $options = SE_FREE ] ):array\t\nGets a tree of a threaded message. 
imap_timeout ( int $timeout_type [, int $timeout = -1 ] ):mixed\t\nSets or fetches the imap timeout. 
imap_uid ( resource $imap_stream , $msg_number ):int\t\n Get the unique message id associated with a standard sequential message number
imap_undelete ( resource $imap_stream , int $msg_number [, int $flags = 0 ] ):bool\t\nRemoves the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move(). 
imap_unsubscribe ( resource $imap_stream , string $mailbox ):bool\t\nUnsubscribe from the specified mailbox. 
imap_utf7_decode ( $text ):string\t\n Decode a modified UTF-7 string
imap_utf7_encode ( $data ):string\t\n Encode a string in modified UTF-7
imap_utf8_to_mutf7 ( $in ):string\t\n
imap_utf8 ( $mime_encoded_text ):string\t\nConverts the given mime_encoded_text to UTF-8. 
ldap_8859_to_t61 ( $value ):string\t\n Translate 8859 characters to t61 characters
ldap_add ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool\t\nAdd entries in the LDAP directory. 
ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] ):bool\t\nBinds to the LDAP directory with specified RDN and password. 
ldap_close(->) function is an alias of: ldap_unbind(). :This\t\n
ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value [, array $serverctrls ] ):mixed\t\nCompare value of attribute with value of same attribute in an LDAP directory entry. 
ldap_connect ([ string $host = NULL [, int $port = 389 ]] ):resource\t\n Connect to an LDAP server
ldap_control_paged_result_response ( resource $link , resource $result [, string &$cookie [, int &$estimated ]] ):bool\t\nRetrieve the pagination information send by the server. 
ldap_control_paged_result ( resource $link , int $pagesize [, $iscritical = FALSE [, string $cookie = "" ]] ):bool\t\nEnable LDAP pagination by sending the pagination control (page size, cookie...). 
ldap_count_entries ( resource $link_identifier , resource $result_identifier ):int\t\nReturns the number of entries stored in the result of previous search operations. 
ldap_delete ( resource $link_identifier , string $dn [, array $serverctrls ] ):bool\t\nDeletes a particular entry in LDAP directory. 
ldap_dn2ufn ( $dn ):string\t\nTurns the specified dn, into a more user-friendly form, stripping off type names. 
ldap_err2str ( int $errno ):string\t\nReturns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check. 
ldap_errno ( resource $link_identifier ):int\t\nReturns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using ldap_err2str(). 
ldap_error ( resource $link_identifier ):string\t\n Get the current ldap error string
ldap_escape ( $value [, $ignore [, int $flags ]] ):string\t\nEscapes value for use in the context implied by flags. 
ldap_exop_passwd ( resource $link [, string $user [, string $oldpw [, string $newpw [, array &$serverctrls ]]]] ):mixed\t\nPerforms a PASSWD extended operation. 
ldap_exop_refresh ( resource $link , string $dn , $ttl ):int\t\nPerforms a Refresh extended operation and returns the data. 
ldap_exop_whoami ( resource $link ):string\t\nPerforms a WHOAMI extended operation and returns the data. 
ldap_exop ( resource $link , string $reqoid [, string $reqdata [, array $servercontrols [, string &$retdata [, string &$retoid ]]]] ):mixed\t\nPerforms an extended operation on the specified link with reqoid the OID of the operation and reqdata the data. 
ldap_explode_dn ( string $dn , int $with_attrib ):array\t\nSplits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN. 
ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier ):string\t\n Return first attribute
ldap_first_entry ( $link_identifier , $result_identifier ):resource\t\n Return first result id
ldap_first_reference ( $link , $result ):resource\t\n Return first reference
ldap_free_result ( resource $result_identifier ):bool\t\n Free result memory
ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier ):array\t\n Get attributes from a search result entry
ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier ):string\t\nFinds out the DN of an entry in the result. 
ldap_get_entries ( resource $link_identifier , resource $result_identifier ):array\t\nReads multiple entries from the given result, and then reading the attributes and multiple values. 
ldap_get_option ( resource $link_identifier , int $option , mixed &$retval ):bool\t\nSets retval to the value of the specified option. 
ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute ):array\t\n Get all values with lengths from a result entry
ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute ):array\t\n Get all values from a result entry
ldap_list ( $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] ):resource\t\n Single-level search
ldap_mod_add ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool\t\nAdds one or more attribute values to the specified dn. To add a whole new object see ldap_add() function. 
ldap_mod_del ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool\t\nRemoves one or more attribute values from the specified dn. Object deletions are done by the ldap_delete() function. 
ldap_mod_replace ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool\t\nReplaces one or more attributes from the specified dn. It may also add or remove attributes. 
ldap_modify_batch ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool\t\nModifies an existing entry in the LDAP directory. Allows detailed specification of the modifications to perform. 
ldap_modify(->) function is an alias of: ldap_mod_replace(). :This\t\n
ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier ):string\t\nRetrieves the attributes in an entry. The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute(). 
ldap_next_entry ( $link_identifier , $result_entry_identifier ):resource\t\nRetrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries. The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry(). 
ldap_next_reference ( $link , $entry ):resource\t\n Get next reference
ldap_parse_exop ( resource $link , resource $result [, string &$retdata [, string &$retoid ]] ):bool\t\nParse LDAP extended operation data from result object result 
ldap_parse_reference ( resource $link , resource $entry , array &$referrals ):bool\t\n Extract information from reference entry
ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals [, array &$serverctrls ]]]] ):bool\t\nParses an LDAP search result. 
ldap_read ( $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] ):resource\t\nPerforms the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory. 
ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , $deleteoldrdn [, array $serverctrls ] ):bool\t\nThe entry specified by dn is renamed/moved. 
ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] ):bool\t\n Bind to LDAP directory using SASL
ldap_search ( $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] ):resource\t\n Search LDAP tree under base_dn
ldap_set_option ( resource $link_identifier , int $option , mixed $newval ):bool\t\nSets the value of the specified option to be newval. 
ldap_set_rebind_proc ( resource $link , callable $callback ):bool\t\n Set a callback function to do re-binds on referral chasing.
ldap_sort ( resource $link , resource $result , string $sortfilter ):bool\t\n Sort LDAP result entries
ldap_start_tls ( resource $link ):bool\t\n Start TLS
ldap_t61_to_8859 ( $value ):string\t\n Translate t61 characters to 8859 characters
ldap_unbind ( resource $link_identifier ):bool\t\nUnbinds from the LDAP directory. 
libxml_clear_errors ( ):void\t\nlibxml_clear_errors() clears the libxml error buffer. 
libxml_disable_entity_loader ([ $disable = TRUE ] ):bool\t\nDisable/enable the ability to load external entities. 
libxml_get_errors ( void ):array\t\nRetrieve array of errors. 
libxml_get_last_error ( void ):LibXMLError\t\nRetrieve last error from libxml. 
libxml_set_external_entity_loader ( callable $resolver_function ):bool\t\nChanges the default external entity loader. 
libxml_set_streams_context ( resource $streams_context ):void\t\nSets the streams context for the next libxml document load or write. 
libxml_use_internal_errors ([ $use_errors = FALSE ] ):bool\t\nlibxml_use_internal_errors() allows you to disable standard libxml errors and enable user error handling. 
mcrypt_cbc ( int $cipher , $key , $data , int $mode [, $iv ] ):string\t\n CBC crypt/decrypt data using key key with cipher cipher starting with iv
mcrypt_cfb ( int $cipher , $key , $data , int $mode , $iv ):string\t\n CFB crypt/decrypt data using key key with cipher cipher starting with iv
mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_URANDOM ] ):string\t\n Create an initialization vector (IV)
mcrypt_decrypt ( $cipher , $key , $data , $mode [, $iv ] ):string\t\nDecrypts the data and returns the unencrypted data. 
mcrypt_ecb ( int $cipher , $key , $data , int $mode ):string\t\n ECB crypt/decrypt data using key key with cipher cipher starting with iv
mcrypt_enc_get_algorithms_name ( resource $td ):string\t\nThis function returns the name of the algorithm. 
mcrypt_enc_get_block_size ( resource $td ):int\t\nGets the blocksize of the opened algorithm. 
mcrypt_enc_get_iv_size ( resource $td ):int\t\nThis function returns the size of the IV of the algorithm specified by the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode. 
mcrypt_enc_get_key_size ( resource $td ):int\t\nGets the maximum supported key size of the algorithm in bytes. 
mcrypt_enc_get_modes_name ( resource $td ):string\t\nThis function returns the name of the mode. 
mcrypt_enc_get_supported_key_sizes ( resource $td ):array\t\nGets the supported key sizes of the opened algorithm. 
mcrypt_enc_is_block_algorithm_mode ( resource $td ):bool\t\nTells whether the algorithm of the opened mode works on blocks (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).. 
mcrypt_enc_is_block_algorithm ( resource $td ):bool\t\nTells whether the algorithm of the opened mode is a block algorithm. 
mcrypt_enc_is_block_mode ( resource $td ):bool\t\nTells whether the opened mode outputs blocks (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream). 
mcrypt_enc_self_test ( resource $td ):int\t\nThis function runs the self test on the algorithm specified by the descriptor td. 
mcrypt_encrypt ( $cipher , $key , $data , $mode [, $iv ] ):string\t\nEncrypts the data and returns it. 
mcrypt_generic_deinit ( resource $td ):bool\t\nThis function terminates encryption specified by the encryption descriptor (td). It clears all buffers, but does not close the module. You need to call mcrypt_module_close() yourself. (But PHP does this for you at the end of the script.) 
mcrypt_generic_end ( resource $td ):bool\t\n This function terminates encrypt specified by the descriptor td
mcrypt_generic_init ( resource $td , string $key , string $iv ):int\t\nYou need to call this function before every call to mcrypt_generic() or mdecrypt_generic(). 
mcrypt_generic ( resource $td , $data ):string\t\n This function encrypts the plaintext
mcrypt_get_block_size ( $cipher ):int\t\n Get the key size of cipher
mcrypt_get_cipher_name ( int $cipher ):string\t\n Get the key size of cipher
mcrypt_get_iv_size ( string $cipher , string $mode ):int\t\n Get the IV size of cipher (Usually the same as the blocksize)
mcrypt_get_key_size ( $cipher ):int\t\n Get the key size of cipher
mcrypt_list_algorithms ([ string $lib_dir = ini_get("mcrypt.algorithms_dir") ] ):array\t\nGets the list of all supported algorithms in the lib_dir parameter. 
mcrypt_list_modes ([ string $lib_dir = ini_get("mcrypt.modes_dir") ] ):array\t\nGets the list of all supported modes in the lib_dir parameter. 
mcrypt_module_close ( resource $td ):bool\t\nCloses the specified encryption handle. 
mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] ):int\t\nGets the blocksize of the specified algorithm. 
mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] ):int\t\nGets the maximum supported keysize of the opened mode. 
mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] ):array\t\nReturns an array with the key sizes supported by the specified algorithm. If it returns an empty array then all key sizes between 1 and mcrypt_module_get_algo_key_size() are supported by the algorithm. 
mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] ):bool\t\nThis function returns TRUE if the mode is for use with block algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb). 
mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] ):bool\t\nThis function returns TRUE if the specified algorithm is a block algorithm, or FALSE if it is a stream one. 
mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] ):bool\t\nThis function returns TRUE if the mode outputs blocks of bytes or FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream). 
mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory ):resource\t\nThis function opens the module of the algorithm and the mode to be used. The name of the algorithm is specified in algorithm, e.g. "twofish" or is one of the MCRYPT_ciphername constants. The module is closed by calling mcrypt_module_close(). 
mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] ):bool\t\nThis function runs the self test on the algorithm specified. 
mcrypt_ofb ( int $cipher , $key , $data , int $mode , $iv ):string\t\n OFB crypt/decrypt data using key key with cipher cipher starting with iv
mdecrypt_generic ( resource $td , $data ):string\t\nThis function decrypts data. Note that the length of the returned string can in fact be longer than the unencrypted string, due to the padding of the data. 
mhash_count ( void ):int\t\nGets the highest available hash ID. 
mhash_get_block_size ( $hash ):int\t\nGets the size of a block of the specified hash. 
mhash_get_hash_name ( int $hash ):string\t\nGets the name of the specified hash. 
mhash_keygen_s2k ( int $hash , $password , $salt , int $bytes ):string\t\n Generates a key using hash functions
mhash ( int $hash , $data [, $key ] ):string\t\nmhash() applies a hash function specified by hash to the data. 
msql_affected_rows ( resource $result ):int\t\nReturns number of affected rows by the last SELECT, UPDATE or DELETE query associated with result. 
msql_close ([ resource $link_identifier ] ):bool\t\n Close an mSQL connection
msql_connect ([ string $hostname ] ):resource\t\n Open a connection to an mSQL Server
msql_create_db ( string $database_name [, resource $link_identifier ] ):bool\t\nmsql_create_db() attempts to create a new database on the mSQL server. 
msql_createdb(->) function is an alias of: msql_create_db(). :This\t\n
msql_data_seek ( resource $result , int $row_number ):bool\t\nmsql_data_seek() moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specified row number. The next call to msql_fetch_row() would return that row. 
msql_db_query ( string $database , string $query [, $link_identifier ] ):resource\t\nmsql_db_query() selects a database and executes a query on it. 
msql_dbname(->) function is an alias of: msql_result(). :This\t\n
msql_drop_db ( string $database_name [, resource $link_identifier ] ):bool\t\nmsql_drop_db() attempts to drop (remove) a database from the mSQL server. 
msql_error ( void ):string\t\nmsql_error() returns the last issued error by the mSQL server. Note that only the last error message is accessible with msql_error(). 
msql_fetch_( resource $result [, int $result_type ] ):array\t\n Fetch a result row as an associative array
msql_fetch_field ( resource $result [, int $field_offset = 0 ] ):object\t\nmsql_fetch_field() can be used in order to obtain information about fields in a certain query result. 
msql_fetch_( resource $result ):object\t\n Fetch a result row as an object
msql_fetch_row ( resource $result ):array\t\n Get a result row as an enumerated array
msql_field_flags ( resource $result , int $field_offset ):string\t\nmsql_field_flags() returns the field flags of the specified field. 
msql_field_len ( resource $result , $field_offset ):int\t\nmsql_field_len() returns the length of the specified field. 
msql_field_name ( resource $result , int $field_offset ):string\t\nmsql_field_name() gets the name of the specified field index. 
msql_field_seek ( resource $result , int $field_offset ):bool\t\nSeeks to the specified field offset. If the next call to msql_fetch_field() won't include a field offset, this field would be returned. 
msql_field_table ( resource $result , $field_offset ):int\t\nReturns the name of the table that the specified field is in. 
msql_field_type ( resource $result , int $field_offset ):string\t\nmsql_field_type() gets the type of the specified field index. 
msql_fieldflags(->) function is an alias of: msql_field_flags(). :This\t\n
msql_fieldlen(->) function is an alias of: msql_field_len(). :This\t\n
msql_fieldname(->) function is an alias of: msql_field_name(). :This\t\n
msql_fieldtable(->) function is an alias of: msql_field_table(). :This\t\n
msql_fieldtype(->) function is an alias of: msql_field_type(). :This\t\n
msql_free_result ( resource $result ):bool\t\nmsql_free_result() frees the memory associated with query_identifier. When PHP completes a request, this memory is freed automatically, so you only need to call this function when you want to make sure you don't use too much memory while the script is running. 
msql_list_dbs ([ $link_identifier ] ):resource\t\nmsql_list_tables() lists the databases available on the specified link_identifier. 
msql_list_fields ( string $database , string $tablename [, $link_identifier ] ):resource\t\nmsql_list_fields() returns information about the given table. 
msql_list_tables ( string $database [, $link_identifier ] ):resource\t\nmsql_list_tables() lists the tables on the specified database. 
msql_num_fields ( resource $result ):int\t\nmsql_num_fields() returns the number of fields in a result set. 
msql_num_rows ( resource $query_identifier ):int\t\nmsql_num_rows() returns the number of rows in a result set. 
msql_numfields(->) function is an alias of: msql_num_fields(). :This\t\n
msql_numrows(->) function is an alias of: msql_num_rows(). :This\t\n
msql_pconnect ([ string $hostname ] ):resource\t\n Open a persistent connection to an mSQL Server
msql_query ( string $query [, $link_identifier ] ):resource\t\nmsql_query() sends a query to the currently active database on the server that's associated with the specified link identifier. 
msql_regcase(->) function is an alias of: sql_regcase(). :This\t\n
msql_result ( resource $result , int $row [, mixed $field ] ):string\t\n Get result data
msql_select_db ( string $database_name [, resource $link_identifier ] ):bool\t\n Select an mSQL database
msql_tablename(->) function is an alias of: msql_result(). :This\t\n
msql(->) function is an alias of: msql_db_query(). :This\t\n
mssql_bind ( resource $stmt , string $param_name , mixed &$var , int $type [, $is_output = FALSE [, $is_null = FALSE [, int $maxlen = -1 ]]] ):bool\t\nBinds a parameter to a stored procedure or a remote stored procedure. 
mssql_close ([ resource $link_identifier ] ):bool\t\n Closes a connection to a MS-SQL server
mssql_connect ([ string $servername [, string $username [, string $password [, bool $new_link = FALSE ]]]] ):resource\t\n Establishes a connection to a MS-SQL server
mssql_data_seek ( resource $result_identifier , int $row_number ):bool\t\nmssql_data_seek() moves the internal row pointer of the MS SQL result associated with the specified result identifier to point to the specified row number, first row being number 0. The next call to mssql_fetch_row() would return that row. 
mssql_execute ( resource $stmt [, bool $skip_results = FALSE ] ):mixed\t\nExecutes a stored procedure on a MS SQL server database 
mssql_fetch_( resource $result [, int $result_type = MSSQL_BOTH ] ):array\t\n Returns an associative array of the current row in the result set specified by result_id
mssql_fetch_assoc ( resource $result_id ):array\t\nReturns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mssql_fetch_assoc() is equivalent to calling mssql_fetch_array() with MSSQL_ASSOC for the optional second parameter. 
mssql_fetch_batch ( resource $result ):int\t\nReturns the next batch of records. 
mssql_fetch_field ( resource $result [, int $field_offset = -1 ] ):object\t\nmssql_fetch_field() can be used in order to obtain information about fields in a certain query result. 
mssql_fetch_( resource $result ):object\t\n Returns a psuedo-object of the current row in the result set specified by result_id
mssql_fetch_row ( resource $result ):array\t\n Returns an array of the current row in the result set specified by result_id
mssql_field_length ( resource $result [, $offset = -1 ] ):int\t\nReturns the length of field no. offset in result. 
mssql_field_name ( resource $result [, int $offset = -1 ] ):string\t\nReturns the name of field no. offset in result. 
mssql_field_seek ( resource $result , int $field_offset ):bool\t\nSeeks to the specified field offset. If the next call to mssql_fetch_field() won't include a field offset, this field would be returned. 
mssql_field_type ( resource $result [, int $offset = -1 ] ):string\t\nReturns the type of field no. offset in result. 
mssql_free_result ( resource $result ):bool\t\nmssql_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call mssql_free_result() with the result identifier as an argument and the associated result memory will be freed. 
mssql_free_statement ( resource $stmt ):bool\t\nmssql_free_statement() only needs to be called if you are worried about using too much memory while your script is running. All statement memory will automatically be freed when the script ends. You may call mssql_free_statement() with the statement identifier as an argument and the associated statement memory will be freed. 
mssql_get_last_message ( void ):string\t\nGets the last message from the MS-SQL server 
mssql_guid_( $binary [, bool $short_format = FALSE ] ):string\t\nConverts a 16 byte binary GUID to a string. 
mssql_init ( string $sp_name [, $link_identifier ] ):resource\t\nInitializes a stored procedure or a remote stored procedure. 
mssql_min_error_severity ( int $severity ):void\t\nSets the minimum error severity. 
mssql_min_message_severity ( int $severity ):void\t\nSets the minimum message severity. 
mssql_next_result ( resource $result_id ):bool\t\nWhen sending more than one SQL statement to the server or executing a stored procedure with multiple results, it will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the rows from the new result set. 
mssql_num_fields ( resource $result ):int\t\nmssql_num_fields() returns the number of fields in a result set. 
mssql_num_rows ( resource $result ):int\t\nmssql_num_rows() returns the number of rows in a result set. 
mssql_pconnect ([ string $servername [, string $username [, string $password [, bool $new_link = FALSE ]]]] ):resource\t\n Establishes a persistent connection to a MS-SQL server
mssql_query ( string $query [, resource $link_identifier [, int $batch_size = 0 ]] ):mixed\t\nmssql_query() sends a query to the currently active database on the server that's associated with the specified link identifier. 
mssql_result ( resource $result , int $row , mixed $field ):string\t\nmssql_result() returns the contents of one cell from a MS SQL result set. 
mssql_rows_affected ( resource $link_identifier ):int\t\nReturns the number of records affected by the last write query. 
mssql_select_db ( string $database_name [, resource $link_identifier ] ):bool\t\n Select a MS-SQL database
mysql_affected_rows ([ resource $link_identifier = NULL ] ):int\t\nGet the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier. 
mysql_client_encoding ([ resource $link_identifier = NULL ] ):string\t\nRetrieves the character_set variable from MySQL. 
mysql_close ([ resource $link_identifier = NULL ] ):bool\t\n Close a MySQL connection
mysql_connect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = FALSE [, int $client_flags = 0 ]]]]] ):resource\t\nOpens or reuses a connection to a MySQL server. 
mysql_create_db ( string $database_name [, resource $link_identifier = NULL ] ):bool\t\nmysql_create_db() attempts to create a new database on the server associated with the specified link identifier. 
mysql_data_seek ( resource $result , int $row_number ):bool\t\n Move internal result pointer
mysql_db_name ( resource $result , int $row [, mixed $field = NULL ] ):string\t\nRetrieve the database name from a call to mysql_list_dbs(). 
mysql_db_query ( string $database , string $query [, $link_identifier = NULL ] ):resource\t\nmysql_db_query() selects a database, and executes a query on it. 
mysql_drop_db(->) mysql_drop_db ( string $database_name [, resource $link_identifier = NULL ] ):bool\t\nmysql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier. This function is deprecated, it is preferable to use mysql_query() to issue an sql DROP DATABASE statement instead. 
mysql_errno ([ resource $link_identifier = NULL ] ):int\t\n Returns the number of the error message from previous MySQL operation
mysql_error ([ resource $link_identifier = NULL ] ):string\t\nReturns the error text from the last MySQL function.
mysql_escape_string(->) mysql_escape_( $unescaped_):string\t\n Escape string for mysql query
mysql_fetch_( resource $result [, int $result_type = MYSQL_BOTH ] ):array\t\nReturns an array that corresponds to the fetched row and moves the internal data pointer ahead. 
mysql_fetch_assoc ( resource $result ):array\t\nReturns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter. It only returns an associative array. 
mysql_fetch_field ( resource $result [, int $field_offset = 0 ] ):object\t\nReturns an object containing field information. This function can be used to obtain information about fields in the provided query result. 
mysql_fetch_lengths ( resource $result ):array\t\n Gets max data size of each column in a result
mysql_fetch_( resource $result [, string $class_name [, array $params ]] ):object\t\nReturns an object with properties that correspond to the fetched row and moves the internal data pointer ahead. 
mysql_fetch_row ( resource $result ):array\t\nReturns a numerical array that corresponds to the fetched row and moves the internal data pointer ahead. 
mysql_field_flags ( resource $result , int $field_offset ):string\t\nmysql_field_flags() returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode(). 
mysql_field_len ( resource $result , $field_offset ):int\t\nmysql_field_len() returns the length of the specified field. 
mysql_field_name ( resource $result , int $field_offset ):string\t\nmysql_field_name() returns the name of the specified field index. 
mysql_field_seek ( resource $result , int $field_offset ):bool\t\nSeeks to the specified field offset. If the next call to mysql_fetch_field() doesn't include a field offset, the field offset specified in mysql_field_seek() will be returned. 
mysql_field_table ( resource $result , int $field_offset ):string\t\nReturns the name of the table that the specified field is in. 
mysql_field_type ( resource $result , int $field_offset ):string\t\nmysql_field_type() is similar to the mysql_field_name() function. The arguments are identical, but the field type is returned instead. 
mysql_free_result ( resource $result ):bool\t\n Free result memory
mysql_get_client_info ( void ):string\t\nmysql_get_client_info() returns a string that represents the client library version. 
mysql_get_host_info ([ resource $link_identifier = NULL ] ):string\t\nDescribes the type of connection in use for the connection, including the server host name. 
mysql_get_proto_info ([ resource $link_identifier = NULL ] ):int\t\nRetrieves the MySQL protocol. 
mysql_get_server_info ([ resource $link_identifier = NULL ] ):string\t\nRetrieves the MySQL server version. 
mysql_info ([ resource $link_identifier = NULL ] ):string\t\nReturns detailed information about the last query. 
mysql_insert_id ([ resource $link_identifier = NULL ] ):int\t\nRetrieves the ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT). 
mysql_list_dbs ([ $link_identifier = NULL ] ):resource\t\nReturns a result pointer containing the databases available from the current mysql daemon. 
mysql_list_fields(->) mysql_list_fields ( string $database_name , string $table_name [, $link_identifier = NULL ] ):resource\t\n List MySQL result fields
mysql_list_processes ([ $link_identifier = NULL ] ):resource\t\nRetrieves the current MySQL server threads. 
mysql_list_tables(->) mysql_list_tables ( string $database [, $link_identifier = NULL ] ):resource\t\n List tables in a MySQL database
mysql_num_fields ( resource $result ):int\t\nRetrieves the number of fields from a query. 
mysql_num_rows ( resource $result ):int\t\nRetrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set. To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or DELETE query, use mysql_affected_rows(). 
mysql_pconnect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0 ]]]] ):resource\t\n Opens a persistent connection to a MySQL Server
mysql_ping ([ resource $link_identifier = NULL ] ):bool\t\n Ping a server connection. If no connection then reconnect.
mysql_query ( string $query [, resource $link_identifier = NULL ] ):mixed\t\nmysql_query() sends a unique query (multiple queries are not supported) to the currently active database on the server that's associated with the specified link_identifier. 
mysql_real_escape_( $unescaped_[, resource $link_identifier = NULL ] ):string\t\n Escape special characters in a string for use in a SQL statement, taking into account the current charset of the connection
mysql_result ( resource $result , int $row [, mixed $field = 0 ] ):string\t\n Gets result data
mysql_select_db ( string $database_name [, resource $link_identifier = NULL ] ):bool\t\nSets the current active database on the server that's associated with the specified link identifier. Every subsequent call to mysql_query() will be made on the active database. 
mysql_set_charset ( string $charset [, resource $link_identifier = NULL ] ):bool\t\nSets the default character set for the current connection. 
mysql_stat ([ resource $link_identifier = NULL ] ):string\t\nmysql_stat() returns the current server status. 
mysql_tablename(->) mysql_tablename ( resource $result , int $i ):string\t\n
mysql_thread_id ([ resource $link_identifier = NULL ] ):int\t\nRetrieves the current thread ID. If the connection is lost, and a reconnect with mysql_ping() is executed, the thread ID will change. This means only retrieve the thread ID when needed. 
mysql_unbuffered_query ( string $query [, $link_identifier = NULL ] ):resource Sends the SQL query query to MySQL without automatically fetching and buffering the result rows as mysql_query() does. 
mysqli_bind_param(->) function is an alias of: mysqli_stmt_bind_param(). :This\t\n Bind variables to a prepared statement as parameters
mysqli_bind_result(->) function is an alias of: mysqli_stmt_bind_result(). :This\t\n Bind variables to a prepared statement for result storage
mysqli_client_encoding(->) function is an alias of: mysqli_character_set_name(). :This\t\n
mysqli_connect(->) function is an alias of: mysqli::__construct() :This\t\nAlthough the mysqli::__construct() documentation also includes procedural examples that use the mysqli_connect() function, here is a short example: 
oriented style:Object\t\n
mysqli_disable_rpl_parse ( mysqli $link ):bool\t\n
mysqli_enable_reads_from_master ( mysqli $link ):bool\t\n
mysqli_enable_rpl_parse ( mysqli $link ):bool\t\n
mysqli_escape_string(->) function is an alias of: mysqli_real_escape_string(). :This\t\n
mysqli_execute(->) function is an alias of: mysqli_stmt_execute(). :This\t\n Execute a prepared statement
mysqli_fetch(->) function is an alias of: mysqli_stmt_fetch(). :This\t\n Fetch results from a prepared statement into the bound variables
mysqli_get_cache_stats ( void ):array\t\nReturns an empty array. Available only with mysqlnd. 
mysqli_get_client_stats ( void ):array\t\nReturns client per-process statistics. Available only with mysqlnd. 
mysqli_get_links_stats ( void ):array\t\nmysqli_get_links_stats() returns information about open and cached MySQL links. 
mysqli_get_metadata(->) function is an alias of: mysqli_stmt_result_metadata(). :This\t\n return result set from statement
mysqli_master_query ( mysqli $link , string $query ):bool\t\n Enforce execution of a query on the master in a master/slave setup
mysqli_param_count(->) function is an alias of: mysqli_stmt_param_count(). :This\t\n{\t\nReturn the number of parameter for the given statement
mysqli_report(->) function is an alias of: mysqli_driver->report_mode :This\t\n
mysqli_rpl_parse_enabled ( mysqli $link ):int\t\n
mysqli_rpl_probe ( mysqli $link ):bool\t\n
mysqli_send_long_data(->) function is an alias of: mysqli_stmt_send_long_data(). :This\t\n
mysqli_set_opt(->) function is an alias of: mysqli_options(). :This\t\n
mysqli_slave_query ( mysqli $link , string $query ):bool\t\n Enforce execution of a query on a slave in a master/slave setup
oci_bind_array_by_name ( resource $statement , string $name , array &$var_array , int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC ]] ):bool\t\nBinds the PHP array var_array to the Oracle placeholder name, which points to an Oracle PL/SQL array. Whether it will be used for input or output will be determined at run-time. 
oci_bind_by_name ( resource $statement , string $bv_name , mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR ]] ):bool\t\n Bind a PHP variable to an Oracle placeholder by name
oci_cancel ( resource $statement ):bool\t\nInvalidates a cursor, freeing all associated resources and cancels the ability to read from it. 
oci_client_version ( void ):string\t\nReturns a string containing the version number of the Oracle C client library that PHP is linked with. 
oci_close ( resource $connection ):bool\t\n Disconnect from database
oci_commit ( resource $connection ):bool\t\n Commit the current context
oci_connect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] ):resource\t\n Connect to an Oracle database and log on. Returns a new session.
oci_define_by_name ( resource $statement , string $column_name , mixed &$variable [, int $type = SQLT_CHR ] ):bool\t\n Define a PHP variable to an Oracle column by name
oci_error ([ resource $resource ] ):array\t\n Return the last error of stmt|conn|global. If no error happened returns false.
oci_execute ( resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS ] ):bool\t\n Execute a parsed statement
oci_fetch_all ( resource $statement , array &$output [, $skip = 0 [, $maxrows = -1 [, $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC ]]] ):int\t\n Fetch all rows of result data into an array
oci_fetch_( resource $statement [, int $mode ] ):array\t\n Fetch a result row as an array
oci_fetch_assoc ( resource $statement ):array\t\n Fetch a result row as an associative array
oci_fetch_( resource $statement ):object\t\n Fetch a result row as an object
oci_fetch_row ( resource $statement ):array\t\n Fetch a result row as an enumerated array
oci_fetch ( resource $statement ):bool\t\n Prepare a new row of data for reading
oci_field_is_null ( resource $statement , mixed $field ):bool\t\nChecks if the given field from the current row of statement is NULL. 
oci_field_name ( resource $statement , mixed $field ):string\t\nReturns the name of the field. 
oci_field_precision ( resource $statement , mixed $field ):int\t\n Tell the precision of a column
oci_field_scale ( resource $statement , mixed $field ):int\t\n Tell the scale of a column
oci_field_size ( resource $statement , mixed $field ):int\t\nReturns the size of a field. 
oci_field_type_raw ( resource $statement , mixed $field ):int\t\n Tell the raw oracle data type of a column
oci_field_type ( resource $statement , $field ):mixed\t\nReturns a field's data type name. 
oci_free_descriptor ( resource $descriptor ):bool\t\nFrees a descriptor allocated by oci_new_descriptor(). 
oci_free_statement ( resource $statement ):bool\t\nFrees resources associated with Oracle's cursor or statement, which was received from as a result of oci_parse() or obtained from Oracle. 
oci_get_implicit_resultset ( $statement ):resource\t\n
oci_internal_debug ( bool $onoff ):void\t\nEnables or disables internal debug output. 
oci_lob_copy ( OCI-Lob $lob_to , OCI-Lob $lob_from [, int $length = 0 ] ):bool\t\n Copies data from a LOB to another LOB
oci_lob_is_equal ( OCI-Lob $lob1 , OCI-Lob $lob2 ):bool\t\nCompares two LOB/FILE locators. 
oci_new_collection ( resource $connection , string $tdo [, string $schema = NULL ] ):OCI-Collection\t\nAllocates a new collection object. 
oci_new_connect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] ):resource\t\n Connect to an Oracle database and log on. Returns a new session.
oci_new_cursor ( $connection ):resource\t\nAllocates a new statement handle on the specified connection. 
oci_new_descriptor ( resource $connection [, int $type = OCI_DTYPE_LOB ] ):OCI-Lob\t\nAllocates resources to hold descriptor or LOB locator. 
oci_num_fields ( resource $statement ):int\t\nGets the number of columns in the given statement. 
oci_num_rows ( resource $statement ):int\t\nGets the number of rows affected during statement execution. 
oci_parse ( $connection , string $sql_text ):resource\t\n Parse a query and return a statement
oci_password_change ( resource $connection , string $username , string $old_password , string $new_password ):bool\t\n Changes the password of an account
oci_pconnect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] ):resource\t\n Connect to an Oracle database using a persistent connection and log on. Returns a new session.
oci_register_taf_callback ( resource $connection [, mixed $callbackFn ] ):bool\t\n
oci_result ( resource $statement , $field ):mixed\t\n Return a single column of result data
oci_rollback ( resource $connection ):bool\t\n Rollback the current context
oci_server_version ( resource $connection ):string\t\nReturns a string with the Oracle Database version and available options 
oci_set_action ( resource $connection , string $action_name ):bool\t\n
oci_set_client_identifier ( resource $connection , string $client_identifier ):bool\t\n
oci_set_client_info ( resource $connection , string $client_info ):bool\t\n
oci_set_edition ( string $edition ):bool\t\n
oci_set_module_name ( resource $connection , string $module_name ):bool\t\n
oci_set_prefetch ( resource $statement , int $rows ):bool\t\n Sets the number of rows to be prefetched on execute to prefetch_rows for stmt
oci_statement_type ( resource $statement ):string\t\nReturns a keyword identifying the type of the OCI8 statement. 
oci_unregister_taf_callback ( resource $connection ):bool\t\nUnregister the user-defined callback function registered to connection by oci_register_taf_callback(). See OCI8 Transparent Application Failover (TAF) Support for information. 
openssl_cipher_iv_length ( string $method ):int\t\nGets the cipher initialization vector (iv) length. 
openssl_csr_export_to_file ( mixed $csr , string $outfilename [, $notext = TRUE ] ):bool\t\nopenssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it in PEM format into the file named by outfilename. 
openssl_csr_export ( mixed $csr , string &$out [, $notext = TRUE ] ):bool\t\nopenssl_csr_export() takes the Certificate Signing Request represented by csr and stores it in PEM format in out, which is passed by reference. 
openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = TRUE ] ):resource\t\nopenssl_csr_get_public_key() extracts the public key from csr and prepares it for use by other functions. 
openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = TRUE ] ):array\t\nopenssl_csr_get_subject() returns subject distinguished name information encoded in the csr including fields commonName (CN), organizationName (O), countryName (C) etc. 
openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] ):mixed\t\n Generates a privkey and CSR
openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]] ):resource\t\n Signs a cert with another CERT
openssl_decrypt ( $data , $method , $key [, int $options = 0 [, $iv = "" [, $tag = "" [, $aad = "" ]]]] ):string\t\nTakes a raw or base64 encoded string and decrypts it using a given method and key. 
openssl_dh_compute_key ( $pub_key , resource $dh_key ):string\t\nThe shared secret returned by openssl_dh_compute_key() is often used as an encryption key to secretly communicate with a remote party. This is known as the Diffie-Hellman key exchange. 
openssl_digest ( $data , $method [, bool $raw_output = FALSE ] ):string\t\n
openssl_encrypt ( $data , $method , $key [, int $options = 0 [, $iv = "" [, &$tag = NULL [, $aad = "" [, int $tag_length = 16 ]]]]] ):string\t\nEncrypts given data with given method and key, returns a raw or base64 encoded string 
openssl_error_( void ):string\t\nopenssl_error_string() returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one. 
openssl_free_key ( resource $key_identifier ):void\t\nopenssl_free_key() frees the key associated with the specified key_identifier from memory. 
openssl_get_cert_locations ( void ):array\t\nopenssl_get_cert_locations() returns an array with information about the available certificate locations that will be searched for SSL certificates. 
openssl_get_cipher_methods ([ bool $aliases = FALSE ] ):array\t\nGets a list of available cipher methods. 
openssl_get_curve_names ( void ):array\t\n
openssl_get_md_methods ([ bool $aliases = FALSE ] ):array\t\nGets a list of available digest methods. 
openssl_get_privatekey(->) function is an alias of: openssl_pkey_get_private(). :This\t\n
openssl_get_publickey(->) function is an alias of: openssl_pkey_get_public(). :This\t\n
openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id [, string $method = "RC4" [, string $iv ]] ):bool opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. 
openssl_pbkdf2 ( $password , $salt , int $key_length , int $iterations [, $digest_algorithm = "sha1" ] ):string\t\nopenssl_pbkdf2() computes PBKDF2 (Password-Based Key Derivation Function 2), a key derivation function defined in PKCS5 v2. 
openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] ):bool\t\nopenssl_pkcs12_export_to_file() stores x509 into a file named by filename in a PKCS#12 file format. 
openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] ):bool\t\nopenssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format. 
openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass ):bool\t\nopenssl_pkcs12_read() parses the PKCS#12 certificate store supplied by pkcs12 into a array named certs. 
openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] ):bool\t\nDecrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey. 
openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] ):bool\t\nopenssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts. 
openssl_pkcs7_read ( string $infilename , array &$certs ):bool\t\n
openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] ):bool\t\nopenssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters. 
openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content [, string $p7bfilename ]]]]] ):mixed\t\nopenssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature. 
openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] ):bool\t\n Gets an exportable representation of a key into a file
openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] ):bool\t\n Gets an exportable representation of a key into a string or file
openssl_pkey_free ( resource $key ):void\t\nThis function frees a private key created by openssl_pkey_new(). 
openssl_pkey_get_details ( resource $key ):array\t\nThis function returns the key details (bits, key, type). 
openssl_pkey_get_private ( mixed $key [, string $passphrase = "" ] ):resource\t\nopenssl_get_privatekey() parses key and prepares it for use by other functions. 
openssl_pkey_get_public ( mixed $certificate ):resource\t\nopenssl_get_publickey() extracts the public key from certificate and prepares it for use by other functions. 
openssl_pkey_new ([ array $configargs ] ):resource\t\n Generates a new private key
openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] ):bool\t\n Decrypts data with private key
openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] ):bool\t\n Encrypts data with private key
openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] ):bool\t\n Decrypts data with public key
openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] ):bool\t\n Encrypts data with public key
openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] ):string\t\n
openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids [, string $method = "RC4" [, string &$iv ]] ):int\t\nopenssl_seal() seals (encrypts) data by using the given method with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. 
openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] ):bool\t\nopenssl_sign() computes a signature for the specified data by generating a cryptographic digital signature using the private key associated with priv_key_id. Note that the data itself is not encrypted. 
openssl_spki_export_challenge ( &$spkac ):string\t\nExports challenge from encoded signed public key and challenge 
openssl_spki_export ( &$spkac ):string\t\nExports PEM formatted public key from encoded signed public key and challenge 
openssl_spki_new ( resource &$privkey , &$challenge [, int $algorithm = 0 ] ):string\t\nGenerates a signed public key and challenge using specified hashing algorithm 
openssl_spki_verify ( &$spkac ):string\t\nValidates the supplied signed public key and challenge 
openssl_verify ( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] ):int\t\nopenssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing. 
openssl_x509_check_private_key ( mixed $cert , mixed $key ):bool\t\n Checks if a private key corresponds to a CERT
openssl_x509_checkpurpose ( mixed $x509cert , $purpose [, array $cainfo = array() [, string $untrustedfile ]] ):int\t\nopenssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose. 
openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, $notext = TRUE ] ):bool\t\nopenssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format. 
openssl_x509_export ( mixed $x509 , string &$output [, $notext = TRUE ] ):bool\t\nopenssl_x509_export() stores x509 into a string named by output in a PEM encoded format. 
openssl_x509_fingerprint ( mixed $x509 [, $hash_algorithm = "sha1" [, bool $raw_output = FALSE ]] ):string\t\nopenssl_x509_fingerprint() returns the digest of x509 as a string. 
openssl_x509_free ( resource $x509cert ):void\t\nopenssl_x509_free() frees the certificate associated with the specified x509cert resource from memory. 
openssl_x509_parse ( mixed $x509cert [, bool $shortnames = TRUE ] ):array\t\nopenssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc. 
openssl_x509_read ( mixed $x509certdata ):resource\t\nopenssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it. 
PDO_DBLIB Data Source Name (DSN) is composed of the following elements: :The\t\n
PDO_FIREBIRD Data Source Name (DSN) is composed of the following elements: :The\t\n
PDO_MYSQL Data Source Name (DSN) is composed of the following elements: :The\t\n
PDO_OCI Data Source Name (DSN) is composed of the following elements: :The\t\n
PDO_ODBC Data Source Name (DSN) is composed of the following elements: :The\t\n
PDO_PGSQL Data Source Name (DSN) is composed of the following elements, delimited by spaces or semicolons: :The\t\n
bool PDO::pgsqlCopyFromArray ( string $table_name , array $rows [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] ):public\t\nCopies data from rows array to table table_name using delimiter as fields delimiter and fields list 
bool PDO::pgsqlCopyFromFile ( string $table_name , string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] ):public\t\nCopies data from file specified by filename into table table_name using delimiter as fields delimiter and fields list 
array PDO::pgsqlCopyToArray ( string $table_name [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] ):public\t\nCopies data from table into array using delimiter as fields delimiter and fields list 
bool PDO::pgsqlCopyToFile ( string $table_name , string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] ):public\t\nCopies data from table into file specified by filename using delimiter as fields delimiter and fields list 
array PDO::pgsqlGetNotify ([ int $result_type = PDO::FETCH_USE_DEFAULT [, int $ms_timeout = 0 ]] ):public\t\nReturns a result set representing a pending asynchronous notification. 
int PDO::pgsqlGetPid ( void ):public\t\nReturns the server's PID. 
string PDO::pgsqlLOBCreate ( void ):public\t\n
resource PDO::pgsqlLOBOpen ( string $oid [, string $mode = "rb" ] ):public\t\n
bool PDO::pgsqlLOBUnlink ( string $oid ):public\t\n
PDO_SQLITE Data Source Name (DSN) is composed of the following elements: :The\t\n
bool PDO::sqliteCreateAggregate ( string $function_name , callable $step_func , callable $finalize_func [, int $num_args ] ):public\t\n
bool PDO::sqliteCreateCollation ( string $name , callable $callback ):public\t\n
bool PDO::sqliteCreateFunction ( string $function_name , callable $callback [, int $num_args = -1 [, int $flags = 0 ]] ):public\t\n
pg_affected_rows ( resource $result ):int\t\n Returns the number of affected tuples
pg_cancel_query ( resource $connection ):bool\t\npg_cancel_query() cancels an asynchronous query sent with pg_send_query(), pg_send_query_params() or pg_send_execute(). You cannot cancel a query executed using pg_query(). 
pg_client_encoding ([ resource $connection ] ):string\t\n Get the current client encoding
pg_close ([ resource $connection ] ):bool\t\n Close a PostgreSQL connection
pg_connect_poll ( resource $connection ):int\t\npg_connect_poll() polls the status of a PostgreSQL connection created by calling pg_connect() with the PGSQL_CONNECT_ASYNC option. 
pg_connect(->) pg_connect ( string $connection_string [, int $connect_type ] ):resource\t\n Open a PostgreSQL connection
pg_connection_busy ( resource $connection ):bool\t\npg_connection_busy() determines whether or not a connection is busy. If it is busy, a previous query is still executing. If pg_get_result() is used on the connection, it will be blocked. 
pg_connection_reset ( resource $connection ):bool\t\npg_connection_reset() resets the connection. It is useful for error recovery. 
pg_connection_status ( resource $connection ):int\t\npg_connection_status() returns the status of the specified connection. 
pg_consume_input ( resource $connection ):bool\t\npg_consume_input() consumes any input waiting to be read from the database server. 
pg_convert ( resource $connection , string $table_name , $assoc_[, int $options = 0 ] ):array\t\n Check and convert values for PostgreSQL SQL statement
pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] ):bool\t\npg_copy_from() inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records. 
pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] ):array\t\npg_copy_to() copies a table to an array. It issues COPY TO SQL command internally to retrieve records. 
pg_dbname ([ resource $connection ] ):string\t\npg_dbname() returns the name of the database that the given PostgreSQL connection resource. 
pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] ):mixed\t\n Delete records has ids (id=>value)
pg_end_copy ([ resource $connection ] ):bool\t\npg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error. 
pg_escape_bytea ([ resource $connection ], $data ):string\t\n Escape binary for bytea type
pg_escape_identifier ([ resource $connection ], $data ):string\t\n
pg_escape_literal ([ resource $connection ], $data ):string\t\n
pg_escape_([ resource $connection ], $data ):string\t\n Escape string for text/char type
pg_execute ([ $connection ], string $stmtname , array $params ):resource\t\n
pg_fetch_all_columns ( resource $result [, int $column = 0 ] ):array\t\n
pg_fetch_all ( resource $result [, int $result_type = PGSQL_ASSOC ] ):array\t\n Fetch all rows into array
pg_fetch_( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]] ):array\t\n Fetch a row as an array
pg_fetch_assoc ( resource $result [, int $row ] ):array\t\n Fetch a row as an assoc array
pg_fetch_( resource $result [, int $row [, int $result_type = PGSQL_ASSOC ]] ):object\t\n Fetch a row as an object
pg_fetch_result ( resource $result , int $row , mixed $field ):string\t\n Returns values from a result identifier
pg_fetch_row ( resource $result [, int $row ] ):array\t\n Get a row as an enumerated array
pg_field_is_null ( resource $result , $row , mixed $field ):int\t\n Test if a field is NULL
pg_field_name ( resource $result , int $field_number ):string\t\n Returns the name of the field
pg_field_num ( resource $result , string $field_name ):int\t\n Returns the field number of the named field
pg_field_prtlen ( resource $result , $row_number , mixed $field_name_or_number ):int\t\n Returns the printed length
pg_field_size ( resource $result , $field_number ):int\t\n Returns the internal size of the field
pg_field_table ( resource $result , int $field_number [, bool $oid_only = FALSE ] ):mixed\t\npg_field_table() returns the name of the table that field belongs to, or the table's oid if oid_only is TRUE. 
pg_field_type_oid ( resource $result , $field_number ):int\t\n
pg_field_type ( resource $result , int $field_number ):string\t\n Returns the type name for the given field
pg_flush ( resource $connection ):mixed\t\npg_flush() flushes any outbound query data waiting to be sent on the connection. 
pg_free_result ( resource $result ):bool\t\n Free result memory
pg_get_notify ( resource $connection [, int $result_type ] ):array\t\npg_get_notify() gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued. 
pg_get_pid ( resource $connection ):int\t\npg_get_pid() gets the backend's (database server process) PID. The PID is useful to determine whether or not a NOTIFY message received via pg_get_notify() is sent from another process or not. 
pg_get_result ([ $connection ] ):resource\t\n Get asynchronous query result
pg_host ([ resource $connection ] ):string\t\npg_host() returns the host name of the given PostgreSQL connection resource is connected to. 
pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] ):mixed\t\n Insert values (filed=>value) to table
pg_last_error ([ resource $connection ] ):string\t\n Get the error message string
pg_last_notice ( resource $connection [, int $option = PGSQL_NOTICE_LAST ] ):mixed\t\n Returns the last notice set by the backend
pg_last_oid ( resource $result ):string\t\n Returns the last object identifier
pg_lo_close ( resource $large_object ):bool\t\n Close a large object
pg_lo_create ([ resource $connection [, mixed $object_id ]] ):int\t\n Create a large object
pg_lo_export ([ resource $connection ], int $oid , string $pathname ):bool\t\n Export large object direct to filesystem
pg_lo_import ([ resource $connection ], string $pathname [, mixed $object_id ] ):int\t\n Import large object direct from filesystem
pg_lo_open ( $connection , int $oid , string $mode ):resource\t\n Open a large object and return fd
pg_lo_read_all ( resource $large_object ):int\t\n Read a large object and send straight to browser
pg_lo_read ( resource $large_object [, int $len = 8192 ] ):string\t\n Read a large object
pg_lo_seek ( resource $large_object , int $offset [, int $whence = PGSQL_SEEK_CUR ] ):bool\t\n Seeks position of large object
pg_lo_tell ( resource $large_object ):int\t\n Returns current position of large object
pg_lo_truncate ( resource $large_object , int $size ):bool\t\n
pg_lo_unlink ( resource $connection , int $oid ):bool\t\n Delete a large object
pg_lo_write ( resource $large_object , string $data [, $len ] ):int\t\n Write a large object
pg_meta_data ( resource $connection , string $table_name [, bool $extended = FALSE ] ):array\t\npg_meta_data() returns table definition for table_name as an array. 
pg_num_fields ( resource $result ):int\t\n Return the number of fields in the result
pg_num_rows ( resource $result ):int\t\n Return the number of rows in the result
pg_options ([ resource $connection ] ):string\t\npg_options() will return a string containing the options specified on the given PostgreSQL connection resource. 
pg_parameter_status ([ resource $connection ], $param_name ):string\t\n Returns the value of a server parameter
pg_pconnect ( string $connection_string [, int $connect_type ] ):resource\t\n Open a persistent PostgreSQL connection
pg_ping ([ resource $connection ] ):bool\t\npg_ping() pings a database connection and tries to reconnect it if it is broken. 
pg_port ([ resource $connection ] ):int\t\npg_port() returns the port number that the given PostgreSQL connection resource is connected to. 
pg_prepare ([ $connection ], string $stmtname , string $query ):resource\t\n
pg_put_line ([ resource $connection ], string $data ):bool\t\n Send null-terminated string to backend server
pg_query_params ([ $connection ], string $query , array $params ):resource\t\n
pg_query ([ $connection ], string $query ):resource\t\n Execute a query
pg_result_error_field ( resource $result , int $fieldcode ):string\t\n
pg_result_error ( resource $result ):string\t\n Get error message associated with result
pg_result_seek ( resource $result , int $offset ):bool\t\npg_result_seek() sets the internal row offset in a result resource. 
pg_result_status ( resource $result [, int $type = PGSQL_STATUS_LONG ] ):mixed\t\npg_result_status() returns the status of a result resource, or the PostgreSQL command completion tag associated with the result 
pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC [, int $result_type = PGSQL_ASSOC ]] ):mixed\t\n Select records that has ids (id=>value)
pg_send_execute ( resource $connection , string $stmtname , array $params ):bool\t\n
pg_send_prepare ( resource $connection , string $stmtname , string $query ):bool\t\n
pg_send_query_params ( resource $connection , string $query , array $params ):bool\t\n
pg_send_query ( resource $connection , string $query ):bool\t\n Send asynchronous query
pg_set_client_encoding ([ resource $connection ], string $encoding ):int\t\n Set client encoding
pg_set_error_verbosity ([ resource $connection ], $verbosity ):int\t\n
pg_socket ( $connection ):resource\t\n
pg_trace ( string $pathname [, string $mode = "w" [, resource $connection ]] ):bool\t\n Enable tracing a PostgreSQL connection
pg_transaction_status(->) pg_transaction_status ( resource $connection ):int\t\n
pg_tty ([ resource $connection ] ):string\t\n Return the tty name associated with the connection
pg_unescape_bytea ( $data ):string\t\n Unescape binary for bytea type
pg_untrace ([ resource $connection ] ):bool\t\nStop tracing started by pg_trace(). 
pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options = PGSQL_DML_EXEC ] ):mixed\t\n Update table using values (field=>value) and ids (id=>value)
pg_version ([ resource $connection ] ):array\t\n Returns an array with client, protocol and server version (when available)
pspell_add_to_personal ( int $dictionary_link , string $word ):bool\t\npspell_add_to_personal() adds a word to the personal wordlist. If you used pspell_new_config() with pspell_config_personal() to open the dictionary, you can save the wordlist later with pspell_save_wordlist(). 
pspell_add_to_session ( int $dictionary_link , string $word ):bool\t\npspell_add_to_session() adds a word to the wordlist associated with the current session. It is very similar to pspell_add_to_personal() 
pspell_check ( int $dictionary_link , string $word ):bool\t\npspell_check() checks the spelling of a word. 
pspell_clear_session ( int $dictionary_link ):bool\t\npspell_clear_session() clears the current session. The current wordlist becomes blank, and, for example, if you try to save it with pspell_save_wordlist(), nothing happens. 
pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] ):int\t\n Create a new config to be used later to create a manager
pspell_config_data_dir ( int $conf , string $directory ):bool\t\n
pspell_config_dict_dir ( int $conf , string $directory ):bool\t\n
pspell_config_ignore ( int $dictionary_link , int $n ):bool\t\npspell_config_ignore() should be used on a config before calling pspell_new_config(). This function allows short words to be skipped by the spell checker. 
pspell_config_mode ( int $dictionary_link , int $mode ):bool\t\npspell_config_mode() should be used on a config before calling pspell_new_config(). This function determines how many suggestions will be returned by pspell_suggest(). 
pspell_config_personal ( int $dictionary_link , string $file ):bool\t\n Use a personal dictionary for this config
pspell_config_repl ( int $dictionary_link , string $file ):bool\t\n Use a personal dictionary with replacement pairs for this config
pspell_config_runtogether ( int $dictionary_link , $flag ):bool\t\n Consider run-together words as valid components
pspell_config_save_repl ( int $dictionary_link , $flag ):bool\t\n Save replacement pairs when personal list is saved for this config
pspell_new_config ( $config ):int\t\npspell_new_config() opens up a new dictionary with settings specified in a config, created with pspell_config_create() and modified with pspell_config_*() functions. This method provides you with the most flexibility and has all the functionality provided by pspell_new() and pspell_new_personal(). 
pspell_new_personal ( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, $mode = 0 ]]]] ):int\t\n Load a dictionary with a personal wordlist
pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, $mode = 0 ]]]] ):int\t\n Load a dictionary
pspell_save_wordlist ( int $dictionary_link ):bool\t\npspell_save_wordlist() saves the personal wordlist from the current session. The location of files to be saved specified with pspell_config_personal() and (optionally) pspell_config_repl(). 
pspell_store_replacement ( int $dictionary_link , string $misspelled , string $correct ):bool\t\nstores a replacement pair for a word, so that replacement can be returned by pspell_suggest() later.
pspell_suggest ( int $dictionary_link , string $word ):array\t\npspell_suggest() returns an array of possible spellings for the given word. 
simplexml_import_dom ( DOMNode $node [, string $class_name = "SimpleXMLElement" ] ):SimpleXMLElement\t\nThis function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element. 
simplexml_load_file ( string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE ]]]] ):SimpleXMLElement\t\nConvert the well-formed XML document in the given file to an object. 
simplexml_load_string ( string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE ]]]] ):SimpleXMLElement\t\nTakes a well-formed XML string and returns it as an object. 
snmp_get_quick_print ( void ):bool\t\nReturns the current value stored in the UCD Library for quick_print. quick_print is off by default. 
snmp_get_valueretrieval ( void ):int\t\n Return the method how the SNMP values will be returned
snmp_read_mib ( string $filename ):bool\t\n Reads and parses a MIB file into the active MIB tree.
snmp_set_enum_print ( int $enum_print ):bool\t\nThis function toggles if snmpwalk/snmpget etc. should automatically lookup enum values in the MIB and return them together with their human readable string. 
snmp_set_oid_numeric_print(->) snmp_set_oid_numeric_print ( int $oid_format ):void\t\nThis function is an alias of: snmp_set_oid_output_format(). 
snmp_set_oid_output_format ( int $oid_format = SNMP_OID_OUTPUT_MODULE ):bool\t\nsnmp_set_oid_output_format() sets the output format to be full or numeric. 
snmp_set_quick_print ( $quick_print ):bool\t\n Return all objects including their respective object id withing the specified one
snmp_set_valueretrieval ( int $method = SNMP_VALUE_LIBRARY ):bool\t\n Specify the method how the SNMP values will be returned
snmp2_get ( $host , $community , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string\t\nThe snmp2_get() function is used to read the value of an SNMP object specified by the object_id. 
snmp2_getnext ( $host , $community , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string\t\nThe snmp2_get_next() function is used to read the value of the SNMP object that follows the specified object_id. 
snmp2_real_walk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array\t\nThe snmp2_real_walk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids. 
snmp2_set ( string $host , string $community , string $object_id , string $type , string $value [, int $timeout = 1000000 [, int $retries = 5 ]] ):bool\t\nsnmp2_set() is used to set the value of an SNMP object specified by the object_id. 
snmp2_walk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array\t\nsnmp2_walk() function is used to read all the values from an SNMP agent specified by the hostname. 
snmp3_get ( $host , $sec_name , $sec_level , $auth_protocol , $auth_passphrase , $priv_protocol , $priv_passphrase , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string\t\nThe snmp3_get() function is used to read the value of an SNMP object specified by the object_id. 
snmp3_getnext ( $host , $sec_name , $sec_level , $auth_protocol , $auth_passphrase , $priv_protocol , $priv_passphrase , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string\t\nThe snmp3_getnext() function is used to read the value of the SNMP object that follows the specified object_id. 
snmp3_real_walk ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array\t\nThe snmp3_real_walk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids. 
snmp3_set ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id , string $type , string $value [, int $timeout = 1000000 [, int $retries = 5 ]] ):bool\t\n Fetch the value of a SNMP object
snmp3_walk ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array\t\n Fetch the value of a SNMP object
snmpget ( $hostname , $community , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string\t\nThe snmpget() function is used to read the value of an SNMP object specified by the object_id. 
snmpgetnext ( $host , $community , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string\t\nThe snmpgetnext() function is used to read the value of the SNMP object that follows the specified object_id. 
snmprealwalk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array\t\nThe snmprealwalk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids. 
snmpset ( string $host , string $community , string $object_id , string $type , mixed $value [, int $timeout = 1000000 [, int $retries = 5 ]] ):bool\t\nsnmpset() is used to set the value of an SNMP object specified by the object_id. 
snmpwalk ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array\t\nsnmpwalk() function is used to read all the values from an SNMP agent specified by the hostname. 
snmpwalkoid ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array\t\n
is_soap_fault ( mixed $object ):bool\t\n
use_soap_error_handler ([ $handler = TRUE ] ):bool\t\nThis function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value.
sodium_add ( string &$val , string $addv ):void\t\n
sodium_base642bin ( $b64 , int $id [, $ignore ] ):string\t\n
sodium_bin2base64 ( $bin , int $id ):string\t\n
sodium_bin2hex ( $bin ):string\t\n
sodium_compare ( string $buf1 , string $buf2 ):int\t\n
sodium_crypto_aead_aes256gcm_decrypt ( $ciphertext , $ad , $nonce , $key ):string\t\n
sodium_crypto_aead_aes256gcm_encrypt ( $msg , $ad , $nonce , $key ):string\t\n
sodium_crypto_aead_aes256gcm_is_available ( void ):bool\t\n
sodium_crypto_aead_aes256gcm_keygen ( void ):string\t\n
sodium_crypto_aead_chacha20poly1305_decrypt ( $ciphertext , $ad , $nonce , $key ):string\t\n
sodium_crypto_aead_chacha20poly1305_encrypt ( $msg , $ad , $nonce , $key ):string\t\n
sodium_crypto_aead_chacha20poly1305_ietf_decrypt ( $ciphertext , $ad , $nonce , $key ):string\t\n
sodium_crypto_aead_chacha20poly1305_ietf_encrypt ( $msg , $ad , $nonce , $key ):string\t\n
sodium_crypto_aead_chacha20poly1305_ietf_keygen ( void ):string\t\n
sodium_crypto_aead_chacha20poly1305_keygen ( void ):string\t\n
sodium_crypto_aead_xchacha20poly1305_ietf_decrypt ( $ciphertext , $ad , $nonce , $key ):string\t\n
sodium_crypto_aead_xchacha20poly1305_ietf_encrypt ( $msg , $ad , $nonce , $key ):string\t\n
sodium_crypto_aead_xchacha20poly1305_ietf_keygen ( void ):string\t\n
sodium_crypto_auth_keygen ( void ):string\t\n
sodium_crypto_auth_verify ( string $signature , string $msg , string $key ):bool\t\n
sodium_crypto_auth ( $msg , $key ):string\t\n
sodium_crypto_box_keypair_from_secretkey_and_publickey ( $secret_key , $public_key ):string\t\n
sodium_crypto_box_keypair ( void ):string\t\n
sodium_crypto_box_open ( $ciphertext , $nonce , $key ):string\t\n
sodium_crypto_box_publickey_from_secretkey ( $key ):string\t\n
sodium_crypto_box_publickey ( $key ):string\t\n
sodium_crypto_box_seal_open ( $ciphertext , $key ):string\t\n
sodium_crypto_box_seal ( $msg , $key ):string\t\n
sodium_crypto_box_secretkey ( $key ):string\t\n
sodium_crypto_box_seed_keypair ( $key ):string\t\n
sodium_crypto_box ( $msg , $nonce , $key ):string\t\n
sodium_crypto_generichash_final ( &$state [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ] ):string\t\n
sodium_crypto_generichash_init ([ $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]] ):string\t\n
sodium_crypto_generichash_keygen ( void ):string\t\n
sodium_crypto_generichash_update ( string &$state , string $msg ):bool\t\n
sodium_crypto_generichash ( $msg [, $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]] ):string\t\n
sodium_crypto_kdf_derive_from_key ( int $subkey_len , int $subkey_id , $context , $key ):string\t\n
sodium_crypto_kdf_keygen ( void ):string\t\n
sodium_crypto_kx_client_session_keys ( string $client_keypair , string $server_key ):array\t\n
sodium_crypto_kx_keypair ( void ):string\t\nCreate a new sodium keypair consisting of the the secret key (32 bytes) followed by the public key (32 bytes). The keys can be retrieved by calling sodium_crypto_kx_secretkey() and sodium_crypto_kx_publickey(), respectively. 
sodium_crypto_kx_publickey ( $key ):string\t\n
sodium_crypto_kx_secretkey ( $key ):string\t\n
sodium_crypto_kx_seed_keypair ( $):string\t\n
sodium_crypto_kx_server_session_keys ( string $server_keypair , string $client_key ):array\t\n
sodium_crypto_pwhash_scryptsalsa208sha256_str_verify ( string $hash , string $password ):bool\t\n
sodium_crypto_pwhash_scryptsalsa208sha256_str ( $password , int $opslimit , int $memlimit ):string\t\n
sodium_crypto_pwhash_scryptsalsa208sha256 ( int $length , $password , $salt , int $opslimit , int $memlimit ):string\t\n
sodium_crypto_pwhash_str_needs_rehash ( string $password , int $opslimit , int $memlimit ):bool\t\n
sodium_crypto_pwhash_str_verify ( string $hash , string $password ):bool\t\n
sodium_crypto_pwhash_str ( $password , int $opslimit , int $memlimit ):string\t\n
sodium_crypto_pwhash ( int $length , $password , $salt , int $opslimit , int $memlimit [, int $alg ] ):string\t\n
sodium_crypto_scalarmult_base(->) function is an alias of: sodium_crypto_box_publickey_from_secretkey(). :This\t\n
sodium_crypto_scalarmult ( $n , $p ):string\t\n
sodium_crypto_secretbox_keygen ( void ):string\t\n
sodium_crypto_secretbox_open ( $ciphertext , $nonce , $key ):string\t\n
sodium_crypto_secretbox ( $, $nonce , $key ):string\t\n
sodium_crypto_secretstream_xchacha20poly1305_init_pull ( $header , $key ):string\t\n
sodium_crypto_secretstream_xchacha20poly1305_init_push ( string $key ):array\t\n
sodium_crypto_secretstream_xchacha20poly1305_keygen ( void ):string\t\n
sodium_crypto_secretstream_xchacha20poly1305_pull ( string &$state , string $c [, string $ad ] ):array\t\n
sodium_crypto_secretstream_xchacha20poly1305_push ( &$state , $msg [, $ad [, int $tag ]] ):string\t\n
sodium_crypto_secretstream_xchacha20poly1305_rekey ( string &$state ):void\t\n
sodium_crypto_shorthash_keygen ( void ):string\t\n
sodium_crypto_shorthash ( $msg , $key ):string\t\n
sodium_crypto_sign_detached ( $msg , $keypair ):string\t\n
sodium_crypto_sign_ed25519_pk_to_curve25519 ( $key ):string\t\n
sodium_crypto_sign_ed25519_sk_to_curve25519 ( $key ):string\t\n
sodium_crypto_sign_keypair_from_secretkey_and_publickey ( $secret_key , $public_key ):string\t\n
sodium_crypto_sign_keypair ( void ):string\t\n
sodium_crypto_sign_open ( $, $keypair ):string\t\n
sodium_crypto_sign_publickey_from_secretkey ( $key ):string\t\n
sodium_crypto_sign_publickey ( $keypair ):string\t\n
sodium_crypto_sign_secretkey ( $key ):string\t\n
sodium_crypto_sign_seed_keypair ( $key ):string\t\n
sodium_crypto_sign_verify_detached ( string $signature , string $msg , string $key ):bool\t\n
sodium_crypto_sign ( $msg , $secret_key ):string\t\n
sodium_crypto_stream_keygen ( void ):string\t\n
sodium_crypto_stream_xor ( $msg , $nonce , $key ):string\t\n
sodium_crypto_stream ( int $length , $nonce , $key ):string\t\n
sodium_hex2bin ( $hex [, $ignore ] ):string\t\n
sodium_increment ( string &$val ):void\t\n
sodium_memcmp ( string $buf1 , string $buf2 ):int\t\n
sodium_memzero ( string &$buf ):void\t\n
sodium_pad ( $unpadded , int $length ):string\t\n
sodium_unpad ( $padded , int $length ):string\t\n
sybase_affected_rows ([ resource $link_identifier ] ):int\t\n Get number of affected rows in last query
sybase_close ([ resource $link_identifier ] ):bool\t\n Close Sybase connection
sybase_connect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = FALSE ]]]]]] ):resource\t\n Open Sybase server connection
sybase_data_seek ( resource $result_identifier , int $row_number ):bool\t\nsybase_data_seek() moves the internal row pointer of the Sybase result associated with the specified result identifier to pointer to the specified row number. The next call to sybase_fetch_row() would return that row. 
sybase_deadlock_retry_count ( int $retry_count ):void\t\nUsing sybase_deadlock_retry_count(), the number of retries can be defined in cases of deadlocks. By default, every deadlock is retried an infinite number of times or until the process is killed by Sybase, the executing script is killed (for instance, by set_time_limit()) or the query succeeds. 
sybase_fetch_( resource $result ):array\t\n Fetch row as array
sybase_fetch_assoc ( resource $result ):array\t\n Fetch row as array without numberic indices
sybase_fetch_field ( resource $result [, int $field_offset = -1 ] ):object\t\nsybase_fetch_field() can be used in order to obtain information about fields in a certain query result. 
sybase_fetch_( resource $result [, mixed $] ):object\t\n Fetch row as object
sybase_fetch_row ( resource $result ):array\t\n Get row as enumerated array
sybase_field_seek ( resource $result , int $field_offset ):bool\t\nSeeks to the specified field offset. If the next call to sybase_fetch_field() won't include a field offset, this field would be returned. 
sybase_free_result ( resource $result ):bool\t\nsybase_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call sybase_free_result() with the result identifier as an argument and the associated result memory will be freed. 
sybase_get_last_message ( void ):string\t\nsybase_get_last_message() returns the last message reported by the server. 
sybase_min_client_severity ( int $severity ):void\t\nsybase_min_client_severity() sets the minimum client severity level. 
sybase_min_error_severity ( int $severity ):void\t\nsybase_min_error_severity() sets the minimum error severity level. 
sybase_min_message_severity ( int $severity ):void\t\nsybase_min_message_severity() sets the minimum message severity level. 
sybase_min_server_severity ( int $severity ):void\t\nsybase_min_server_severity() sets the minimum server severity level. 
sybase_num_fields ( resource $result ):int\t\nsybase_num_fields() returns the number of fields in a result set. 
sybase_num_rows ( resource $result ):int\t\nsybase_num_rows() returns the number of rows in a result set. 
sybase_pconnect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] ):resource\t\n Open persistent Sybase connection
sybase_query ( string $query [, resource $link_identifier ] ):mixed\t\nsybase_query() sends a query to the currently active database on the server that's associated with the specified link identifier. 
sybase_result ( resource $result , int $row , mixed $field ):string\t\n Get result data
sybase_select_db ( string $database_name [, resource $link_identifier ] ):bool\t\n Select Sybase database
sybase_set_message_handler ( callable $handler [, resource $link_identifier ] ):bool\t\nsybase_set_message_handler() sets a user function to handle messages generated by the server. You may specify the name of a global function, or use an array to specify an object reference and a method name. 
sybase_unbuffered_query ( string $query , $link_identifier [, bool $store_result ] ):resource\t\n Send Sybase query
ob_tidyhandler ( $input [, int $mode ] ):string\t\nCallback function for ob_start() to repair the buffer. 
tidy_access_count ( tidy $object ):int\t\ntidy_access_count() returns the number of accessibility warnings found for the specified document. 
tidy_config_count ( tidy $object ):int\t\nReturns the number of errors encountered in the configuration of the specified tidy object. 
tidy_error_count ( tidy $object ):int\t\nReturns the number of Tidy errors encountered for the specified document. 
tidy_get_output ( tidy $object ):string\t\nGets a string with the repaired html. 
tidy_warning_count ( tidy $object ):int\t\nReturns the number of Tidy warnings encountered for the specified document. 
odbc_autocommit ( resource $connection_id [, bool $OnOff = FALSE ] ):mixed\t\n Toggle autocommit mode or get status
odbc_binmode ( resource $result_id , int $mode ):bool\t\n Handle binary column data
odbc_close_all ( ):void\t\nodbc_close_all() will close down all connections to database server(s). 
odbc_close ( resource $connection_id ):void\t\nCloses down the connection to the database server. 
odbc_columnprivileges ( $connection_id , string $qualifier , string $owner , string $table_name , string $column_name ):resource\t\nLists columns and associated privileges for the given table. 
odbc_columns ( $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] ):resource\t\nLists all columns in the requested range. 
odbc_commit ( resource $connection_id ):bool\t\nCommits all pending transactions on the connection. 
odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ] ):resource\t\n Connect to a datasource
odbc_cursor ( resource $result_id ):string\t\nGets the cursorname for the given result_id. 
odbc_data_source ( resource $connection_id , int $fetch_type ):array\t\nThis function will return the list of available DSN (after calling it several times). 
odbc_do(->) function is an alias of: odbc_exec(). :This\t\n
odbc_error ([ resource $connection_id ] ):string\t\nReturns a six-digit ODBC state, or an empty string if there has been no errors. 
odbc_errormsg ([ resource $connection_id ] ):string\t\nReturns a string containing the last ODBC error message, or an empty string if there has been no errors. 
odbc_exec ( $connection_id , string $query_string [, int $flags ] ):resource\t\nSends an SQL statement to the database server. 
odbc_execute ( resource $result_id [, array $parameters_array ] ):bool\t\nExecutes a statement prepared with odbc_prepare(). 
odbc_fetch_( resource $result [, int $rownumber ] ):array\t\nFetch an associative array from an ODBC query. 
odbc_fetch_into ( resource $result_id , array &$result_array [, $rownumber ] ):int\t\nFetch one result row into array. 
odbc_fetch_( resource $result [, int $rownumber ] ):object\t\nFetch an object from an ODBC query. 
odbc_fetch_row ( resource $result_id [, int $row_number = 1 ] ):bool\t\nFetches a row of the data that was returned by odbc_do() or odbc_exec(). After odbc_fetch_row() is called, the fields of that row can be accessed with odbc_result(). 
odbc_field_len ( resource $result_id , $field_number ):int\t\nGets the length of the field referenced by number in the given result identifier. 
odbc_field_name ( resource $result_id , int $field_number ):string\t\nGets the name of the field occupying the given column number in the given result identifier. 
odbc_field_num ( resource $result_id , string $field_name ):int\t\nGets the number of the column slot that corresponds to the named field in the given result identifier. 
odbc_field_precision(->) function is an alias of: odbc_field_len(). :This\t\n
odbc_field_scale ( resource $result_id , $field_number ):int\t\nGets the scale of the field referenced by number in the given result identifier. 
odbc_field_type ( resource $result_id , int $field_number ):string\t\nGets the SQL type of the field referenced by number in the given result identifier. 
odbc_foreignkeys ( $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table ):resource\t\nRetrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table 
odbc_free_result ( resource $result_id ):bool\t\n Free resources associated with a result
odbc_gettypeinfo ( $connection_id [, int $data_type ] ):resource\t\nRetrieves information about data types supported by the data source. 
odbc_longreadlen ( resource $result_id , int $length ):bool\t\nEnables handling of LONG and LONGVARBINARY columns. 
odbc_next_result ( resource $result_id ):bool\t\nChecks if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc. 
odbc_num_fields ( resource $result_id ):int\t\nGets the number of fields (columns) in an ODBC result. 
odbc_num_rows ( resource $result_id ):int\t\nGets the number of rows in a result. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available. 
odbc_pconnect ( string $dsn , string $user , string $password [, int $cursor_type ] ):resource\t\n Establish a persistent connection to a datasource
odbc_prepare ( $connection_id , string $query_string ):resource\t\n Prepares a statement for execution
odbc_primarykeys ( $connection_id , string $qualifier , string $owner , string $table ):resource\t\nReturns a result identifier that can be used to fetch the column names that comprise the primary key for a table. 
odbc_procedurecolumns ( $connection_id ):resource\t\n Returns a result identifier containing the list of input and output parameters, as well as the columns that make up the result set for the specified procedures
odbc_procedures ( $connection_id ):resource\t\n Returns a result identifier containg the list of procedure names in a datasource
odbc_result_all ( resource $result_id [, string $format ] ):int\t\nPrints all rows from a result identifier produced by odbc_exec(). The result is printed in HTML table format. 
odbc_result ( resource $result_id , $field ):mixed\t\nGet result data 
odbc_rollback ( resource $connection_id ):bool\t\nRolls back all pending statements on the connection. 
odbc_setoption ( resource $id , int $function , int $option , int $param ):bool\t\n Sets connection or statement options
odbc_specialcolumns ( $connection_id , int $type , string $qualifier , string $table , int $scope , int $nullable ):resource\t\nRetrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction. 
odbc_statistics ( $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy ):resource\t\nGet statistics about a table and its indexes. 
odbc_tableprivileges ( $connection_id , string $qualifier , string $owner , string $name ):resource\t\nLists tables in the requested range and the privileges associated with each table. 
odbc_tables ( $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] ):resource\t\n Call the SQLTables function
wddx_add_vars ( resource $packet_id , mixed $var_name [, mixed $... ] ):bool\t\nSerializes the passed variables and add the result to the given packet. 
wddx_deserialize ( string $packet ):mixed\t\n\t\nDeserializes given packet and returns a PHP value
wddx_packet_end ( resource $packet_id ):string\t\nEnds and returns the given WDDX packet. 
wddx_packet_start ([ string $comment ] ):resource\t\nStart a new WDDX packet for incremental addition of variables. It automatically creates a structure definition inside the packet to contain the variables. 
wddx_serialize_value ( mixed $var [, $comment ] ):string\t\nCreates a WDDX packet from a single given value. 
wddx_serialize_vars ( mixed $var_name [, mixed $... ] ):string\t\nCreates a WDDX packet with a structure that contains the serialized representation of the passed variables. 
utf8_decode ( $data ):string\t\n\t\nConverts a UTF-8 encoded string to ISO-8859-1
utf8_encode ( $data ):string\t\n\t\nEncodes an ISO-8859-1 string to UTF-8
xml_error_( int $code ):string\t\nGets the XML parser error string associated with the given code. 
xml_get_current_byte_index ( resource $parser ):int\t\nGets the current byte index of the given XML parser. 
xml_get_current_column_number ( resource $parser ):int\t\nGets the current column number of the given XML parser. 
xml_get_current_line_number ( resource $parser ):int\t\nGets the current line number for the given XML parser. 
xml_get_error_code ( resource $parser ):int\t\nGets the XML parser error code. 
xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] ):int\t\nThis function parses an XML string into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference. 
xml_parse ( resource $parser , string $data [, bool $is_final = FALSE ] ):int\t\nxml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary. 
xml_parser_create_ns ([ string $encoding [, string $separator = ":" ]] ):resource\t\nxml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions. 
xml_parser_create ([ string $encoding ] ):resource\t\nxml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions. 
xml_parser_free ( resource $parser ):bool\t\n\t\nFree an XML parser
xml_parser_get_option ( resource $parser , int $option ):mixed\t\nGets an option value from an XML parser. 
xml_parser_set_option ( resource $parser , int $option , mixed $value ):bool\t\nSets an option in an XML parser. 
xml_set_character_data_handler ( resource $parser , callable $handler ):bool\t\nSets the character data handler function for the XML parser parser. 
xml_set_default_handler ( resource $parser , callable $handler ):bool\t\nSets the default handler function for the XML parser parser. 
xml_set_element_handler ( resource $parser , callable $start_element_handler , callable $end_element_handler ):bool\t\nSets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse() is called for parser. 
xml_set_end_namespace_decl_handler ( resource $parser , callable $handler ):bool\t\n\t\nSet up character data handler
xml_set_external_entity_ref_handler ( resource $parser , callable $handler ):bool\t\nSets the external entity reference handler function for the XML parser parser. 
xml_set_notation_decl_handler ( resource $parser , callable $handler ):bool\t\n\t\nSet up notation declaration handler
xml_set_object ( resource $parser , object &$object ):bool\t\nThis function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object. 
xml_set_processing_instruction_handler ( resource $parser , callable $handler ):bool\t\n\t\nSet up processing instruction (PI) handler
xml_set_start_namespace_decl_handler ( resource $parser , callable $handler ):bool\t\nSet a handler to be called when a namespace is declared. Namespace declarations occur inside start tags. But the namespace declaration start handler is called before the start tag handler for each namespace declared in that start tag. 
xml_set_unparsed_entity_decl_handler ( resource $parser , callable $handler ):bool\t\n\t\nSet up unparsed entity declaration handler
zip_close ( resource $zip ):void\t\nCloses the given ZIP file archive. 
zip_entry_close ( resource $zip_entry ):bool\t\nCloses the specified directory entry. 
zip_entry_compressedsize ( resource $zip_entry ):int\t\nReturns the compressed size of the specified directory entry. 
zip_entry_compressionmethod ( resource $zip_entry ):string\t\nReturns the compression method of the directory entry specified by zip_entry. 
zip_entry_filesize ( resource $zip_entry ):int\t\nReturns the actual size of the specified directory entry. 
zip_entry_name ( resource $zip_entry ):string\t\nReturns the name of the specified directory entry. 
zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] ):bool\t\nOpens a directory entry in a zip file for reading. 
zip_entry_read ( resource $zip_entry [, int $length = 1024 ] ):string\t\nReads from an open directory entry. 
zip_open ( string $filename ):resource\t\nOpens a new zip archive for reading. 
zip_read ( $zip ):resource\t\nReads the next entry in a zip file archive. 
