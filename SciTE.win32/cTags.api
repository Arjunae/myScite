AbandonAutomaticSave()
AbandonPaint()
AbbrevCmd()
AbbrevDialog()
AbbrevDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
AbbrevMessage(HWND hDlg, UINT message, WPARAM wParam)
AbbrevResponse(int responseID)
AboutDialog()
AboutDialogWithBuild(int staticBuild_)
AboutDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
AboutMessage(HWND hDlg, UINT message, WPARAM wParam)
AbsolutePath()
AcceptToOpenFiles(bool bAccept)
Accessor(IDocument *pAccess_, PropSetSimple *pprops_) : LexAccessor(pAccess_), pprops(pprops_)
Action()
Action(Action &&other)
Activate(bool activeApp)
ActivateBuffer(int)
ActivateBuffer(int index)
ActivateSignal(GtkWidget *, FindStrip *pStrip)
ActivateSignal(GtkWidget *, ReplaceStrip *pStrip)
ActivateSignal(GtkWidget *, UserStrip *pStrip)
ActivateWindow(const char *timestamp)
ActivateWindow(const char *)
ActivatesDefault()
Active()
Add(int val)
Add(int character, const char *conversion)
Add(Sci::Position increment)
Add(int ident, RGBAImage *image)
Add(GtkWidget *child, int width, bool expand, int xpadding, int ypadding)
Add(ARG_TYPE newElement)
Add()
AddChar(char ch)
AddCharUTF(const char *s, unsigned int len, bool treatAsDBCS)
AddCharUTF16(wchar_t const *wcs, unsigned int wclen)
AddCommand(const std::string &command, const FilePath &directory, JobSubsystem jobType, const std::string &input, int flags)
AddCommand(const std::string &cmd, const std::string &dir, JobSubsystem jobType, const std::string &input, int flags)
AddData(char *data, Sci_Position length)
AddFileToBuffer(const BufferState &bufferState)
AddFileToStack(const FilePath &file, SelectedRange selection, int scrollPos)
AddFuture(int index, Buffer::FutureDo fd)
AddHead(ARG_TYPE newElement)
AddLexerModule(LexerModule *plm)
AddMark(Sci::Line line, int markerNum)
AddMark(Sci::Line line, int markerNum, Sci::Line lines)
AddMarkSet(Sci::Line line, int valueSet)
AddRange(Sci::Line lineStart, Sci::Line lineEnd)
AddRectangularToMime(QMimeData *mimeData, QString su)
AddRef()
AddRef(ULONG) ScintillaWin::AddRef()
AddSelection(int startChar, int endChar)
AddSelection(AtkText *text, gint start, gint end)
AddSelection(SelectionRange range)
AddSelectionWithoutTrim(SelectionRange range)
AddSendPipe(int fd, const char *name)
AddString(const char *setToAdd)
AddStyledText(char *buffer, Sci::Position appendLength)
AddStyledText(GUI::ScintillaWindow &wsci, const char *s, int attr)
AddSymmetric(enum CaseConversion conversion, int lower,int upper)
AddTabstop(Sci::Line line, int x)
AddTail(ARG_TYPE newElement)
AddTextAttribute(AtkAttributeSet *attributes, AtkTextAttribute attr, gchar *value)
AddTextColorAttribute(AtkAttributeSet *attributes, AtkTextAttribute attr, const ColourDesired &colour)
AddTextIntAttribute(AtkAttributeSet *attributes, AtkTextAttribute attr, gint i)
AddToPopUp(const char *label, int cmd, bool enabled)
AddToPopUp(GUI::Menu &popup, const char *label, int cmd, bool checked)
AddToPopUp(const char *label, int cmd, bool enabled)
AddToPopUp(GUI::Menu &popup, const char *label, int cmd, bool checked)
AddToolBar()
AddToolButton(const char *text, int cmd, GtkWidget *toolbar_icon)
AddToolSpace(GtkToolbar *toolbar)
AddUndoAction(Sci::Position token, bool mayCoalesce)
AddUndoAction(Sci::Position token, bool mayCoalesce) { cb.AddUndoAction(token, mayCoalesce)
AddWString(std::wstring wcs)
AddWatcher(DocWatcher *watcher, void *userData)
AdjustWindowRect(PRectangle *rc)
AfterName(const GUI::gui_char *s)
AllFour(DWORD *pixels, int width, int height, int x, int y, DWORD val)
AllOnFor(int position)
AllSame()
AllSameAs(int value)
AllocItem(const char *text, int pixId)
AllocStyles(size_t sizeNew)
Allocate()
Allocate(int)
Allocate(int styleBase, int numberStyles)
Allocate(int firstStyle_, int lenStyles_)
Allocate()
Allocate(int)
Allocate(Sci::Position newSize)
Allocate(Sci::Position newSize) { cb.Allocate(newSize)
Allocate(int growSize)
Allocate(size_t length_)
Allocate()
Allocate(int technology)
Allocate(size_t bytes)
Allocate(int maxSize)
AllocateAnnotation(int length, int style)
AllocateExtendedStyles(int numberStyles)
AllocateForLevel(Sci::Line linesOnScreen, Sci::Line linesInDoc)
AllocateGraphics(const ViewStyle &vsDraw)
AllocateGraphics()
AllocateGraphics(const ViewStyle &vsDraw)
AllocateSubStyles(int styleBase, int numberStyles)
AllowVirtualSpace(int virtualSpaceOptions, bool rectangular)
AnnotationBoxedOrIndented(int annotationVisible)
AnnotationClearAll()
AnnotationLines(Sci::Line line)
AnnotationSetStyle(Sci::Line line, int style)
AnnotationSetStyles(Sci::Line line, const unsigned char *styles)
AnnotationSetText(Sci::Line line, const char *text)
AnnotationStyledText(Sci::Line line)
Annotations()
Append(char *s, int type)
Append(char *, int)
AppendIfNotPresent(const std::string &s)
AppendList(const std::string &s, char sep = '|')
AppendListItem(const char *text, const char *numword)
AppendName(const char *name)
AppendText(const char *text)
ApplyStep(int partitionUpTo)
ArrayFromStringList(char *stringList, bool onlyLineEnds = false)
ArrayFromWordList(char *wordlist, int *len, bool onlyLineEnds = false)
AsInternal()
AsLong()
AsUTF8()
AsVector()
Ascent(Font &font_)
Ascent(Font &font)
Ascent(Font &font_)
AskMacroList()
Assert(const char *c, const char *file, int line)
AssignCmdKey(int key, int modifiers, unsigned int msg)
AssignKey(int key, int mods, int cmd)
At(int n)
AtLineEnd(lua_State *L)
AtLineStart(lua_State *L)
AttachResponse(GtkWidget *w, SciTEGTK *object)
AutoComplete()
AutoCompleteCancel()
AutoCompleteCharacterAdded(char ch)
AutoCompleteCharacterDeleted()
AutoCompleteCompleted(char ch, unsigned int completionMethod)
AutoCompleteDoubleClick(void *p)
AutoCompleteGetCurrent()
AutoCompleteGetCurrentText(char *buffer)
AutoCompleteInsert(Sci::Position startPos, int removeLen, const char *text, int textLen)
AutoCompleteMove(int delta)
AutoCompleteMoveToCurrentWord()
AutoCompleteStart(int lenEntered, const char *list)
AutoLineLayout(LineLayoutCache &llc_, LineLayout *ll_) : llc(llc_), ll(ll_)
AutoSurface(Editor *ed, int technology = -1)
AutoSurface(SurfaceID sid, Editor *ed, int technology = -1)
AutomaticIndentation(char ch)
AverageCharWidth(Font &font_)
AverageCharWidth(Font &font)
AverageCharWidth(Font &font_)
BackAsLong()
BackStep(int partitionDownTo)
Background(int marksOfLine, bool caretActive, bool lineContainsCaret)
BackgroundStrip()
Band(bool visible_, int height_, bool expands_, GUI::Window win_)
BarButtonIn() :id(0), cmd(0)
BarButtonIn(int _id, int _cmd) : id(_id), cmd(_cmd)
Base()
BaseName()
BaseStyle(int subStyle)
BaseWin() : localiser(0)
BasicDeleteChars(Sci::Position position, Sci::Position deleteLength)
BasicInsertString(Sci::Position position, const char *s, Sci::Position insertLength)
BeginPrint(GtkPrintOperation *operation, GtkPrintContext *context, SciTEGTK *scitew)
BeginPrintThis(GtkPrintOperation *operation, GtkPrintContext *context)
BeginUndoAction()
BeginUndoAction() { cb.BeginUndoAction()
BlockFromBaseStyle(int baseStyle)
BlockFromStyle(int style)
BookmarkAdd(int lineno)
BookmarkDelete(int lineno)
BookmarkNext(bool forwardScan, bool select)
BookmarkPresent(int lineno)
BookmarkSelectAll()
BookmarkToggle(int lineno)
BoundsContains(PRectangle rcBounds, HRGN hRgnBounds, PRectangle rcCheck)
BraceMatch(Sci::Position position, Sci::Position \/*maxReStyle*\/)
BraceMatch(bool editor)
BraceOpposite(char ch)
BrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM, LPARAM pData)
BrushColor(ColourDesired back)
BrushColour(ColourDesired back)
Buffer()
BufferContainsNull()
BufferList() : current(0), stackcurrent(0), stack(0), buffers(0), length(0), lengthVisible(0), initialised(false)
BufferPointer()
BufferPointer() { return cb.BufferPointer()
BufferPointer()
BufferedFile(const FilePath &fPath)
BuffersMenu()
BuiltinRegex(CharClassify *charClassTable) : search(charClassTable)
ButtonDown(Point pt, unsigned int curTime, bool shift, bool ctrl, bool alt)
ButtonDownWithModifiers(Point pt, unsigned int curTime, int modifiers)
ButtonMove(Point pt)
ButtonMoveWithModifiers(Point pt, int modifiers)
ButtonPress(GtkWidget *, GdkEventButton* ev, gpointer p)
ButtonSignal(GtkWidget *, gpointer data)
ButtonUp(Point pt, unsigned int curTime, bool ctrl)
ButtonsPress(GtkWidget *, GdkEventButton *event, Strip *pstrip)
ByteIterator(const Document *doc_ = 0, Sci::Position position_ = 0) : doc(doc_), position(position_)
ByteOffsetFromCharacterOffset(Sci::Position characterOffset)
ByteOffsetFromCharacterOffset(Sci::Position startByte, int characterOffset)
ByteRangeFromCharacterRange(int startChar, int endChar, Sci::Position& startByte, Sci::Position& endByte)
BytesForDocument(const QString &text)
BytesFromLead(int leadByte)
BytesResult(sptr_t lParam, const unsigned char *val, size_t len)
CLANG_ANALYZER_NORETURN(const char *c, const char *file, int line)
CRectContains(const cairo_rectangle_t &crcContainer, const cairo_rectangle_t &crcTest)
CRectListContains(const cairo_rectangle_list_t *crcListContainer, const cairo_rectangle_t &crcTest)
CalcLargestMarkerHeight()
CalculateColumnWidths(int widthToAllocate)
CalculateMarginWidthAndMask()
Call(unsigned int msg, uptr_t wParam=0, sptr_t lParam=0)
CallBackAction(*CallBackAction)(void*)
CallChildren(unsigned int msg, uptr_t wParam, sptr_t lParam)
CallFocused(unsigned int msg, uptr_t wParam, sptr_t lParam)
CallFocusedElseDefault(int defaultValue, unsigned int msg, uptr_t wParam, sptr_t lParam)
CallNamedFunction(const char *name)
CallNamedFunction(const char *name, const char *arg)
CallNamedFunction(const char *name, int numberArg, const char *stringArg)
CallNamedFunction(const char *name, int numberArg, int numberArg2)
CallPane(int destination, unsigned int msg, uptr_t wParam, sptr_t lParam)
CallPointer(unsigned int msg, uptr_t wParam, void *s)
CallReturnPointer(unsigned int msg, uptr_t wParam=0, sptr_t lParam=0)
CallSearchOnAllWindows()
CallString(unsigned int msg, uptr_t wParam, const char *s)
CallTip()
CallTipCancel()
CallTipClick()
CallTipShow(Point pt, const char *defn)
CallbackData(SciTEGTK *pSciTE_, int cmd_, Worker *pWorker_) : pSciTE(pSciTE_), cmd(cmd_), pWorker(pWorker_)
Caller(HWND hDlg, UINT message, LPARAM lParam)
CanCall()
CanDeferToLastStep(const DocModification &mh)
CanEliminate(const DocModification &mh)
CanMakeRoom(bool maySaveIfDirty)
CanPaste()
CanRedo()
CanRedo() const { return cb.CanRedo()
CanUndo()
CanUndo() const { return cb.CanUndo()
Cancel()
CancelLoad()
CancelModes()
Cancelled()
Cancelling()
Caret()
CaretFromEdge()
CaretSetPeriod(int period)
CaseConvert(int character, enum CaseConversion conversion)
CaseConvertString(char *converted, size_t sizeConverted, const char *mixed, size_t lenMixed, enum CaseConversion conversion)
CaseConvertString(const std::string &s, enum CaseConversion conversion)
CaseConverter()
CaseFolderASCII()
CaseFolderDBCS(const char *charSet_) : charSet(charSet_)
CaseFolderDBCS(QTextCodec *codec_) : codec(codec_)
CaseFolderDBCS(UINT cp_) : cp(cp_)
CaseFolderForEncoding()
CaseFolderTable()
CaseFolderUnicode()
CaseMapString(const std::string &s, int caseMapping)
CaseMapper(const std::string &sUTF8, bool toUpperCase)
CategoriseCharacter(int character)
CellBuffer()
CentreItem(int n)
ChSet(unsigned char c)
ChSetWithCase(unsigned char c, bool caseSensitive)
ChangeCaseOfSelection(int caseMapping)
ChangeDocument(Document *oldDoc, Document *newDoc)
ChangeFunction(*ChangeFunction)(WCheckDraw *cd, void *user)
ChangeInsertion(const char *s, Sci::Position length)
ChangeLexerState(Sci_Position start, Sci_Position end)
ChangeScrollPos(int barType, Sci::Position pos)
ChangeSize()
ChangeState(int state_)
ChangeState(lua_State *L)
CharAdded(int utf32)
CharAddedOutput(int ch)
CharAt(Sci::Position position)
CharAt(Sci::Position position) const { return cb.CharAt(position)
CharAt(lua_State *L)
CharClassify()
CharPtrFromSPtr(sptr_t lParam)
CharacterAfter(Sci::Position position)
CharacterBefore(Sci::Position position)
CharacterConversion(int character_=0, const char *conversion_="") : character(character_)
CharacterExtracted(unsigned int character_, unsigned int widthBytes_)
CharacterInSelection(Sci::Position posCharacter)
CharacterOffsetFromByteOffset(Sci::Position byteOffset)
CharacterRangeFromByteRange(Sci::Position startByte, Sci::Position endByte, int *startChar, int *endChar)
CharacterSet(const CharacterSet &other)
CharacterSet(setBase base=setNone, const char *initialSet="", int size_=0x80, bool valueAfter_=false)
CharacterSetID(int characterSet)
CharacterSetID()
CharacterSetID(int characterSet)
CharacterSetIDOfDocument()
CharacterSetOfDocument()
Check()
CheckAMenuItem(int wIDCheckItem, bool val)
CheckButton(const GUI::Window &wButton, bool checked)
CheckButtons()
CheckCommonDialogError()
CheckEnvironment(ExtensionAPI *host)
CheckEnvironment(ExtensionAPI *phost)
CheckForChangeOutsidePaint(Range r)
CheckForRunningInstance(int argc, char *argv[])
CheckForScintillaFailure(int statusFailure)
CheckMenus()
CheckMenusClipboard()
CheckMessage(UINT message, WPARAM wParam, LPARAM lParam)
CheckModificationForWrap(DocModification mh)
CheckOtherInstance()
CheckReadOnly()
CheckReload()
CheckStartupScript()
CheckToolbarButton(HWND wTools, int id, bool enable)
Checked(int id)
ChildFocus(GtkWidget *widget)
ChildFocusSignal(GtkContainer *\/*container*\/, GtkWidget *widget, Strip *pStrip)
Chomp(std::string &s, int ch)
ChooseSaveName(const FilePath &directory, const char *title, const GUI::gui_char *filesFilter, const char *ext)
ChooseStrategy(int eff)
Chrome()
ChromeHighlight()
ClaimSelection()
Clamp(int val, int minVal, int maxVal)
ClampPositionIntoDocument(Sci::Position pos)
ClampPositionIntoDocument(SelectionPosition sp)
ClassInit(OBJECT_CLASS* object_class, GtkWidgetClass *widget_class, GtkContainerClass *container_class)
ClassNameOfWindow(HWND hWnd)
Classifier(int baseStyle)
Clear()
ClearAll()
ClearAllTabstops()
ClearBeforeExecute()
ClearBeforeTentativeStart()
ClearDocument()
ClearDocumentStyle()
ClearFont()
ClearJobs()
ClearLevels()
ClearList()
ClearRegisteredImages()
ClearRepresentation(const char *charBytes)
ClearSelection(bool retainMultipleSelections)
ClearStyles()
ClearTabstops(Sci::Line line)
ClearTo(const Style &source)
ClearValue(int partition)
ClearVirtualSpace()
ClickNotified()
ClickSignal(GtkWidget *w, UserStrip *pStrip)
ClickThis(GtkWidget *w)
ClientFromScreen(HWND hWnd, GUI::Point ptScreen)
ClipboardClearSelection(GtkClipboard *, void *data)
ClipboardGetSelection(GtkClipboard *, GtkSelectionData *selection_data, guint info, void *data)
Close()
Close(Point pt1, Point pt2, Point threshold)
Close()
Close(bool updateUI, bool loadingSession, bool makingRoomForNew)
Close()
CloseAllBuffers(bool loadingSession)
CloseArea()
CloseTab(int tab)
ClusterIterator(PangoLayout *layout, int len) : lenPositions(len), finished(false)
CmpString(const char *a, const char *b)
CmpStringNoCase(const char *a, const char *b)
CodePage()
CodePageFamily()
CodePageFromCharSet(DWORD characterSet, UINT documentCodePage)
CodePageFromName(const std::string &encodingName)
CodePageOfDocument()
CodingCookieValue(const char *buf, size_t length)
ColourDesired(long lcol=0)
ColourDesired(unsigned int red, unsigned int green, unsigned int blue)
ColourFromCode(int ch)
ColourFromString(const std::string &s)
ColourOfProperty(const PropSetFile &props, const char *key, Colour colourDefault)
ColourOptional(ColourDesired colour_=ColourDesired(0,0,0), bool isSet_=false) : ColourDesired(colour_), isSet(isSet_)
ColourOptional(uptr_t wParam, sptr_t lParam) : ColourDesired(static_cast<long>(lParam)), isSet(wParam != 0)
ColourRGB(unsigned int red, unsigned int green, unsigned int blue)
ColourTo(Sci_PositionU pos, int chAttr)
ColourTo(unsigned int pos, int chAttr)
Colourise(Sci::Position start, Sci::Position end)
Colourize()
ColumnWidth() : widthDesired(0), widthAllocated(0), isResizeable(false)
CombineWith(MarkerHandleSet *other)
ComboSelectionText(GUI::Window w)
Command(int cmdId)
Command(unsigned long wParam, long)
Command(WPARAM wParam, LPARAM lParam)
Command(WPARAM \/* wParam *\/)
Command(WPARAM wParam)
Command(WPARAM)
Command(WPARAM wParam)
CommandExecute(const GUI::gui_char *command, const GUI::gui_char *directoryForRun)
CommandWorker() : pSciTE(NULL)
Commit(GtkIMContext *, char  *str, ScintillaGTK *sciThis)
CommitStackSelection()
CommitTentative()
CommitThis(char *commitStr)
CompareCaseInsensitive(const char *a, const char *b)
CompareDevCap(HDC hdc, HDC hOtherDC, int nIndex)
CompareNCaseInsensitive(const char *a, const char *b, size_t len)
CompareNoCase(const char *a, const char *b)
CompareString(size_t searchLen_) : searchLen(searchLen_)
CompareStringInsensitive(size_t searchLen_) : searchLen(searchLen_)
Compile(const char *pattern, Sci::Position length, bool caseSensitive, bool posix)
Complete()
CompleteLoading()
CompleteOpen(OpenCompletion oc)
CompleteStoring()
CompletedRedoStep()
CompletedUndoStep()
ContainerNeedsUpdate(int flags)
Contains(PRectangle rc)
Contains(Point pt)
Contains(int val)
Contains(Range other)
Contains(Sci::Position pos)
Contains(int handle)
Contains(const char *charBytes, size_t len)
Contains(Sci::Position pos)
Contains(SelectionPosition sp)
Contains(Point pt)
Contains(std::string const &s, char ch)
ContainsCharacter(Sci::Position pos)
ContainsCharacter(Sci::Position posCharacter)
ContainsLineEnd(const char *s, Sci::Position length)
ContainsLineEnd(const char *s, Sci::Position length) const { return cb.ContainsLineEnd(s, length)
ContainsWholePixel(Point pt)
ContentArea()
ContentWin() : pSciTEWin(0), capturedMouse(false)
Context(lua_State *L)
ContextMenu(Point pt)
ContextMenu(GUI::ScintillaWindow &wSource, GUI::Point pt, GUI::Window wCmd)
ContextMenuMessage(UINT iMessage, WPARAM wParam, LPARAM lParam)
Continue()
ContinueCallTip()
ContinueExecute(int fromPoll)
ContinueMacroList(const char *stext)
ContractedFoldNext(Sci::Line lineStart)
ContractedNext(Sci::Line lineDocStart)
ContractionState() : linesInDocument(1)
ControlCharacterString(unsigned char ch)
ControlGText(GUI::Window w)
ControlIDOfCommand(unsigned long wParam)
ControlIDOfWParam(WPARAM wParam)
ControlText(GUI::Window w)
ControlWndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
ConversionString()
Convert(char** src, gsize *srcleft, char **dst, gsize *dstleft)
ConvertEncoding(const char *original, int codePage)
ConvertIndentation(int tabSize, int useTabs)
ConvertLineEnds(int eolModeSet)
ConvertToDocument()
Converter()
Converter(const char *charSetDestination, const char *charSetSource, bool transliterations)
ConverterFor(enum CaseConversion conversion)
ConverterForConversion(enum CaseConversion conversion)
CookieValue(const std::string &s)
Copy(PRectangle rc, Point from, Surface &surfaceSource)
Copy()
Copy(PRectangle rc, Point from, Surface &surfaceSource)
Copy()
Copy(const SelectionText &other)
Copy(const std::string &s_, int codePage_, int characterSet_, bool rectangular_, bool lineCopy_)
Copy(Font &font_, const FontMeasurements &fm_)
Copy(PRectangle rc, Point from, Surface &surfaceSource)
Copy()
CopyAllowLine()
CopyAsRTF()
CopyData(COPYDATASTRUCT *pcds)
CopyPath()
CopyRangeToClipboard(Sci::Position start, Sci::Position end)
CopySelectionRange(SelectionText *ss, bool allowLineCopy)
CopyText(AtkEditableText *text, gint start, gint end)
CopyText(int startChar, int endChar)
CopyText(int length, const char *text)
CopyToClipboard(const SelectionText &selectedText)
CopyToModeClipboard(const SelectionText &selectedText, QClipboard::Mode clipboardMode_)
Count()
CountBackgroundActivities()
CountBytes()
CountCharacters(Sci::Position startPos, Sci::Position endPos)
CountLineEnds(int &linesCR, int &linesLF, int &linesCRLF)
CountUTF16(Sci::Position startPos, Sci::Position endPos)
Create(const FontParameters &fp)
Create(Window &parent, int, Point, int, bool, int)
Create()
Create(const FontParameters &fp)
Create(actionType at_, Sci::Position position_, const char *data_, Sci::Position lenData_, bool mayCoalesce_)
Create(int indicator, int length)
Create(const FontParameters &fp)
Create(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_)
Create()
Create(const GUI::gui_string &title)
Create(GUI::gui_string text)
Create(GUI::gui_string text, GCallback func, gpointer data)
Create(const char **xpmImage, const GUI::gui_string &toolTip, GtkStyle *pStyle_)
Create()
Create(const GUI::gui_char *text)
Create()
Create(GUI::gui_string text)
Create(const GUI::gui_string &text)
Create()
CreateAndAddFont(const FontSpecification &fs)
CreateBuffers()
CreateButton(const char *text, size_t ident, bool check)
CreateCallTipWindow(PRectangle rc)
CreateCallTipWindow(PRectangle)
CreateIndentation(Sci::Position indent, int tabSize, bool insertSpaces)
CreateIndentation(int indent, int tabSize, bool insertSpaces)
CreateMenu()
CreateNewFont(const FontParameters &fp)
CreateParameterisedDialog(LPCWSTR lpTemplateName, DLGPROC lpProc)
CreatePipe(bool)
CreatePopUp()
CreateRegexSearch(CharClassify *charClassTable)
CreateSimilarSurface(GdkWindow *window, cairo_content_t content, int width, int height)
CreateStrips(GtkWidget *boxMain)
CreateSystemCaret()
CreateText(const char *text)
CreateUI()
Created()
Creation(GtkWidget *container)
Creation(GtkWidget *)
Creation()
CreditsWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
Current(lua_State *L)
Current()
CurrentBuffer()
CurrentBufferConst()
CurrentPosition()
CurrentWordHighlight()
CursorUpOrDown(int direction, Selection::selTypes selt)
CustomDraw(NMHDR *pnmh)
Cut()
CutText(AtkEditableText *text, gint start, gint end)
CutText(int startChar, int endChar)
D2DPenColour(ColourDesired fore, int alpha)
DBCS(unsigned char lead, unsigned char trail)
DBCSCharLength(int codePage, const char *s)
DBCSCharMaxLength()
DWriteMapFontQuality(int extraFontFlag)
Data()
DataObject()
DataObject_AddRef(ULONG)DataObject_AddRef(DataObject *pd)
DataObject_DAdvise(DataObject *, FORMATETC *, DWORD, IAdviseSink *, PDWORD)
DataObject_DUnadvise(DataObject *, DWORD)
DataObject_EnumDAdvise(DataObject *, IEnumSTATDATA **)
DataObject_EnumFormatEtc(DataObject *pd, DWORD dwDirection, IEnumFORMATETC **ppEnum)
DataObject_GetCanonicalFormatEtc(DataObject *pd, FORMATETC *, FORMATETC *pFEOut)
DataObject_GetData(DataObject *pd, FORMATETC *pFEIn, STGMEDIUM *pSTM)
DataObject_GetDataHere(DataObject *, FORMATETC *, STGMEDIUM *)
DataObject_QueryGetData(DataObject *pd, FORMATETC *pFE)
DataObject_QueryInterface(DataObject *pd, REFIID riid, PVOID *ppv)
DataObject_Release(ULONG)DataObject_Release(DataObject *pd)
DataObject_SetData(DataObject *, FORMATETC *, STGMEDIUM *, BOOL)
DataOfGSD(GtkSelectionData *sd) { return gtk_selection_data_get_data(sd)
Deallocate()
DebugDisplay(const char *s)
DebugPrintf(const char *, ...)
DebugPrintf(const char *format, ...)
DebugPrintf(const char *, ...)
DebugPrintf(const char *format, ...)
DecodeMessage(const char *cdoc, std::string &sourcePath, int format, int &column)
Decoration(int indicator_) : indicator(indicator_)
DecorationFillRange(Sci_Position position, int value, Sci_Position fillLength)
DecorationFromIndicator(int indicator)
DecorationList() : currentIndicator(0), currentValue(1), current(nullptr)
DecorationSetCurrentIndicator(int indicator)
DefWndProc(unsigned int, uptr_t, sptr_t)
DefWndProc(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
DefaultFont()
DefaultFontSize()
DefineMarker(int marker, int markerType, Colour fore, Colour back, Colour backSelected)
DefineProperty(const char *name, plcob pb, std::string description="")
DefineProperty(const char *name, plcoi pi, std::string description="")
DefineProperty(const char *name, plcos ps, std::string description="")
DefineWordListSets(const char * const wordListDescriptions[])
DelChar(Sci::Position pos)
DelCharBack(Sci::Position pos)
DelCharBack(bool allowLineStartDeletion)
DelWordOrLine(unsigned int iMessage)
Delete(int position)
Delete(int indicator)
Delete(int position)
DeleteAll()
DeleteAllMarks(int markerNum)
DeleteAnyEmpty()
DeleteChars(Sci::Position position, Sci::Position deleteLength, bool &startSequence)
DeleteChars(Sci::Position pos, Sci::Position len)
DeleteFileStackMenu()
DeleteFontObject(HFONT &font)
DeleteInstance()
DeleteLexerDecorations()
DeleteLine(Sci::Line lineDoc)
DeleteLines(Sci::Line lineDoc, Sci::Line lineCount)
DeleteMark(Sci::Line line, int markerNum)
DeleteMark(Sci::Line line, int markerNum, bool all)
DeleteMarkFromHandle(int markerHandle)
DeletePosition(int position)
DeleteRange(int position, int deleteLength)
DeleteText(AtkEditableText *text, gint start, gint end)
DeleteText(int startChar, int endChar)
DeleteUndoHistory()
DeleteUndoHistory() { cb.DeleteUndoHistory()
Delta(int difference)
Descent(Font &font_)
Descent(Font &font)
Descent(Font &font_)
DescribeProperty(const char *)
DescribeProperty(const char *name)
DescribeWordListSets()
Destroy()
Destroy(GObject *object)
Destroy()
DestroyFindReplace()
DestroyMenuItem(int, int itemID)
DestroyMenuItem(int menuNumber, int itemID)
DestroySystemCaret()
Destroyed()
Destruction()
DeviceHeightFont(int points)
Dialog(HWND hDlg_) : hDlg(hDlg_)
DialogFilterFromProperty(const GUI::gui_char *filterProperty)
DialogFindReplace(HWND hDlg_, bool advanced_)
DialogHandled(GUI::WindowID id, MSG *pmsg)
DialogParameters() :  paramDialogCanceled(true)
DirectorExtension() : inputWatcher(-1), inputChannel(0), host(0)
DirectorExtension() : host(0)
DirectorExtension_ClassName("DirectorExtension")
DirectorExtension_Register(HINSTANCE hInstance)
Directory()
DiscardOverdraw()
DiscoverEOLSetting()
DiscoverIndentSetting()
DiscoverLanguage()
Display(GtkWidget *parent, bool modal)
DisplayAround(const RecentFile &rf)
DisplayCursor(Window::Cursor c)
DisplayFromDoc(Sci::Line lineDoc)
DisplayFromPosition(Surface *surface, const EditModel &model, Sci::Position pos, const ViewStyle &vs)
DisplayFromPosition(Sci::Position pos)
DisplayLastFromDoc(Sci::Line lineDoc)
Dispose(GObject *object)
Dispose(LineLayout *ll)
DistanceToSecondaryStyles()
DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpvReserved)
DoDialog(const TCHAR *resName, DLGPROC lpProc)
DoMenuCommand(int cmdID)
DoReplaceAll(bool inSelection)
DocFromDisplay(Sci::Line lineDisplay)
DocModification(int modificationType_, const Action &act, Sci::Line linesAdded_=0)
Document()
DocumentIndexer(Document *pdoc_, Sci::Position end_)
DocumentLexState()
DocumentModified()
DocumentPointFromView(Point ptView)
DoubleClickTime()
DragEnd(GtkWidget *widget, GdkDragContext * \/*context*\/)
DragEnter(const Point &point)
DragIsRectangularOK(CLIPFORMAT fmt)
DragLeave(GtkWidget *widget, GdkDragContext * \/*context*\/, guint)
DragLeave()
DragMove(const Point &point)
DragOver(DWORD grfKeyState, POINTL pt, PDWORD pdwEffect)
DragThreshold(Point ptStart, Point ptNow)
Draw(Surface *surface, const PRectangle &rc, const PRectangle &rcLine, const PRectangle &rcCharacter, DrawState drawState, int value)
Draw(Surface *surface, PRectangle &rcWhole, Font &fontForCharacter, typeOfFold tFold, int marginStyle)
Draw(Surface *surface, const PRectangle &rc)
Draw(DRAWITEMSTRUCT *pDrawItem)
DrawBox(Surface *surface, int centreX, int centreY, int armSize, ColourDesired fore, ColourDesired back)
DrawCT(GtkWidget *widget, cairo_t *cr, CallTip *ctip)
DrawCaretLineFramed(Surface *surface, const ViewStyle &vsDraw, const LineLayout *ll, PRectangle rcLine, int subLine)
DrawCircle(Surface *surface, int centreX, int centreY, int armSize, ColourDesired fore, ColourDesired back)
DrawFoldLines(Surface *surface, const EditModel &model, const ViewStyle &vsDraw, Sci::Line line, PRectangle rcLine)
DrawFrame(Surface *surface, ColourDesired colour, int alpha, PRectangle rcFrame)
DrawImeIndicator(int indicator, int len)
DrawIndentGuide(Surface *surface, Sci::Line lineVisible, int lineHeight, Sci::Position start, PRectangle rcSegment, bool highlight)
DrawLineMarkerFn(*DrawLineMarkerFn)(Surface *surface, PRectangle &rcWhole, Font &fontForCharacter, int tFold, int marginStyle, const void *lineMarker)
DrawMain(GtkWidget *widget, cairo_t *cr)
DrawMinus(Surface *surface, int centreX, int centreY, int armSize, ColourDesired fore)
DrawPage(GtkPrintOperation *operation, GtkPrintContext *context, gint page_nr, SciTEGTK *scitew)
DrawPageThis(GtkPrintOperation * \/* operation *\/, GtkPrintContext *context, gint page_nr)
DrawPlus(Surface *surface, int centreX, int centreY, int armSize, ColourDesired fore)
DrawPreedit(GtkWidget *widget, cairo_t *cr, ScintillaGTK *sciThis)
DrawPreeditThis(GtkWidget *, cairo_t *cr)
DrawRGBAImage(PRectangle rc, int width, int height, const unsigned char *pixelsImage)
DrawTabArrow(Surface *surface, PRectangle rcTab, int ymid, const ViewStyle &vsDraw)
DrawTabArrowFn(*DrawTabArrowFn)(Surface *surface, PRectangle rcTab, int ymid)
DrawText(GtkWidget *, cairo_t *cr, ScintillaGTK *sciThis)
DrawTextCommon(PRectangle rc, Font &font_, XYPOSITION ybase, const char *s, int len, UINT fuOptions)
DrawTextThis(cairo_t *cr)
DrawThis(cairo_t *cr)
DrawWrapMarkerFn(*DrawWrapMarkerFn)(Surface *surface, PRectangle rcPlace, bool isEndMarker, ColourDesired wrapColour)
Drop(const Point &point, const QMimeData *data, bool move)
DropAdditionalRanges()
DropAt(SelectionPosition position, const char *value, bool moving, bool rectangular)
DropAt(SelectionPosition position, const char *value, size_t lengthValue, bool moving, bool rectangular)
DropCaret()
DropFiles(HDROP hdrop)
DropGraphics(bool freeObjects)
DropRenderTarget()
DropSelection(size_t r)
DropSource()
DropSource_AddRef(ULONG)DropSource_AddRef(DropSource *ds)
DropSource_GiveFeedback(DropSource *, DWORD)
DropSource_QueryContinueDrag(DropSource *, BOOL fEsc, DWORD grfKeyState)
DropSource_QueryInterface(DropSource *ds, REFIID riid, PVOID *ppv)
DropSource_Release(ULONG)DropSource_Release(DropSource *ds)
DropTarget()
DropTarget_AddRef(ULONG)DropTarget_AddRef(DropTarget *dt)
DropTarget_DragLeave(DropTarget *dt)
DropTarget_DragOver(DropTarget *dt, DWORD grfKeyState, POINTL pt, PDWORD pdwEffect)
DropTarget_QueryInterface(DropTarget *dt, REFIID riid, PVOID *ppv)
DropTarget_Release(ULONG)DropTarget_Release(DropTarget *dt)
DropUndoSequence()
Duplicate(bool forLine)
Duration(bool reset)
Duration()
Duration(bool reset)
DwellEnd(bool mouseMoved)
DynamicLibraryImpl(const char *modulePath)
EdgeProperties(int column_ = 0, ColourDesired colour_ = ColourDesired(0))
EdgeProperties(uptr_t wParam, sptr_t lParam)
EditColour(HWND hwnd, HDC hdc)
EditModel()
EditView()
Editor()
EffectFromState(DWORD grfKeyState)
ElapsedTime()
ElapsedTime() : bigBit(0), littleBit(0)
ElapsedTime()
ElementAt(int nIndex)
Elements()
EliminateDuplicateWords(std::string &words)
Ellipse(PRectangle rc, ColourDesired fore, ColourDesired back)
Empty()
Enable(int id, bool enable)
EnableAMenuItem(int wIDCheckItem, bool val)
EnableButton(HWND wTools, int id, bool enable)
Enabled()
EncodeString(const std::string &s)
EncodedFromUTF8(char *utf8, char *encoded)
Encoding()
End(int indicator, int position)
End()
EndLineStyle()
EndMatches(GUI::gui_string const &s, GUI::gui_string const &end)
EndRun(int position)
EndStackedTabbing()
EndStyling(lua_State *L)
EndUndoAction()
EndUndoAction() { cb.EndUndoAction()
EndsWith(GUI::gui_string const &s, GUI::gui_string const &end)
EnsureAllChildrenVisible(int line, int level)
EnsureCaretVisible(bool useMargin, bool vert, bool horiz)
EnsureData()
EnsureFinalNewLine()
EnsureLength(int wantedLength)
EnsureLineVisible(Sci::Line lineDoc, bool enforcePolicy)
EnsureRangeVisible(GUI::ScintillaWindow &win, int posStart, int posEnd, bool enforcePolicy)
EnsureRenderTarget(HDC hdc)
EnsureStyle(size_t index)
EnsureStyledTo(Sci::Position pos)
EnsureUndoRoom()
Entry()
EnumProperties(const char *propkind)
EqualCaseInsensitive(const char *a, const char *b)
EscapeFilePathsForMenu(GUI::gui_string &path)
EscapeHanja()
EscapeSignal(GtkWidget *w, GdkEventKey *event, FindStrip *pStrip)
EscapeSignal(GtkWidget *w, GdkEventKey *event, ReplaceStrip *pStrip)
EscapeSignal(GtkWidget *w, GdkEventKey *event, UserStrip *pStrip)
Evaluate(const char *key)
EventLoop()
Execute(CharacterIndexer &ci, Sci::Position lp, Sci::Position endp)
Execute()
ExecuteHelp(const char *cmd)
ExecuteMacroCommand(const char *command)
ExecuteNext()
ExecuteOne(const Job &jobToRun)
ExecuteOtherHelp(const char *cmd)
Exhausted()
Exists()
Exists(const char *key)
Exists(const GUI::gui_char *dir, const GUI::gui_char *path, FilePath *resultPath)
Expand(const std::string &withVars, int maxExpands)
ExpandAllInPlace(const PropSetSimple &props, std::string &withVars, int maxExpands, const VarChain &blankVars)
ExpandAllInPlace(const PropSetFile &props, std::string &withVars, int maxExpands, const VarChain &blankVars = VarChain())
ExpandFolds(int line, bool expand, int level)
ExpandLevels(Sci::Line sizeNew)
ExpandLine(Sci::Line line)
Expose(GtkWidget *, GdkEventExpose *ose)
ExposeCT(GtkWidget *widget, GdkEventExpose * \/*ose*\/, CallTip *ctip)
ExposeMain(GtkWidget *widget, GdkEventExpose *ose)
ExposePreedit(GtkWidget *widget, GdkEventExpose *ose, ScintillaGTK *sciThis)
ExposePreeditThis(GtkWidget *widget, GdkEventExpose *)
ExposeText(GtkWidget *widget, GdkEventExpose *ose, ScintillaGTK *sciThis)
ExposeTextThis(GtkWidget * \/*widget*\/, GdkEventExpose *ose)
Extend(SelectionPosition p)
ExtendStyleRange(Sci::Position pos, int delta, bool singleLine)
ExtendWordSelect(Sci::Position pos, int delta, bool onlyWordCharacters)
Extension()
ExtensionFileName()
ExternalLeading(Font &)
ExternalLeading(Font &font)
ExternalLeading(Font &)
ExternalLeading(Font &font_)
ExternalMarginWidth()
ExtractCharacter(Sci::Position position)
ExtractLine(const char *buf, size_t length)
FRFindCmd()
FRMarkAllCmd()
FRReplaceAllCmd()
FRReplaceCmd()
FRReplaceInBuffersCmd()
FRReplaceInSelectionCmd()
FailedSaveMessageBox(const FilePath &filePathSaving)
FileLoader(WorkerListener *pListener_, ILoader *pLoader_, const FilePath &path_, size_t size_, FILE *fp_)
FileNameExt()
FilePath(FilePath const &directory, FilePath const &name)
FilePath(const GUI::gui_char *fileName_) : fileName(fileName_ ? fileName_ : GUI_TEXT(""))
FilePath(const GUI::gui_string &fileName_) : fileName(fileName_)
FileReader(const FilePath &fPath, bool caseSensitive_)
FileWorker(WorkerListener *pListener_, const FilePath &path_, size_t size_, FILE *fp_)
Fill(Sci_Position position)
Fill(int position)
FillComboFromMemory(WComboBoxEntry *combo, const ComboMemory &mem, bool useTop = false)
FillComboFromMemory(int id, const ComboMemory &mem, bool useTop = false)
FillComboFromProps(WComboBoxEntry *combo, PropSetFile &props)
FillComboFromProps(HWND combo, PropSetFile &props)
FillCombos(Dialog &dlg)
FillFields()
FillFromMemory(const std::vector<std::string> &mem, bool useTop)
FillFunctionDefinition(int pos \/*= -1*\/)
FillRange(int &position, int value, int &fillLength)
FillRectangle(PRectangle rc, ColourDesired back)
FillRectangle(PRectangle rc, Surface &surfacePattern)
FillRectangle(PRectangle rc, ColourDesired back)
FillRectangle(PRectangle rc, Surface &surfacePattern)
FillRectangle(PRectangle rc, ColourDesired back)
FillRectangle(PRectangle rc, Surface &surfacePattern)
FillRectangle(PRectangle rc, ColourDesired back)
FillRectangle(PRectangle rc, Surface &surfacePattern)
FillRun(Surface *surface, int code, int startX, int y, int x)
FilterFromString(const std::string &values)
FilterSelections()
Finalise()
Find(const char *prefix)
Find(int position)
Find(const char *prefix)
Find(int character)
Find(const char *languageName)
Find(int language)
Find(int key, int modifiers)
Find(int value, int start)
Find(const FontSpecification &fs)
Find(const char *)
Find()
Find(ARG_TYPE searchValue, T_POSITION startAfter = (T_POSITION)0)
Find()
FindBefore(XYPOSITION x, int lower, int upper)
FindCaseInsensitive(const std::vector<std::string> &values, const std::string &s)
FindCmd()
FindColumn(Sci::Line line, Sci::Position column)
FindComboChanged(GtkEditable *, FindStrip *pStrip)
FindComboChanged(GtkEditable *, ReplaceStrip *pStrip)
FindConstant(const char *name)
FindControl(int control)
FindDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
FindFunction(const char *name)
FindFunctionByConstantName(const char *name)
FindHasText()
FindInFiles()
FindInFilesBrowse()
FindInFilesCmd()
FindInFilesDotDot()
FindInFilesResponse(int responseID)
FindInTarget(std::string findWhatText, int startPosition, int endPosition)
FindIncrement()
FindIncrementChanged()
FindIncrementCompleteCmd()
FindIncrementEscapeSignal(GtkWidget *w, GdkEventKey *event, SciTEGTK *scitew)
FindIncrementFocusOutSignal(GtkWidget *)
FindIncrementNext(bool select)
FindIncrementSetColour(bool valid)
FindIndex(int nIndex)
FindLanguageProperty(const char *pattern, const char *defaultValue)
FindMatchingBracePosition(bool editor, int &braceAtCaret, int &braceOpposite, bool sloppy)
FindMaxAscentDescent()
FindMessage(HWND hDlg, UINT message, WPARAM wParam)
FindMessageBox(const std::string &msg, const std::string *findItem)
FindNext(bool reverseDirection, bool showWarnings, bool allowRegExp)
FindNextChange(int position, int end)
FindNextCmd()
FindOpenXmlTag(const char sel[], int nSize)
FindOrCreate(const FontParameters &fp)
FindOtherInstance()
FindPositionFromX(XYPOSITION x, Range range, bool charPosition)
FindProperty(const char *name)
FindReplace(bool replace)
FindReplaceAdvanced()
FindReplaceGrabFields()
FindReplaceResponse(int responseID)
FindReplaceStrip() : initializingSearch(false), incrementalBehaviour(simple)
FindReplaceStrip() : incrementalBehaviour(simple)
FindStrip()
FineTickerAvailable()
FineTickerCancel(TickReason reason)
FineTickerCancel(TickReason)
FineTickerCancel(TickReason reason)
FineTickerRunning(TickReason reason)
FineTickerRunning(TickReason)
FineTickerRunning(TickReason reason)
FineTickerStart(TickReason reason, int millis, int \/* tolerance *\/)
FineTickerStart(TickReason, int, int)
FineTickerStart(TickReason reason, int millis, int tolerance)
FinishedAdding()
FinishedFuture(int index, Buffer::FutureDo fd)
FinishedJob()
First()
FixInvalidUTF8(const std::string &text)
FixName()
FixSelectionForClipboard()
FlagFromCmd(int cmd)
Flags()
FlipBitmap(HBITMAP bitmap, int width, int height)
Flush()
FlushCachedState()
FlushDrawing()
Focus(GtkDirectionType direction)
Focus(GtkDirectionType \/* direction*\/ )
Focus()
FocusIn(GtkWidget *widget, GdkEventFocus * \/*event*\/)
FocusInThis(GtkWidget *)
FocusOut(GtkWidget *widget, GdkEventFocus * \/*event*\/)
FocusOutThis(GtkWidget *)
FocusSignal(GtkWidget *\/*widget*\/, GtkDirectionType direction, Strip *pStrip)
Fold(Sci_PositionU startPos, Sci_Position lengthDoc, int initStyle, IDocument *pAccess)
Fold(char *folded, size_t sizeFolded, const char *mixed, size_t lenMixed)
FoldAll(int action)
FoldAll()
FoldChanged(Sci::Line line, int levelNow, int levelPrev)
FoldChanged(int line, int levelNow, int levelPrev)
FoldExpand(Sci::Line line, int action, int level)
FoldLine(Sci::Line line, int action)
Font() : fid(0)
Font()
FontAlias()
FontAlias(const FontAlias &other) : Font()
FontAndCharacterSet(int characterSet_, QFont *pfont)
FontCached(const FontParameters &fp)
FontCharacterSet(Font &f)
FontHandle() : pfd(0), characterSet(-1)
FontHandle(PangoFontDescription *pfd_, int characterSet_)
FontMeasurements()
FontNames()
FontPointer(Font &f)
FontRealised()
FontSpecification()
ForAll(GtkCallback callback, gpointer callback_data)
ForeAsLong()
FormatAndMetrics(HFONT hfont_, int extraFontFlag_, int characterSet_)
FormatEnumerator(int pos_, CLIPFORMAT formats_[], size_t formatsLen_)
FormatEnumerator_AddRef(ULONG)FormatEnumerator_AddRef(FormatEnumerator *fe)
FormatEnumerator_Clone(FormatEnumerator *fe, IEnumFORMATETC **ppenum)
FormatEnumerator_Next(FormatEnumerator *fe, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
FormatEnumerator_QueryInterface(FormatEnumerator *fe, REFIID riid, PVOID *ppv)
FormatEnumerator_Release(ULONG)FormatEnumerator_Release(FormatEnumerator *fe)
FormatEnumerator_Reset(FormatEnumerator *fe)
FormatEnumerator_Skip(FormatEnumerator *fe, ULONG celt)
FormatRange(bool draw, Sci_RangeToFormat *pfr)
Forward()
Forward(Sci_Position nb)
Forward(lua_State *L)
Forward()
ForwardBytes(Sci_Position nb)
ForwardPropertyToEditor(const char *key)
ForwardSetState(int state_)
ForwardSetState(lua_State *L)
FractionalSize()
Free()
FreeAssoc(Association* pAssoc)
FreeNode(Node*pNode)
FreeSubStyles()
FromAccessible(GtkAccessible *accessible)
FromAccessible(AtkObject *accessible)
FromInts(int left_, int top_, int right_, int bottom_)
FromInts(int x_, int y_)
FromLong(long lpoint)
FromWidget(GtkWidget *widget)
FullPaint()
FullPaintDC(HDC hdc)
FullScreenToggle()
Function(GtkDialog *\/*w*\/, gint responseID, SciTEGTK *app)
Function(GtkWidget *\/*w*\/, SciTEGTK *app)
Function(GtkWidget *\/*w*\/, T *object)
GObjectWatcher(GObject *obj)
GTKMutex()
GapPosition()
GapPosition() const { return cb.GapPosition()
GapPosition()
GapTo(int position)
GenericPropertiesFile(const FilePath &filename)
Get(const char *key)
Get(int ident)
Get(int index)
GetAbbrevPropertiesFileName()
GetAcceleratorTable()
GetAccessible(GtkWidget *widget)
GetAccessibleThis(GtkWidget *widget)
GetAssocAt(ARG_KEY key, unsigned int& nHash)
GetAt(T_POSITION position)
GetAt(int nIndex)
GetAt(T_POSITION position)
GetAttributesForStyle(unsigned int styleNum)
GetBlue()
GetCTag()
GetCaretInLine()
GetCaretOffset(AtkText *text)
GetCaretOffset()
GetCharRange(char *buffer, Sci::Position position, Sci::Position lengthRetrieve)
GetCharRange(char *buffer, Sci_Position position, Sci_Position lengthRetrieve)
GetCharacterAndWidth(Sci_Position position, Sci_Position *pWidth)
GetCharacterAtOffset(AtkText *text, gint offset)
GetCharacterAtOffset(int charOffset)
GetCharacterCount(AtkText *text)
GetCharacterCount()
GetCharacterExtents(AtkText *text, gint offset, gint *x, gint *y, gint *width, gint *height, AtkCoordType coords)
GetCharsOfClass(cc characterClass, unsigned char *buffer)
GetCharsOfClass(CharClassify::cc characterClass, unsigned char *buffer)
GetClass(unsigned char ch) const { return static_cast<cc>(charClass[ch])
GetClientDrawingRectangle()
GetClientExtent()
GetClientPosition()
GetClientRectangle()
GetColumn(Sci::Position pos)
GetCompositionString(DWORD dwIndex)
GetConstantName(int value, char *nameOut, unsigned nameBufferLen, const char *prefix)
GetContext()
GetCount()
GetCtrlID()
GetCurrent(char *s, Sci_PositionU len)
GetCurrentIndicator()
GetCurrentLine()
GetCurrentLineNumber()
GetCurrentLowered(char *s, Sci_PositionU len)
GetCurrentScrollPosition()
GetCurrentValue()
GetData(FORMATETC *pFEIn, STGMEDIUM *pSTM)
GetDefaultAttributes(AtkText *text)
GetDefaultAttributes()
GetDefaultDirectory()
GetDefaultPropertiesFileName()
GetDesiredRect()
GetDirectoryPropertiesFileName()
GetDocumentAt(int index)
GetDocumentByName(const FilePath &filename, bool excludeCurrent)
GetDocumentByWorker(const FileWorker *pFileWorker)
GetEndStyled()
GetErrorMessage(DWORD nRet)
GetExpanded(const char *key, char *result)
GetExpanded(Sci::Line lineDoc)
GetExpandedString(const char *key)
GetFileLength()
GetFileNameProperty(const char *name)
GetFilePosition()
GetFirst(const char *&key, const char *&val)
GetFoldDisplayText(Sci::Line lineDoc)
GetFoldDisplayTextShown(Sci::Line lineDoc)
GetFoldParent(Sci::Line line)
GetFrameWidth()
GetFullLine(const char *&fpc, size_t &lenData, char *s, size_t len)
GetGreen()
GetGrowSize()
GetGtkSelectionText(GtkSelectionData *selectionData, SelectionText &selText)
GetHWND()
GetHangulOfHanja(wchar_t *inout)
GetHashTableSize()
GetHead()
GetHeadPosition()
GetHeight(Sci::Line lineDoc)
GetHeight()
GetHexaChar(unsigned char hd1, unsigned char hd2)
GetHexaDigit(char ch)
GetHighlightDelimiters(HighlightDelimiter &highlightDelimiter, Sci::Line line, Sci::Line lastLine)
GetHotSpotRange()
GetID()
GetID() const { return wSciTE.GetID()
GetImeAttributes()
GetImeCaretPos(QInputMethodEvent *event)
GetImeCaretPos()
GetIndentState(int line)
GetInstance()
GetInt(const char *key, int defaultValue)
GetIntelliMouseParameters()
GetLanguage()
GetLastChild(Sci::Line lineParent, int level, Sci::Line lastLine)
GetLevel(Sci_Position line)
GetLevel(Sci::Line line)
GetLevel()
GetLexInterface()
GetLexerCountFn(EXT_LEXER_DECL *GetLexerCountFn)()
GetLexerFactoryFunction(EXT_LEXER_DECL *GetLexerFactoryFunction)(unsigned int Index)
GetLexerFunction(EXT_LEXER_DECL *GetLexerFunction)(unsigned int Index)
GetLexerNameFn(EXT_LEXER_DECL *GetLexerNameFn)(unsigned int Index, char *name, int buflength)
GetLine(Sci_Position position)
GetLine(GUI::ScintillaWindow &win, int line)
GetLine(char *text, int sizeText, int line)
GetLine(int position)
GetLineEndTypes()
GetLineEndTypesActive() const { return cb.GetLineEndTypes()
GetLineEndTypesAllowed() const { return cb.GetLineEndTypes()
GetLineIndentPosition(Sci::Line line)
GetLineIndentPosition(int line)
GetLineIndentation(Sci_Position line)
GetLineIndentation(int line)
GetLineLength(int line)
GetLinePartsInStyle(int line, const StyleAndWords &saw)
GetLineState(Sci_Position line)
GetLineState(Sci::Line line)
GetLineState(int line)
GetLocalPropertiesFileName()
GetLongLong(const char *key, long long defaultValue)
GetMarginCursor(Point pt)
GetMark(Sci::Line line)
GetMatch(std::vector<char *>::iterator start, std::vector<char *>::iterator end, const char *wordStart, const std::string &wordCharacters, int wordIndex, Compare comp)
GetMatches(std::vector<char *>::iterator start, std::vector<char *>::iterator end, const char *wordStart, char otherSeparator, bool exactLen, Compare comp)
GetMaxLineState()
GetMenuCommandAsInt(std::string commandName)
GetMonitorRect(Point pt)
GetNSelections(AtkText *text)
GetNSelections()
GetName()
GetNearestWord(const char *wordStart, size_t searchLen, bool ignoreCase, const std::string &wordCharacters, int wordIndex)
GetNewExpandString(const char *keybase, const char *filename)
GetNext(T_POSITION& rPosition)
GetNext(const char *&key, const char *&val)
GetNextAssoc(T_POSITION& rNextPosition, KEY& rKey, VALUE& rValue)
GetNextChar()
GetNextTabstop(Sci::Line line, int x)
GetNumWordLists()
GetOffsetAtPoint(AtkText *text, gint x, gint y, AtkCoordType coords)
GetOffsetAtPoint(gint x, gint y, AtkCoordType coords)
GetPaintDevice()
GetPainter()
GetPosition()
GetPreferredHeight(GtkWidget *widget, gint *minimalHeight, gint *naturalHeight)
GetPreferredWidth(GtkWidget *widget, gint *minimalWidth, gint *naturalWidth)
GetPrev(T_POSITION& rPosition)
GetPropertyInt(const char *key, int defaultValue)
GetPropertyInt(const char *propName)
GetRTFNextControl(const char **style, char *control)
GetRTFStyleChange(const char *last, const char *current)
GetRange(T *buffer, int position, int retrieveLength)
GetRange(GUI::ScintillaWindow &win, int start, int end, char *text)
GetRangeInUIEncoding(GUI::ScintillaWindow &win, int selStart, int selEnd)
GetRangeString(GUI::ScintillaWindow &win, int selStart, int selEnd)
GetRed()
GetRedoStep()
GetRelative(Sci_Position n)
GetRelativeCharacter(Sci_Position n)
GetRelativePosition(Sci_Position positionStart, Sci_Position characterOffset)
GetRelativePositionUTF16(Sci::Position positionStart, Sci::Position characterOffset)
GetReverseArrowCursor()
GetRowHeight()
GetRunAttributes(AtkText *text, gint offset, gint *start_offset, gint *end_offset)
GetRunAttributes(int charOffset, int *startChar, int *endChar)
GetScale()
GetScaledHeight()
GetScaledWidth()
GetSciteDefaultHome()
GetSciteUserHome()
GetScrollInfo(int nBar, LPSCROLLINFO lpsi)
GetSelectedRange()
GetSelection()
GetSelection(GtkSelectionData *selection_data, guint info, SelectionText *text)
GetSelection(AtkText *text, gint selection_num, gint *start_pos, gint *end_pos)
GetSelection(gint selection_num, int *startChar, int *endChar)
GetSelection()
GetSeparator()
GetSize() const { return pces.size()
GetSize()
GetStartPosition()
GetStartSegment()
GetString(const char *key)
GetStringAtOffset(AtkText *text, gint offset, AtkTextGranularity granularity, gint *start_offset, gint *end_offset)
GetStyleAndWords(const char *base)
GetStyleClock()
GetStyleRange(unsigned char *buffer, Sci::Position position, Sci::Position lengthRetrieve)
GetSubStyleBases()
GetTag(char *tagValue, int tagNumber)
GetTail()
GetTailPosition()
GetText(AtkText *text, int start_offset, int end_offset)
GetText(int startChar, int endChar)
GetText(uptr_t wParam, sptr_t lParam)
GetTextAfterOffset(AtkText *text, int offset, AtkTextBoundary boundary_type, int *start_offset, int *end_offset)
GetTextAtOffset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
GetTextBeforeOffset(AtkText *text, int offset, AtkTextBoundary boundary_type, int *start_offset, int *end_offset)
GetTextLength()
GetTextRangeUTF8(Sci::Position startByte, Sci::Position endByte)
GetTextRectangle()
GetTranslationToAbout(const char * const propname, bool retainIfNotFound)
GetTypesep()
GetUndoStep()
GetUserPropertiesFileName()
GetValue(int n, char *value, int len)
GetValue(int item)
GetValue(int n, char *value, int len)
GetValue(int control)
GetVersion(LPCTSTR lpszDllName)
GetVisible(Sci::Line lineDoc)
GetVisible(int index)
GetVisibleOriginInMain()
GetVisibleRows()
GetWidth()
GetWild(const char *keybase, const char *filename)
GetWildUsingStart(const PropSetFile &psStart, const char *keybase, const char *filename)
GetWindowPosition(int *left, int *top, int *width, int *height, int *maximize)
GetWordListDescription(int index)
GetWorkingDirectory()
GetterFunction()
GlobalMemory() : hand(0), ptr(0)
GlobalMemory(HGLOBAL hand_) : hand(hand_), ptr(0)
GoLineDialog()
GoLineDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
GoLineMessage(HWND hDlg, UINT message, WPARAM wParam)
GoMatchingBrace(bool select)
GoMatchingPreprocCond(int direction, bool select)
GoMessage(int dir)
GoToLine(Sci::Line lineNo)
GotoCmd()
GotoLineEnsureVisible(int line)
GotoResponse(int responseID)
GrabFields()
GrabMatches(CharacterIndexer &ci)
GrabToggles()
GrepDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
GrepIntoDirectory(const FilePath &directory)
GrepMessage(HWND hDlg, UINT message, WPARAM wParam)
GrepRecursive(GrepFlags gf, const FilePath &baseDir, const char *searchString, const GUI::gui_char *fileTypes)
GreyToAlpha(GdkPixbuf *ppb, GdkColor fore)
GtkFromWinCaption(const char *text)
HFont()
HJdictAvailable()
HackColour(int &n)
HandleCompositionInline(uptr_t, sptr_t lParam)
HandleCompositionWindowed(uptr_t wParam, sptr_t lParam)
HandleCopyData(LPARAM lParam)
HandleReplaceCommand(int cmd, bool reverseDirection)
HandleReplaceCommand(int cmd, bool reverseFind)
HandleSaveAs(const char *savePath)
HandleStringMessage(const char *message)
HandleXml(char ch)
HanjaDic() : HJinterface(NULL)
HasCaretSizeChanged()
HasCaseFolder()
HasClose()
HasCommandToRun()
HasConnection()
HasFocus()
HasFocusOnSelfOrChild()
HasMnemonic()
HasNamedFunction(const char *name)
Hash(unsigned int styleNumber_, const char *s, unsigned int len_)
HashFont(const FontParameters &fp)
HashKey(ARG_KEY key)
HaveMouseCapture()
Height(Font &font_)
Height()
Height(Font &font)
Height(Font &font_)
Height()
HexStringFromInteger(long i)
HiWord(uptr_t l)
HiddenLines()
HideKeyboardCues()
HideMatch()
HighShortFromLong(long x)
HighlightCurrentWord(bool highlight)
HighlightDelimiter() : isEnabled(false)
HmenuID(size_t id)
HorizontalMove(unsigned int iMessage)
HorizontalScrollMessage(WPARAM wParam)
HorizontalScrollTo(int xPos)
Hwnd()
HwndFromString(const char *s)
HwndOf(GUI::Window w)
IFaceFunctionIsScriptable(const IFaceFunction &f)
IFacePropertyIsScriptable(const IFaceProperty &p)
IFaceTypeIsNumeric(IFaceType t)
IFaceTypeIsScriptable(IFaceType t, int index)
IID_IHanjaDic(selectany)
IMContext(HWND hwnd_)
IOSignal(GIOChannel *, GIOCondition, SciTEGTK *scitew)
Idle()
IdleCallback(gpointer pSci)
IdleStyling()
IdleWork()
Idler()
IdlerTick(gpointer pSciTE)
ImageByteSwapped(int width, int height, const unsigned char *pixelsImage)
ImeEndComposition()
ImeOnReconvert(LPARAM lParam)
ImeStartComposition()
ImportMenu(int pos)
InGoodUTF8(Sci::Position pos, Sci::Position &start, Sci::Position &end)
InLine(int offset, int line)
InList(const char *s)
InListAbbreviated(const char *s, const char marker)
InListAbridged(const char *s, const char marker)
InSelectionForEOL(Sci::Position pos)
IncludesStyle(int style)
IncrementProgress(size_t increment)
IncrementSearchMode()
IncrementStyleClock()
Indent(bool forwards, Sci::Line lineBottom, Sci::Line lineTop)
Indent(bool forwards)
IndentAmount(Sci_Position line, int *flags, PFNIsCommentLeader pfnIsCommentLeader)
IndentOfBlock(int line)
IndentSize()
IndexPropKey(const char *bufPrefix, int bufIndex, const char *bufAppendix)
Indicator()
Indicator() : under(false), fillAlpha(30), outlineAlpha(50), attributes(0)
Indicator(int style_, ColourDesired fore_=ColourDesired(0,0,0), bool under_=false, int fillAlpha_=30, int outlineAlpha_=50)
IndicatorDefinition(const char *definition)
IndicatorFill(Sci_Position start, Sci_Position end, int indicator, int value)
Init(SurfaceID sid, WindowID wid)
Init(WindowID wid)
Init()
Init(SurfaceID sid, WindowID \/*wid*\/)
Init(WindowID wid)
Init()
Init(size_t stylesSize_)
Init(const char *const *linesForm)
Init(const char *textForm)
Init(SurfaceID sid, WindowID)
Init(WindowID \/* wid *\/)
Init(SurfaceID sid, WindowID)
Init(WindowID)
Init()
Init(SciTEWin *stw_)
InitBuffer(int)
InitBuffer(int index)
InitGlobalScope(bool checkProperties, bool forceReload = false)
InitHashTable(unsigned int hashSize, bool bAllocNow = true)
InitPixMap(int width, int height, Surface *surface_, WindowID wid)
InitPixMap(int width, int height, Surface *surface_, WindowID)
Initialise(ExtensionAPI *host_)
Initialise(bool resetToStart)
InitialiseBuffers()
Initialised()
InputCodePage()
Insert(int val)
Insert(int position, T v)
Insert(Pane p, int pos, const char *s)
Insert(const std::string &s)
InsertAfter(T_POSITION position, ARG_TYPE newElement)
InsertAt(int nIndex, ARG_TYPE newElement, int nCount = 1)
InsertBefore(T_POSITION position, ARG_TYPE newElement)
InsertEmpty(int position, int insertLength)
InsertFindInMemory()
InsertFromArray(int positionToInsert, const T s[], int positionFrom, int insertLength)
InsertHandle(int handle, int markerNum)
InsertLine(Sci::Line line, Sci::Position position, bool lineStart)
InsertLine(Sci::Line lineDoc)
InsertLine(Sci::Line line)
InsertLines(Sci::Line lineDoc, Sci::Line lineCount)
InsertPartition(int partition, int pos)
InsertPaste(const char *text, int len)
InsertPasteShape(const char *text, int len, PasteShape shape)
InsertSpace(int position, int insertLength)
InsertString(Sci::Position position, const char *s, Sci::Position insertLength, bool &startSequence)
InsertString(Sci::Position position, const char *s, Sci::Position insertLength)
InsertStringUTF8(Sci::Position bytePos, const gchar *utf8, Sci::Position lengthBytes)
InsertText(AtkEditableText *text, const gchar *contents, gint length, gint *position)
InsertText(const gchar *text, int lengthBytes, int *charPosition)
InsertText(Sci::Line line, Sci::Position delta)
InsertText(int partitionInsert, int delta)
InsertValue(int position, int insertLength, T v)
Instance()
IntFromHexByte(const char *hexByte)
IntFromHexDigit(int ch)
InternalGrep(GrepFlags gf, const GUI::gui_char *directory, const GUI::gui_char *fileTypes, const char *search, sptr_t &originalEnd)
InternalIsLeadByte(char ch)
InternalLeading(Font &)
InternalLeading(Font & \/* font *\/)
InternalLeading(Font &font_)
Intersect(SelectionSegment check)
Intersects(PRectangle other)
Invalidate(validLevel validity_)
Invalidate(LineLayout::validLevel validity_)
InvalidateAll()
InvalidateCaret()
InvalidateClose()
InvalidateRange(Sci::Position start, Sci::Position end)
InvalidateRectangle(PRectangle rc)
InvalidateSelection(SelectionRange newMain, bool invalidateWholeSelection)
InvalidateStyleData()
InvalidateStyleRedraw()
InvalidateWholeSelection()
InvertedLight(ColourDesired orig)
IsADigit(int ch)
IsADigit(int ch, int base)
IsASCII(int ch)
IsASCIIPunctuationCharacter(unsigned int ch)
IsASCIIWordByte(unsigned char ch)
IsASpace(int ch)
IsASpace(unsigned int ch)
IsASpace(int ch)
IsASpaceCharacter(unsigned int ch)
IsASpaceOrTab(int ch)
IsAbsolute()
IsAllSpacesOrTabs(const char *s, unsigned int len)
IsAlphaNumeric(int ch)
IsAlphabetic(unsigned int ch)
IsArrowCharacter(char ch)
IsBodyOfFoldBlock(Sci::Line line)
IsBold()
IsBrace(char ch)
IsBufferAvailable()
IsCollectingUndo()
IsCollectingUndo() const { return cb.IsCollectingUndo()
IsCommentLine(const char *line)
IsCompatibleDC(HDC hOtherDC)
IsControlCharacter(int ch)
IsCrLf(Sci::Position pos)
IsDBCSLeadByte(int codePage, char ch)
IsDBCSLeadByte(char ch)
IsDBCSLeadByte(int codePage, char ch)
IsDestroyed()
IsDirectory()
IsDynamic()
IsEOLChar(char ch)
IsEmpty()
IsEmpty() const { return words.length()
IsExecuting()
IsFillUpChar(char ch)
IsFoldBlockHighlighted(Sci::Line line)
IsHangul(const QChar qchar)
IsHanja(int hanja)
IsHeadOfFoldBlock(Sci::Line line)
IsIdContinue(int character)
IsIdPattern(int character)
IsIdStart(int character)
IsKeyDown(int)
IsKeyDown(int \/*key*\/)
IsKeyDown(int key)
IsLastStep(const DocModification &mh)
IsLeadByte(char ch)
IsLineEndChar(char c)
IsLineEndPosition(Sci::Position position)
IsLineFrameOpaque(bool caretActive, bool lineContainsCaret)
IsLinePreprocessorCondition(char *line)
IsLineStartPosition(Sci::Position position)
IsLoading()
IsLowerCase(int ch)
IsOctalDigit(char ch)
IsPositionInLineEnd(Sci::Position position)
IsPropertiesFile(const FilePath &filename)
IsProtected() const { return !(changeable && visible)
IsReadOnly()
IsReadOnly() const { return cb.IsReadOnly()
IsRectExtend(unsigned int iMessage)
IsRectangular()
IsRectangularInMime(const QMimeData *mimeData)
IsRoot()
IsSameOrChild(const GUI::Window &wParent, HWND wChild)
IsSavePoint()
IsSavePoint() const { return cb.IsSavePoint()
IsSet()
IsSingleChar() const { return words.length()
IsSpaceOrTab(int ch)
IsSpaceOrTab(char ch)
IsStdinBlocked()
IsStopChar(char ch)
IsSubordinate(int levelStart, int levelTry)
IsSwitchCharacter(GUI::gui_char ch)
IsTabCharacter(char ch)
IsTailOfFoldBlock(Sci::Line line)
IsUTF8TrailByte(int ch)
IsUnicodeMode()
IsUntitled()
IsUpperCase(int ch)
IsValid()
IsValid(const std::string &name)
IsWhiteLine(Sci::Line line)
IsWord(unsigned char ch) const { return static_cast<cc>(charClass[ch])
IsWordAt(Sci::Position start, Sci::Position end)
IsWordCharacter(int ch)
IsWordEndAt(Sci::Position pos)
IsWordPartSeparator(unsigned int ch)
IsWordStartAt(Sci::Position pos)
IsXidContinue(int character)
IsXidStart(int character)
Item(int id)
ItemHeight()
ItemTextG(int id)
ItemTextU(int id)
Job()
Job(const std::string &command_, const FilePath &directory_, JobSubsystem jobType_, const std::string &input_, int flags_)
JobMode(PropSetFile &props, int item, const char *fileNameExt) : jobType(jobCLI), saveBefore(0), isFilter(false), flags(0)
JobQueue()
Key(GdkEventKey *event)
KeyCommand(unsigned int iMessage)
KeyDefault(int key, int modifiers)
KeyDefault(int, int)
KeyDown(int key, bool shift, bool ctrl, bool alt, bool *consumed)
KeyDown(GdkEventKey *event)
KeyDown(WPARAM wParam)
KeyDown(WPARAM key)
KeyDownWithModifiers(int key, int modifiers, bool *consumed)
KeyFromLabel(GUI::gui_string label)
KeyFromString(const char *charBytes, size_t len)
KeyMap()
KeyMatch(const char *menuKey, int keyval, int modifiers)
KeyMatch(const std::string &sKey, int keyval, int modifiers)
KeyModifiers(int key_, int modifiers_) : key(key_), modifiers(modifiers_)
KeyPress(GtkWidget *widget, GdkEventKey *event)
KeyPress(GtkWidget * \/*widget*\/, GdkEventKey *event, SciTEGTK *scitew)
KeyRelease(GtkWidget *widget, GdkEventKey *event)
KeyRelease(GtkWidget * \/*widget*\/, GdkEventKey *event, SciTEGTK *scitew)
KeyThis(GdkEventKey *event)
KeyTranslate(int keyIn)
KeyUp(WPARAM wParam)
KoreanIME()
Label(GtkWidget *child)
Last()
LayoutLine(const EditModel &model, Sci::Line line, Surface *surface, const ViewStyle &vstyle, LineLayout *ll, int width)
LayoutUI()
LenChar(Sci::Position pos)
Length()
Length(int styleBase)
Length()
Length() const { return cb.Length()
Length()
Length(Sci::Line line)
Length()
Length() const { return words.size()
Length()
LengthCurrent()
LengthDocument()
LengthOfGSD(GtkSelectionData *sd) { return gtk_selection_data_get_length(sd)
LengthWithTerminator()
LengthWord(const char *word, char otherSeparator)
LevelAt(Sci_Position line)
LevelAt(lua_State *L)
LevelAt(int line)
LevelNumber(int level)
Levels()
Lex(Sci_PositionU startPos, Sci_Position lengthDoc, int initStyle, IDocument *pAccess)
LexAccessor(IDocument *pAccess_)
LexInterface(Document *pdoc_) : pdoc(pdoc_), instance(0), performingStyle(false)
LexState(Document *pdoc_) : LexInterface(pdoc_)
LexerBase()
LexerChanged()
LexerFactoryFunction(*LexerFactoryFunction)()
LexerFunction(*LexerFunction)
LexerLibrary(const char *moduleName_)
LexerManager()
LexerSimple(const LexerModule *module_) : module(module_)
Limits()
LimitsForRectangularElseMain()
Line(lua_State *L)
LineAnnotation()
LineArea(int line)
LineEnd(Sci_Position line)
LineEndPosition(Sci::Position position)
LineEndString(int eolMode)
LineEndTypesSupported()
LineEndWrapPosition(Sci::Position position)
LineFromHandle(int markerHandle)
LineFromLocation(Point pt)
LineFromPosition(Sci::Position pos)
LineFromPosition(Sci::Position pos) const { return lv.LineFromPosition(pos)
LineFromPosition(Sci_Position pos)
LineLastVisible(int line)
LineLayout(int maxLineLength_)
LineLayoutCache()
LineLength(size_t start)
LineLevels()
LineMarker()
LineMarker(const LineMarker &)
LineMarkers() : handleCurrent(0)
LineNumber()
LineRange(Sci::Line line)
LineRange(int lineStart_, int lineEnd_) : lineStart(lineStart_), lineEnd(lineEnd_)
LineReverse()
LineSelection(Sci::Position lineCurrentPos_, Sci::Position lineAnchorPos_, bool wholeLine)
LineStart(Sci_Position line)
LineStart(Sci::Line line)
LineStart(Sci_Position line)
LineStart(int line)
LineState()
LineState(lua_State *L)
LineTabstops()
LineTo(int x_, int y_)
LineToItem()
LineTranspose()
LineVector() : starts(256), perLine(0)
Lines()
Lines(Sci::Line line)
Lines()
LinesAddedOrRemoved(Sci::Line lineOfPos, Sci::Line linesAdded)
LinesBreak(GUI::ScintillaWindow *pSci)
LinesDisplayed()
LinesFormFromTextForm(const char *textForm)
LinesFromString(const std::string &s)
LinesInDoc()
LinesJoin()
LinesOnScreen()
LinesOverlap()
LinesSplit(int pixelWidth)
LinesToScroll()
LinesTotal()
List(FilePathSet &directories, FilePathSet &files)
ListBox()
ListBoxImpl()
ListBoxX() : widCached(0), frame(0), list(0), scroller(0), pixhash(NULL), pixbuf_renderer(0)
ListBoxX() : lineHeight(10), fontCopy(0), technology(0), lb(0), unicodeMode(false)
ListBoxX_ClassName("ListBoxX")
ListBoxX_Register()
ListBoxX_Unregister()
ListFromString(const GUI::gui_string &args)
ListWidget(QWidget *parent)
LoWord(uptr_t l)
Load(const char *modulePath)
Load(const char *path)
Load(const char *modulePath)
Load(const char *)
Load(const char *filename)
Load(const char *)
LoadD2D()
LoadSessionDialog()
LoadSessionFile(const GUI::gui_char *sessionName)
LocaliseControl(HWND w)
LocaliseDialog(HWND wDialog)
LocaliseMenu(HMENU hmenu)
LocaliseMenus()
LocaliseMessage(const char *s, const GUI::gui_char *param0, const GUI::gui_char *param1, const GUI::gui_char *param2)
Localization() : PropSetFile(true), read(false)
LocationFromPosition(Sci::Position pos, PointEnd pe)
LocationFromPosition(SelectionPosition pos, PointEnd pe)
Lock(Mutex *mute_) : mute(mute_)
Lock() { ::EnterCriticalSection(&cs)
LogPixelsY()
LongFromTwoShorts(short a,short b)
Lookup(ARG_KEY key, VALUE& rValue)
LowShortFromLong(long x)
LowerCaseAZ(std::string &s)
LowerCaseAZChar(char c)
Lowercase(GUI::gui_string &s)
LuaExtension()
LuaPanicFunction(lua_State *L)
Main()
MainAnchor()
MainCaret()
MainForAll(GtkContainer *container, gboolean include_internals, GtkCallback callback, gpointer callback_data)
MainHWND()
MaintainIndentation(char ch)
MakeAlias(Font &fontOrigin)
MakeLongPath(const GUI::gui_char* shortPath, GUI::gui_string &longPath)
MakeLowerCase(int ch)
MakePipe(const char *pipeName)
MakeUpperCase(int ch)
MakeUpperCase(char ch)
Map(GtkWidget *widget)
MapImeIndicators(PangoAttrList *attrs, const char *u8Str)
MapImeIndicators(QInputMethodEvent *event)
MapImeIndicators(std::vector<BYTE> inputStyle)
MapThis()
MapWidget(GtkWidget *widget)
MarginClearAll()
MarginClick(int position, int modifiers)
MarginFromLocation(Point pt)
MarginSetStyle(Sci::Line line, int style)
MarginSetStyles(Sci::Line line, const unsigned char *styles)
MarginSetText(Sci::Line line, const char *text)
MarginStyle(int style_, int width_, int mask_)
MarginStyledText(Sci::Line line)
MarginView()
Margins()
MarkAll(MarkPurpose purpose)
MarkAllCmd()
MarkIncremental()
MarkValue(Sci::Line line)
MarkValue()
MarkerHandleNumber(int handle_, int number_) : handle(handle_), number(number_)
MarkerHandleSet()
MarkerNext(Sci::Line lineStart, int mask)
Markers()
Match(Sci_Position pos, const char *s)
Match(char ch0)
Match(char ch0, char ch1)
Match(const char *s)
Match(lua_State *L)
Match(int pos, const char *s)
MatchFlags(const Document *doc, Sci::Position startPos, Sci::Position endPos)
MatchIgnoreCase(const char *s)
MatchKeyCode(long parsedKeyCode, int keyval, int modifiers)
MatchMarker()
MatchOnLines(const Document *doc, const Regex &regexp, const RESearchRange &resr, RESearch &search)
MatchWild(const char *pattern, size_t lenPattern, const char *fileName, bool caseSensitive)
Matches(const GUI::gui_char *pattern)
MatchesWordOptions(bool word, bool wordStart, Sci::Position pos, Sci::Position length)
MaxScrollPos()
MaxTrackSize()
Maximum(int a, int b)
MeasureLength(const char *s)
MeasureStringWidth()
MeasureWidths(Font &font_, const char *s, int len, XYPOSITION *positions)
Menu() : mid(0)
MenuAction(guint action)
MenuAction(guint \/* action *\/)
MenuCommand(int cmdID, int source)
MenuItemFromAction(int itemID)
MenuPositionFunc(GtkMenu *, gint *x, gint *y, gboolean *, gpointer userData)
MenuSignal(GtkMenuItem *menuitem, SciTEGTK *scitew)
MenuSignal(GtkMenuItem *menuItem, Strip *pStrip)
Merge(const SparseState<T> &other, int ignoreAfter)
MergeMarkers(Sci::Line line)
MinClientWidth()
MinTrackSize()
MinimizeToTray()
MinimizeVirtualSpace()
Minimum(int a, int b)
ModelessHandler(MSG *pmsg)
ModifiedAt(Sci::Position pos)
ModifiedTime()
ModifierFlags(bool shift, bool ctrl, bool alt, bool meta, bool super)
ModifyScrollBars(Sci::Line nMax, Sci::Line nPage)
MonitorRectangleForWidget(GtkWidget *wid)
More()
More(lua_State *L)
Motion(GtkWidget *widget, GdkEventMotion *event)
Mouse(GdkEventButton *event)
MouseButtonBounce()
MouseClick(Point pt)
MouseInClose(GUI::Point pt)
MouseLeave()
MousePress(GtkWidget * \/*widget*\/, GdkEventButton *event, SciTEGTK *scitew)
MouseRelease(GtkWidget *widget, GdkEventButton *event)
Move(XYPOSITION xDelta, XYPOSITION yDelta)
Move(int delta)
MoveBack()
MoveCaretInsideView(bool ensureVisible)
MoveExtends()
MoveForInsertDelete(bool insertion, Sci::Position startChange, Sci::Position length)
MoveImeCarets(int pos)
MoveImeCarets(int offset)
MoveImeCarets(Sci::Position offset)
MovePositionForDeletion(Sci::Position position, Sci::Position startDeletion, Sci::Position length)
MovePositionForInsertion(Sci::Position position, Sci::Position startInsertion, Sci::Position length)
MovePositionOutsideChar(Sci::Position pos, Sci::Position moveDir, bool checkLineEnd)
MovePositionOutsideChar(SelectionPosition pos, Sci::Position moveDir, bool checkLineEnd)
MovePositionSoVisible(Sci::Position pos, int moveDir)
MovePositionSoVisible(SelectionPosition pos, int moveDir)
MovePositionTo(Sci::Position newPos, Selection::selTypes selt, bool ensureVisible)
MovePositionTo(SelectionPosition newPos, Selection::selTypes selt, bool ensureVisible)
MovePositions(bool insertion, Sci::Position startChange, Sci::Position length)
MoveSelectedLines(int lineDelta)
MoveSelectedLinesDown()
MoveSelectedLinesUp()
MoveSplit(GUI::Point ptNewDrag)
MoveTabLeft()
MoveTabRight()
MoveTo(int x_, int y_)
MoveToStackTop(int index)
MovedCaret(SelectionPosition newPos, SelectionPosition previousPos, bool ensureVisible)
MultiByteAccess()
MultiByteLenFromIconv(const Converter &conv, const char *s, size_t len)
MultipleSelectAdd(AddNumber addNumber)
MultipleStyles(Sci::Line line)
MultiplexExtension(): host(nullptr)
NS_ENUM(NSInteger, NotificationType)
NS_OPTIONS(NSUInteger, IBDisplay)
Name()
NaturalDirection(unsigned int iMessage)
NcHitTest(WPARAM wParam, LPARAM lParam)
Need(workItems items_, Sci::Position pos)
NeedShown(Sci::Position pos, Sci::Position len)
NeedWrapping(Sci::Line docLineStart, Sci::Line docLineEnd)
Needed()
NeedsDrawing(Sci::Line line)
NeedsOnClose()
NeedsSave(int delayBeforeSave)
NeedsWrap()
New()
NewAssoc()
NewLine()
NewLineInOutput()
NewNode(Node* pPrev, Node* pNext)
NewerThan(const PositionCacheEntry &other)
Next()
Next(lua_State *L)
Next()
Next(bool markAll, bool invertDirection)
Next(bool select)
NextByte()
NextCharacter(Sci::Position &pos, int moveDir)
NextField(const char *s)
NextInStack()
NextIncremental()
NextIncremental(ChangingSource source)
NextLine()
NextPosition(Sci::Position pos, int moveDir)
NextRandom()
NextTab(Sci::Position pos, Sci::Position tabSize)
NextTabPos(int x)
NextTabstopPos(Sci::Line line, XYPOSITION x, XYPOSITION tabWidth)
NextWordEnd(Sci::Position pos, int delta)
NextWordStart(Sci::Position pos, int delta)
NoMatchColour(HDC hdc)
NormaliseSplit(int splitPos)
NormalizePath()
NotificationToStripCommand(int notification)
Notify(GtkWidget *, gint, SCNotification *nt)
Notify(SCNotification *notification)
NotifyCaretMove()
NotifyChange()
NotifyChar(int ch)
NotifyClick(Point pt, bool shift, bool ctrl, bool alt)
NotifyClick(Point pt, int modifiers)
NotifyDeleted(Document *, void *)
NotifyDoubleClick(Point pt, bool shift, bool ctrl, bool alt)
NotifyDoubleClick(Point pt, int modifiers)
NotifyDwelling(Point pt, bool state)
NotifyErrorOccurred(Document *, void *, int status)
NotifyFocus(bool focus)
NotifyHotSpotClicked(Sci::Position position, bool shift, bool ctrl, bool alt)
NotifyHotSpotClicked(Sci::Position position, int modifiers)
NotifyHotSpotDoubleClicked(Sci::Position position, bool shift, bool ctrl, bool alt)
NotifyHotSpotDoubleClicked(Sci::Position position, int modifiers)
NotifyHotSpotReleaseClick(Sci::Position position, bool shift, bool ctrl, bool alt)
NotifyHotSpotReleaseClick(Sci::Position position, int modifiers)
NotifyIndicatorClick(bool click, Sci::Position position, bool shift, bool ctrl, bool alt)
NotifyIndicatorClick(bool click, Sci::Position position, int modifiers)
NotifyKey(int key, int modifiers)
NotifyLexerChanged(Document *, void *)
NotifyMacroRecord(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
NotifyMarginClick(Point pt, bool shift, bool ctrl, bool alt)
NotifyMarginClick(Point pt, int modifiers)
NotifyMarginRightClick(Point pt, int modifiers)
NotifyModified(Document *, DocModification mh, void *)
NotifyModified(DocModification mh)
NotifyModified(Document *, DocModification mh, void *)
NotifyModifyAttempt(Document *, void *)
NotifyModifyAttempt()
NotifyModifyAttempt(Document *, void *)
NotifyNeedShown(Sci::Position pos, Sci::Position len)
NotifyPainted()
NotifyParent(SCNotification scn)
NotifyReadOnly()
NotifySavePoint(Document *, void *, bool atSavePoint)
NotifySavePoint(bool atSavePoint)
NotifySavePoint(Document *, void *, bool atSavePoint)
NotifySavePoint(bool isSavePoint)
NotifySignal(GtkWidget *, gint \/*wParam*\/, SCNotification *notification, SciTEGTK *scitew)
NotifyStyleNeeded(Document *, void *, Sci::Position endPos)
NotifyStyleNeeded(Document *, void *, Sci::Position endStyleNeeded)
NotifyStyleToNeeded(Sci::Position endStyleNeeded)
NotifyURIDropped(const char *list)
NotifyUpdateUI()
NotifyZoom()
NumberLines(const char *text)
OmitXidContinue(int character)
OmitXidStart(int character)
OnBeforeSave(const char *)
OnBeforeSave(const char *filename)
OnChar(char)
OnChar(char ch)
OnChar(char c)
OnChar(char)
OnClick(int)
OnClick(int modifiers)
OnClick(int)
OnClose(const char *path)
OnClose(const char *)
OnClose(const char *filename)
OnClose(const char *path)
OnDoubleClick()
OnDwellStart(int, const char *)
OnDwellStart(int pos, const char *word)
OnExecute(const char *cmd)
OnExecute(const char *)
OnExecute(const char *s)
OnExecute(const char *cmd)
OnIdle()
OnKey(int, int)
OnKey(int keyval, int modifiers)
OnMacro(const char *command, const char *params)
OnMacro(const char *, const char *)
OnMacro(const char *p, const char *q)
OnMacro(const char *command, const char *params)
OnMarginClick()
OnOpen(const char *path)
OnOpen(const char *)
OnOpen(const char *filename)
OnOpen(const char *path)
OnSave(const char *path)
OnSave(const char *)
OnSave(const char *filename)
OnSave(const char *path)
OnSavePointLeft()
OnSavePointReached()
OnStyle(unsigned int, int, int, StyleWriter *)
OnStyle(unsigned int startPos, int lengthDoc, int initStyle, StyleWriter *styler)
OnStyle(unsigned int p, int q, int r, StyleWriter *s)
OnStyle(unsigned int, int, int, StyleWriter *)
OnSwitchFile(const char *path)
OnSwitchFile(const char *)
OnSwitchFile(const char *filename)
OnSwitchFile(const char *path)
OnTimer()
OnUpdateUI()
OnUserListSelection(int, const char *)
OnUserListSelection(int listType, const char *selection)
OnUserStrip(int \/* control *\/, int \/* change *\/)
OnUserStrip(int control, int change)
OneToOne()
Open(const char *charSetDestination, const char *charSetSource, bool transliterations)
Open(const GUI::gui_char *mode)
Open(const FilePath &file, OpenFlags of)
OpenClipboardRetry(HWND hwnd)
OpenCurrentFile(long long fileSize, bool suppressMessage, bool asynchronous)
OpenDialog(const FilePath &directory, const char *filter)
OpenDialog(const FilePath &directory, const GUI::gui_char *filesFilter)
OpenFilesFromStdin()
OpenFromStdin(bool UseOutputPane)
OpenHandle(const char *fullDestination, const char *charSetSource)
OpenPipe(const char *pipeName)
OpenProperties(int propsFile)
OpenSelected()
OpenUriList(const char *list)
OpenUriList(const char *)
Option()
Option(plcob pb_, std::string description_="")
Option(plcoi pi_, std::string description_)
Option(plcos ps_, std::string description_)
Original()
OtherIDOfCharacter(int character)
OutputAppendEncodedStringSynchronised(const GUI::gui_string &s, int codePageDocument)
OutputAppendString(const char *s, int len)
OutputAppendStringSynchronised(const char *s, int len)
Overlaps(Range other)
OverridesTextFore()
OwnPrimarySelection()
PFNIsCommentLeader(*PFNIsCommentLeader)(Accessor &styler, Sci_Position pos, Sci_Position len)
PFont(Font &f)
PMatch(CharacterIndexer &ci, Sci::Position lp, Sci::Position endp, char *ap)
PRectFromQRect(QRect qr)
PRectangle(XYPOSITION left_=0, XYPOSITION top_=0, XYPOSITION right_=0, XYPOSITION bottom_ = 0)
PWidget(WindowID wid)
PWidget(Window &w)
PWidget(WindowID wid)
PWidget(GUI::Window &w)
PWindow(const Window &w)
PackInto(GtkBox *box, gboolean expand)
PageMove(int direction, Selection::selTypes selt, bool stuttered)
Paint(Surface *surfaceWindow, PRectangle rcArea)
Paint(HDC hDC)
Paint(HDC hDC, GUI::Rectangle)
Paint(HDC hDC)
PaintCT(Surface *surfaceWindow)
PaintContains(PRectangle rc)
PaintContainsMargin()
PaintContents(Surface *surfaceWindow, bool draw)
PaintSelMargin(Surface *surfaceWindow, PRectangle &rc)
PaneButtonRelease(GtkWidget *, GdkEvent *, SciTEGTK *scitew)
PanePositionChanged(GObject *, GParamSpec *, SciTEGTK *scitew)
PangoLayoutFromStyleDefinition(GtkPrintContext *context, const StyleDefinition &sd)
ParaDown(Sci::Position pos)
ParaUp(Sci::Position pos)
ParaUpOrDown(int direction, Selection::selTypes selt)
ParamCancelCmd()
ParamCmd()
ParamGrab()
ParamResponse(int responseID)
ParametersDialog(bool modal)
ParametersDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
ParametersMessage(HWND hDlg, UINT message, WPARAM wParam)
ParametersOpen()
ParseIndicatorDefinition(const char *definition)
ParseKeyCode(const char *mnemonic)
ParseStyleDefinition(const char *definition)
PartialPaint(const PRectangle &rect)
PartitionFromPosition(int pos)
Partitioning(int growSize)
Partitions()
Paste()
PasteFromMode(QClipboard::Mode clipboardMode_)
PasteRectangular(SelectionPosition pos, const char *ptr, Sci::Position len)
PasteText(AtkEditableText *text, gint position)
PasteText(int charPosition)
PathRoundRectangle(cairo_t *context, double left, double top, double width, double height, int radius)
PenColour(ColourDesired fore)
Perform(const char *actionList)
PerformDeferredTasks()
PerformGrep()
PerformInsertAbbreviation()
PerformOnNewThread(Worker *pWorker)
PerformOne(char *action)
PerformRedoStep()
PerformUndoStep()
PixelAt(int x, int y, ColourDesired &colour, bool &transparent)
PixelGridAlign(const PRectangle &rc)
Pixels()
Platform()
Platform(const Platform &)
Platform_Finalise()
Platform_Finalise(bool fromDllMain)
Platform_Initialise()
Platform_Initialise(void *hInstance)
Point(XYPOSITION x_=0, XYPOSITION y_=0) : x(x_), y(y_)
Point(int x_=0, int y_=0) : x(x_), y(y_)
PointDocument(Point pt) : x(pt.x), y(pt.y)
PointDocument(double x_ = 0, double y_ = 0) : x(x_), y(y_)
PointFromLong(LPARAM lPoint)
PointFromPOINT(POINT pt)
PointFromPosition(int posInLine, int lineHeight, PointEnd pe)
PointFromQPoint(QPoint qp)
PointInSelMargin(Point pt)
PointInSelection(Point pt)
PointIsHotspot(Point pt)
PointMainCaret()
PointOfCursor()
PointPointer(GUI::Point *pt)
Pointer()
PointerFromWindow(HWND hWnd)
PollTool(SciTEGTK *scitew)
Polygon(Point *pts, int npts, ColourDesired fore, ColourDesired back)
PopStack()
PopUpCB(GtkMenuItem *menuItem, ScintillaGTK *sciThis)
PopUpCmd(GtkMenuItem *menuItem, SciTEGTK *scitew)
Pos()
PosRoundUp()
Position()
Position(lua_State *L)
PositionAfter(Sci::Position pos)
PositionAfterArea(PRectangle rcArea)
PositionAfterMaxStyling(Sci::Position posMax, bool scrolling)
PositionBefore(Sci::Position pos)
PositionCache()
PositionCacheEntry()
PositionCacheEntry(const PositionCacheEntry &other)
PositionFromLineX(Sci::Line lineDoc, int x)
PositionFromLocation(Point pt, bool canReturnInvalid, bool charPosition)
PositionFromPartition(int partition)
PositionInSelection(Sci::Position pos)
PositionIsHotspot(Sci::Position position)
PositionOfElement(int element)
PositionUpOrDown(SelectionPosition spStart, int direction, int lastX)
PostCallback(void *ptr)
PostOnMainThread(int cmd, Worker *pWorker)
PreEditString(GtkIMContext *im_context)
PreOpenCheck(const GUI::gui_char *)
PreOpenCheck(const GUI::gui_char *arg)
PreeditChanged(GtkIMContext *, ScintillaGTK *sciThis)
PreeditChangedInlineThis()
PreeditChangedWindowedThis()
PrepareBufferForSave(const FilePath &saveName)
Present()
Press(GtkWidget *widget, GdkEventButton *event)
PressCT(GtkWidget *widget, GdkEventButton *event, ScintillaGTK *sciThis)
PressThis(GdkEventButton *event)
Prev()
PrevInStack()
Previous(lua_State *L)
PrimaryStyleFromStyle(int style)
Print(bool)
PrintParameters()
PrintSetup()
PrivateCall(int, void *)
PrivateCall(int operation, void *pointer)
ProcessArgs(const GUI::gui_char *cmdLine)
ProcessCommandLine(GUI::gui_string &args, int phase)
ProcessExecute()
ProgressMade()
PropGet(const char *key)
PropGetExpanded(const char *key, char *result)
PropGetInt(const char *key, int defaultValue)
PropSet(const char *key, const char *val)
PropSetFile(bool lowerKeys_) : lowerKeys(lowerKeys_), superPS(0)
PropSetFile(const PropSetFile &copy) : lowerKeys(copy.lowerKeys), props(copy.props), superPS(copy.superPS)
PropSetSimple()
Property(const char *key)
PropertyFromDirector(const char *arg)
PropertyNames()
PropertySet(const char *key, const char *val)
PropertySet(T *base, const char *name, const char *val)
PropertyToDirector(const char *arg)
PropertyType(const char *)
PropertyType(const char *name)
ProtectionActive()
PublishGlobalBufferData()
PushMethod(lua_State *L, lua_CFunction fn, const char *name)
QColorFromCA(ColourDesired ca)
QRectFFromPRect(PRectangle pr)
QRectFromPRect(PRectangle pr)
QuartzFont( const char* name, size_t length, float size, int weight, bool italic )
QuartzTextLayout( CGContextRef context )
QuartzTextStyle()
QuartzTextStyle(const QuartzTextStyle &other)
QueryInterface(REFIID riid, PVOID *ppv)
QueueIdleWork(WorkNeeded::workItems items, Sci::Position upTo)
QuitProgram()
QuitSignal(GtkWidget *, GdkEventAny *, SciTEGTK *scitew)
RECTFromRectangle(GUI::Rectangle r)
RESearch(CharClassify *charClassTable)
RESearchRange(const Document *doc_, Sci::Position minPos, Sci::Position maxPos) : doc(doc_)
RGBAImage(const XPM &xpm)
RGBAImage(int width_, int height_, float scale_, const unsigned char *pixels_)
RGBAImageSet() : height(-1), width(-1)
RandomColour()
Range(Sci::Position start_, Sci::Position end_)
Range(Sci::Position pos=0)
Range(size_t r)
Range(Pane p, int start, int end)
RangeAddDelta(int start, int end, int delta)
RangeContainsProtected(Sci::Position start, Sci::Position end)
RangeDisplayLine(Surface *surface, const EditModel &model, Sci::Line lineVisible, const ViewStyle &vs)
RangeDisplayLine(Sci::Line lineVisible)
RangeIsAllWhitespace(int start, int end)
RangeMain()
RangePointer(Sci::Position position, Sci::Position rangeLength)
RangePointer(Sci::Position position, Sci::Position rangeLength) { return cb.RangePointer(position, rangeLength)
RangePointer(int position, int rangeLength)
RangeText(Sci::Position start, Sci::Position end)
RangesCopy()
ReAllocate(int newSize)
Read()
ReadAPI(const std::string &fileNameForExtension)
ReadAbbrevPropFile()
ReadCharacter()
ReadDirectoryPropFile()
ReadEmbeddedProperties()
ReadEnvironment()
ReadFontProperties()
ReadGlobalPropFile()
ReadLocalPropFile()
ReadLocalization()
ReadNum(const char *&t)
ReadProperties()
ReadPropertiesInitial()
Realise(Surface &surface, int zoomLevel, int technology, const FontSpecification &fs)
Realize(GtkWidget *widget)
RealizeText(GtkWidget *widget, void*)
RealizeThis(GtkWidget *widget)
RealizeVirtualSpace(Sci::Position position, Sci::Position virtualSpace)
RealizeVirtualSpace(const SelectionPosition &position)
ReapChild(GPid pid, gint status, gpointer user_data)
ReceivedDrop(GtkSelectionData *selection_data)
ReceivedSelection(GtkSelectionData *selection_data)
ReceiverPipeSignal(GIOChannel *source, GIOCondition condition, void *data)
RecentFile()
ReconfigureScrollBars()
RecordMacroCommand(const SCNotification *notification)
RectFromMonitor(HMONITOR hMonitor)
RectFromPRectangle(PRectangle prc)
Rectangle(int left_=0, int top_=0, int right_=0, int bottom_ = 0)
RectangleDraw(PRectangle rc, ColourDesired fore, ColourDesired back)
RectangleFromRange(Range r, int overlap)
Rectangular()
Redo()
Redraw()
RedrawMenu()
RedrawRect(PRectangle rc)
RedrawSelMargin(Sci::Line line, bool allAfter)
Refresh(Surface &surface, int tabInChars)
RefreshPixMaps(Surface *surfaceWindow, WindowID wid, const ViewStyle &vsDraw)
RefreshPixMaps(Surface *surfaceWindow)
RefreshPixMaps(Surface *surfaceWindow, WindowID wid, const ViewStyle &vsDraw)
RefreshStyleData()
RegexError() : std::runtime_error("regex failure")
Register(HINSTANCE hInstance_)
RegisterExtension(Extension &ext_)
RegisterImage(int type, const char *xpm_data)
RegisterImage(int type, const char *xpmData)
RegisterImage(int type, const char *xpm_data)
RegisterQPixmapImage(int type, const QPixmap& pm)
RegisterRGBA(int type, RGBAImage *image)
RegisterRGBAImage(int type, int width, int height, const unsigned char *pixelsImage)
Release()
Release(ULONG) ScintillaWin::Release()
ReleaseAllExtendedStyles()
ReleaseId(FontID fid_)
ReloadProperties()
Remove()
Remove(Pane p, int start, int end)
Remove(T &s, const T &sFind)
RemoveAll()
RemoveAllTabs()
RemoveAt(T_POSITION position)
RemoveAt(int nIndex, int nCount = 1)
RemoveBuffer(int)
RemoveBuffer(int index)
RemoveCurrent()
RemoveDuplicates()
RemoveEscSeq(std::string &s)
RemoveFileFromStack(const FilePath &file)
RemoveFindMarks()
RemoveHandle(int handle)
RemoveHead()
RemoveInvisible(int index)
RemoveKey(ARG_KEY key)
RemoveLine(Sci::Line line)
RemoveNumber(int markerNum, bool all)
RemovePartition(int partition)
RemoveRun(int run)
RemoveRunIfEmpty(int run)
RemoveRunIfSameAsPrevious(int run)
RemoveSelection(AtkText *text, gint selection_num)
RemoveSelection(gint selection_num)
RemoveSendPipes()
RemoveStringOnce(std::string &s, const char *marker)
RemoveTail()
RemoveText(int position)
RemoveToolsMenu()
RemoveWatcher(DocWatcher *watcher, void *userData)
Replace()
ReplaceAll(bool inSelection)
ReplaceAllCmd()
ReplaceCmd()
ReplaceDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
ReplaceInBuffers()
ReplaceInSelectionCmd()
ReplaceMessage(HWND hDlg, UINT message, WPARAM wParam)
ReplaceOnce(bool showWarnings)
ReplaceStrip()
ReplaceTarget(bool replacePatterns, const char *text, Sci::Position length)
Representation(const char *value="") : stringRep(value)
RepresentationFromCharacter(const char *charBytes, size_t len)
Reset()
ResetClock()
ResetDefaultStyle()
ResetExecution()
ResetLineEnds()
Resize(int width, int height)
Resize(int maxLineLength_)
Resize(int rows_, int columns_)
ResizeToCursor()
ResourcesRelease(bool fromDllMain)
ResponseButton(const GUI::gui_string &text, int responseID)
RestoreBracesHighlight(Range rangeLine, const Sci::Position braces[], bool ignoreStyle)
RestoreFromSession(const Session &session)
RestoreFromTray()
RestorePosition()
RestoreRecentMenu()
RestoreSession()
RestoreState(const Buffer &buffer, bool restoreBookmarks)
RestrictDLLPath()
RetrieveLineLayout(Sci::Line lineNumber, const EditModel &model)
Revert()
RightButtonDownWithModifiers(Point pt, unsigned int, int modifiers)
RightButtonDownWithModifiers(Point pt, unsigned int curTime, int modifiers)
RoomFor(int insertionLength)
RootLength()
RotateMain()
RoundFloat(float f)
RoundXYPosition(XYPOSITION xyPos)
RoundedRectangle(PRectangle rc, ColourDesired fore, ColourDesired back)
Run(int argc, char *argv[])
Run(const GUI::gui_char *cmdLine)
RunFromPosition(int position)
RunStyles()
Runs()
SPositionFromLineX(Surface *surface, const EditModel &model, Sci::Line lineDoc, int x, const ViewStyle &vs)
SPositionFromLineX(Sci::Line lineDoc, int x)
SPositionFromLocation(Surface *surface, const EditModel &model, PointDocument pt, bool canReturnInvalid, bool charPosition, bool virtualSpace, const ViewStyle &vs)
SPositionFromLocation(Point pt, bool canReturnInvalid, bool charPosition, bool virtualSpace)
SafeGetCharAt(Sci_Position position, char chDefault=' ')
SafeGetCharAt(int position, char chDefault=' ')
SafeSegment(const char *text, int length, int lengthSegment)
SameAs(const FontParameters &fp)
SameNameAs(const FilePath &other)
SameNameAs(const GUI::gui_char *other)
Save(const char *name)
Save(SaveFlags sf)
SaveACopy()
SaveAllBuffers(bool alwaysYes)
SaveAs(const GUI::gui_char *file, bool fixCase)
SaveAsDialog()
SaveAsHTML()
SaveAsPDF()
SaveAsRTF()
SaveAsTEX()
SaveAsXML()
SaveAsXXX(FileFormat fmt, const char *title, const char *ext)
SaveBuffer(const FilePath &saveName, SaveFlags sf)
SaveIfNotOpen(const FilePath &destFile, bool fixCase)
SaveIfUnsure(bool forceQuestion, SaveFlags sf)
SaveIfUnsureAll()
SaveIfUnsureForBuilt()
SaveName(const char *ext)
SaveSessionDialog()
SaveSessionFile(const GUI::gui_char *sessionName)
SaveTitledBuffers()
SaveToHTML(const FilePath &saveName)
SaveToPDF(const FilePath &saveName)
SaveToRTF(const FilePath &saveName, int start, int end)
SaveToStreamRTF(std::ostream &os, int start, int end)
SaveToTEX(const FilePath &saveName)
SaveToXML(const FilePath &saveName)
SavingInBackground()
SciFnDirect(*SciFnDirect)(sptr_t ptr, unsigned int iMessage, uptr_t wParam, sptr_t lParam)
SciMessageFromEM(unsigned int iMessage)
SciNotify(GtkWidget *widget, gint code, SCNotification *nt, gpointer data)
SciNotifyFunc(*SciNotifyFunc) (intptr_t windowid, unsigned int iMessage, uintptr_t wParam, uintptr_t lParam)
SciTEBase(Extension *ext) : apis(true), pwFocussed(&wEditor), extender(ext)
SciTEGTK(Extension *ext) : SciTEBase(ext)
SciTEWin(Extension *ext) : SciTEBase(ext)
ScintillaBase()
ScintillaDocument(QObject *parent, void *pdoc_)
ScintillaEditBase(QWidget *parent)
ScintillaFailure(sptr_t status_) : status(status_)
ScintillaGTK(_ScintillaObject *sci_)
ScintillaGTKAccessible(GtkAccessible *accessible_, GtkWidget *widget_)
ScintillaQt(QAbstractScrollArea *parent)
ScintillaRectangularMime() : QMacPasteboardMime(MIME_ALL)
ScintillaWin(HWND hwnd)
ScintillaWindow() : fn(0), ptr(0), status()
Scintilla_LinkLexers()
Scintilla_RegisterClasses(void *hInstance)
Scintilla_ReleaseResources()
ScrollEditorIfNeeded()
ScrollEvent(GtkWidget *widget, GdkEventScroll *event)
ScrollHSignal(GtkAdjustment *adj, ScintillaGTK *sciThis)
ScrollMessage(WPARAM wParam)
ScrollRange(SelectionRange range)
ScrollSignal(GtkAdjustment *adj, ScintillaGTK *sciThis)
ScrollText(Sci::Line linesToMove)
ScrollText(Sci::Line \/* linesToMove *\/)
ScrollTo(Sci::Line line, bool moveThumb)
SearchAnchor()
SearchFlags(bool regularExpressions)
SearchInTarget(const char *text, Sci::Position length)
SearchOtherInstance(HWND hWnd, LPARAM lParam)
SearchStrip()
SearchStripBase() : pSearcher(0), hbrNoMatch(0)
SearchUI() : pSearcher(0)
Searcher()
Select(int n)
Select(const char *word)
Select(int n)
SelectAll()
SelectedRange(int position_= INVALID_POSITION, int anchor_= INVALID_POSITION)
Selection() : mainRange(0), moveExtends(false), tentativeMain(false), selType(selStream)
SelectionAdd(AddSelection add)
SelectionBackground(const ViewStyle &vsDraw, bool main, bool primarySelection)
SelectionBackgroundDrawn()
SelectionChanged()
SelectionClear(GtkWidget *widget, GdkEventSelection *selection_event)
SelectionContainsProtected()
SelectionEmpty()
SelectionEnd()
SelectionFilename()
SelectionIntoFind(bool stripEol \/*=true*\/)
SelectionIntoProperties()
SelectionOfGSD(GtkSelectionData *sd) { return gtk_selection_data_get_selection(sd)
SelectionPosition(Sci::Position position_=INVALID_POSITION, Sci::Position virtualSpace_=0) : position(position_), virtualSpace(virtualSpace_)
SelectionRange() : caret(), anchor()
SelectionRange(Sci::Position caret_, Sci::Position anchor_) : caret(caret_), anchor(anchor_)
SelectionRange(SelectionPosition caret_, SelectionPosition anchor_) : caret(caret_), anchor(anchor_)
SelectionRange(Sci::Position single) : caret(single), anchor(single)
SelectionRange(SelectionPosition single) : caret(single), anchor(single)
SelectionSegment() : start(), end()
SelectionSegment(SelectionPosition a, SelectionPosition b)
SelectionStart()
SelectionText() : rectangular(false), lineCopy(false), codePage(0), characterSet(0)
SelectionToHangul()
SelectionWord(bool stripEol \/*=true*\/)
Send(unsigned int msg, uptr_t wParam, sptr_t lParam)
Send(Pane p, unsigned int msg, uptr_t wParam, sptr_t lParam)
Send(unsigned int msg, uptr_t wParam, sptr_t lParam)
SendCommands(const char *cmdLine)
SendDirector(const char *verb, const char *arg = 0)
SendDirector(const char *verb, sptr_t arg)
SendFileName(int sendPipe, const char* filename)
SendOneProperty(const char *kind, const char *key, const char *val)
SendPipeAvailable()
SendPipeCommand(const char *pipeCommand)
SendProperty(const char *prop)
SendProperty(const char *)
SendProperty(const char *prop)
SendScintilla(WindowID w, unsigned int msg, unsigned long wParam, long lParam)
SendScintillaPointer(WindowID w, unsigned int msg, unsigned long wParam, void *lParam)
Sensitive()
SeqEnd(int ch)
Set(const char *val)
Set(long lcol)
Set(unsigned int red, unsigned int green, unsigned int blue)
Set(T *base, const char *val)
Set(const char *key, const char *val, int lenKey, int lenVal)
Set(const char *keyVal)
Set(int position, T value)
Set(const char *s)
Set(LineLayout *ll_)
Set(int control, const char *value)
Set(FilePath const &directory, FilePath const &name)
Set(FilePath const &other)
Set(const GUI::gui_char *fileName_)
Set(const char *key, const char *val, ptrdiff_t lenKey, ptrdiff_t lenVal)
Set(const char *keyVal)
Set(const char *s)
Set(const std::vector<char> &data)
Set(int control, const char *value)
SetAboutMessage(GUI::ScintillaWindow &wsci, const char *appTitle)
SetAboutStyle(GUI::ScintillaWindow &wsci, int style, Colour fore)
SetAccessibility()
SetActive(bool active)
SetAdjustmentValue(GtkAdjustment *object, int value)
SetAnnotationHeights(Sci::Line start, Sci::Line end)
SetAnnotationVisible(int visible)
SetAt(ARG_KEY key, ARG_VALUE newValue)
SetAt(T_POSITION pos, ARG_TYPE newElement)
SetAt(int nIndex, ARG_TYPE newElement)
SetAverageCharWidth(int width)
SetAverageCharWidth(int \/*width*\/)
SetAverageCharWidth(int width)
SetBraceHighlight(Sci::Position pos0, Sci::Position pos1, int matchStyle)
SetBuffersMenu()
SetCairoColour(cairo_t *cr, long co)
SetCancelFlag(long value)
SetCandidateWindowPos()
SetCaretAsStart()
SetCaretOffset(AtkText *text, gint offset)
SetCaretOffset(int charOffset)
SetCaseFolder(CaseFolder *pcf_)
SetCaseSensitiveFilenames(bool caseSensitiveFilenames_)
SetChangeFunction(ChangeFunction cdfn_, void *user_)
SetCharClasses(const unsigned char *chars, cc newCharClass)
SetCharClasses(const unsigned char *chars, CharClassify::cc newCharClass)
SetCheck(int id, bool value)
SetClickNotified(bool notified)
SetClip(PRectangle rc)
SetClip(UINT uFormat)
SetCoalescableTimerSig(WINAPI *SetCoalescableTimerSig)
SetCodePage(int codePage_)
SetCodec(Font &font)
SetComboFromMemory(GUI::Window w, const ComboMemory &mem)
SetCompleted()
SetConverter(int characterSet_)
SetCtrlID(int identifier)
SetCurrent(int index)
SetCurrentIndicator(int indicator)
SetCurrentValue(int value)
SetCursor(Cursor curs)
SetDBCSCodePage(int dbcsCodePage_)
SetDBCSMode(int codePage)
SetDBCSMode(int codePage_)
SetDefaultCharClasses(bool includeWordClass)
SetDescription(const char *description)
SetDirectory(FilePath const &directory)
SetDocPointer(Document *document)
SetDocumentAt(int index, bool updateStack)
SetDoubleClickAction(CallBackAction action, void *data)
SetDragPosition(SelectionPosition newPos)
SetEmptySelection(Sci::Position currentPos_)
SetEmptySelection(SelectionPosition currentPos_)
SetEol()
SetErrorStatus(int status)
SetExecuting(bool state)
SetExpanded(Sci::Line lineDoc, bool isExpanded)
SetExtender(Extension *extender_)
SetExternal(GetLexerFactoryFunction fFactory, int index)
SetFileName(const FilePath &openName, bool fixCase)
SetFileProperties(PropSetFile &ps)
SetFileStackMenu()
SetFillUpChars(const char *fillUpChars_)
SetFilter(const std::string &sExcludes, const std::string &sIncludes)
SetFind(const char *sFind)
SetFindText(const char *sFind)
SetFlags(int attributes_)
SetFocus(GUI::ScintillaWindow &w)
SetFocusState(bool focusState)
SetFoldDisplayText(Sci::Line lineDoc, const char *text)
SetFoldExpanded(Sci::Line lineDoc, bool expanded)
SetFont(Font &font)
SetFont(Font &)
SetFont(Font &font)
SetFont(Font &font_)
SetFont(Font &font)
SetFontHandle(const GUI::Window &w, HFONT hfont)
SetForeBack(const ColourDesired &fore, const ColourDesired &back)
SetFromListText()
SetGrowSize(int growSize_)
SetHeight(Sci::Line lineDoc, int height)
SetHighlight(int start, int end)
SetHomeProperties()
SetHorizontalScrollPos()
SetHotSpotRange(Point *pt)
SetHoverIndicatorPoint(Point pt)
SetHoverIndicatorPosition(Sci::Position position)
SetID(FontID fid_)
SetID(WindowID wid_)
SetIcon()
SetIdentifiers(int style, const char *identifiers)
SetIdle(bool on)
SetIdle(bool)
SetIdle(bool on)
SetIdler(bool on)
SetImportMenu()
SetIncrementalBehaviour(int behaviour)
SetIndentSettings()
SetInteger(const char *key, int i)
SetItemText(int id, const GUI::gui_char *s)
SetItemTextU(int id, const std::string &s)
SetLanguageMenu()
SetLastXChosen()
SetLevel(Sci_Position line, int level)
SetLevel(Sci::Line line, int level, Sci::Line lines)
SetLevel(int level_)
SetLevel(int line, int level)
SetLevelAt(lua_State *L)
SetLexInterface(LexInterface *pLexInterface)
SetLexer(uptr_t wParam)
SetLexerLanguage(const char *languageName)
SetLexerModule(const LexerModule *lex)
SetLineEndTypes(int utf8LineEnds_)
SetLineEndTypesAllowed(int lineEndBitSet_)
SetLineIndentation(Sci::Line line, Sci::Position indent)
SetLineIndentation(int line, int indent)
SetLineNumberWidth()
SetLineStart(Sci::Line line, Sci::Position position)
SetLineStart(int line, int start)
SetLineState(Sci_Position line, int state)
SetLineState(Sci::Line line, int state)
SetLineState(lua_State *L)
SetLineState(int line, int state)
SetList(const char *listText, char separator, char typesep)
SetList(const char *list, char separator, char typesep)
SetList(const char *list)
SetList(const char *list, char separator, char typesep)
SetList(int control, const char *value)
SetLocalizer(ILocalize *localiser_)
SetLogFont(LOGFONTW &lf, const char *faceName, int characterSet, float size, int weight, bool italic, int extraFontFlag)
SetMain(size_t r)
SetMenuItem(int, int, int itemID, const char *text, const char *mnemonic)
SetMenuItemNew(int, int, int, int itemID, const char *text, const char *mnemonic)
SetMissing(const std::string &missing_)
SetMnemonicFor(WBase &w)
SetMouseCapture(bool on)
SetMoveExtends(bool moveExtends_)
SetMultiple(const char *s)
SetOneIndicator(GUI::ScintillaWindow &win, int indicator, const IndicatorDefinition &ind)
SetOneStyle(GUI::ScintillaWindow &win, int style, const StyleDefinition &sd)
SetOutputVisibility(bool show)
SetOverrideLanguage(int cmdID)
SetPaneFocus(bool editPane)
SetPartitionStartPosition(int partition, int pos)
SetPerLine(PerLine *pl)
SetPhasesDraw(int phases)
SetPixel(int x, int y, ColourDesired colour, int alpha)
SetPosition(PRectangle rc)
SetPosition(bool aboveText)
SetPosition(Sci::Position position_)
SetPosition(PRectangle rc)
SetPosition(Rectangle rc)
SetPositionRelative(PRectangle rc, Window relativeTo)
SetProgress(const GUI::gui_string &explanation, size_t size, size_t progress)
SetPropertiesInitial()
SetProperty(const char *key, const char *val)
SetRGBAImage(Point sizeRGBAImage, float scale, const unsigned char *pixelsRGBAImage)
SetReadOnly(bool set)
SetReadOnly(bool set) { cb.SetReadOnly(set)
SetRectangularRange()
SetRedraw(bool on)
SetReplace(const char *sReplace)
SetRepresentation(const char *charBytes, const char *value)
SetRepresentations()
SetSavePoint()
SetScale()
SetScaleFactor(int scale)
SetSciTE(SciTEGTK *pSciTEGTK_)
SetSciTE(SciTEWin *pSciTEWin_)
SetScrollBars()
SetScrollInfo(int nBar, LPCSCROLLINFO lpsi, BOOL bRedraw)
SetSearcher(Searcher *pSearcher_)
SetSelection(AtkText *text, gint selection_num, gint start, gint end)
SetSelection(gint selection_num, int startChar, int endChar)
SetSelection(Sci::Position currentPos_, Sci::Position anchor_)
SetSelection(SelectionPosition currentPos_)
SetSelection(SelectionPosition currentPos_, SelectionPosition anchor_)
SetSelection(int currentPos_)
SetSelection(SelectionRange range)
SetSelection(int anchor, int currentPos)
SetSelectionNMessage(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
SetSeparator(char separator_)
SetSize(size_t size_)
SetSizeJob(size_t size)
SetStartupTime(const char *timestamp)
SetState(int state_)
SetState(lua_State *L)
SetStatusBarText(const char *s)
SetStopChars(const char *stopChars_)
SetStyle(Sci::Line line, int style)
SetStyleAt(Sci::Position position, char styleValue)
SetStyleBlock(GUI::ScintillaWindow &win, const char *lang, int start, int last)
SetStyleFontName(int styleIndex, const char *name)
SetStyleFor(Sci::Position position, Sci::Position lengthStyle, char styleValue)
SetStyleFor(Sci_Position length, char style)
SetStyleFor(GUI::ScintillaWindow &win, const char *lang)
SetStyles(Sci_Position length, const char *styles)
SetStyles(Sci::Line line, const unsigned char *styles)
SetTabSize(int tabSz)
SetText(Sci::Line line, const char *text)
SetText(const GUI::gui_char *text)
SetTextContents(AtkEditableText *text, const gchar *contents)
SetTextContents(const gchar *contents)
SetTheme()
SetTicking(bool)
SetTimeFromFile()
SetTitle(const char *s)
SetTitle(const gui_char *s)
SetToggles()
SetToolBar()
SetToolsMenu()
SetTopLine(Sci::Line topLineNew)
SetTrackMouseLeaveEvent(bool on)
SetTranslation(char ch, char chTranslation)
SetTwoPhaseDraw(bool twoPhaseDraw)
SetTypesep(char separator_)
SetUndoCollection(bool collectUndo)
SetUnicodeMode(bool unicodeMode_)
SetValid(GtkEntry *entry, bool valid)
SetValueAt(int position, int value)
SetValueAt(int position, ParamType &&value)
SetValueAt(int position, ParamType&& v)
SetVerticalScrollPos()
SetView()
SetVirtualSpace(Sci::Position virtualSpace_)
SetVisible(Sci::Line lineDocStart, Sci::Line lineDocEnd, bool isVisible)
SetVisible(int index, bool visible)
SetVisibleRows(int rows)
SetWindowID(HWND hWnd, int identifier)
SetWindowName()
SetWindowPointer(HWND hWnd, void *ptr)
SetWordList(int n, const char *wl)
SetWords(const char *s)
SetWorkingDirectory()
SetWrapIndentMode(int wrapIndentMode_)
SetWrapState(int wrapState_)
SetWrapVisualFlags(int wrapVisualFlags_)
SetWrapVisualFlagsLocation(int wrapVisualFlagsLocation_)
SetWrapVisualStartIndent(int wrapVisualStartIndent_)
SetXPM(const char *const *linesForm)
SetXPM(const char *textForm)
SetXYScroll(XYScrollPosition newXY)
SetterFunction()
SetupChild(gpointer)
SetupConversions(enum CaseConversion conversion)
SetupFormat(Sci_RangeToFormat &frPrint, GtkPrintContext *context)
ShellEscape(const char *toEscape)
ShellExec(const std::string &cmd, const char *dir)
ShiftTab(int indexFrom, int indexTo)
ShiftTo(int indexFrom, int indexTo)
ShouldClose(bool found)
ShouldDisplayPopup(Point ptInWindowCoordinates)
ShouldNotSave()
Show(Point pt, Window &w)
Show(bool show)
Show(Point pt, Window & \/*w*\/)
Show(bool show)
Show(Point pt, Window &w)
Show(bool show)
Show(Point pt G_GNUC_UNUSED, Window &)
Show(bool show)
Show(int buttonHeight)
Show(int)
Show(Point pt, Window &w)
Show(bool show)
Show()
ShowAll()
ShowAssertionPopUps(bool assertionPopUps_)
ShowAssertionPopUps(bool \/*assertionPopUps*\/)
ShowAssertionPopUps(bool assertionPopUps_)
ShowBackgroundProgress(const GUI::gui_string &explanation, size_t size, size_t progress)
ShowBackgroundProgress(const GUI::gui_string & \/* explanation *\/, size_t \/* size *\/, size_t \/* progress *\/)
ShowBackgroundProgress(const GUI::gui_string &explanation, size_t size, size_t progress)
ShowCaretAtCurrentPosition()
ShowMessages(int line)
ShowOutputOnMainThread()
ShowOutputPane()
ShowPopup()
ShowStatusBar()
ShowTabBar()
ShowToolBar()
ShutDown()
SigFunction(*SigFunction)(GtkWidget *w, SciTEGTK *app)
SignalDestroy(GtkWidget *, Dialog *d)
SimpleAlphaRectangle(Surface *surface, PRectangle rc, ColourDesired fill, int alpha)
SingleBuffer()
Size()
SizeAllocate(GtkWidget *widget, GtkAllocation *allocation)
SizeButton(const GUI::Window &wButton)
SizeContentWindows()
SizeJob()
SizeRequest(GtkWidget *widget, GtkRequisition *requisition)
SizeSubWindows()
Slash(const std::string &s, bool quoteQuotes)
SortIfNeeded(bool ignoreCase)
SortWordList(char **words, unsigned int len)
Sorter(AutoComplete *ac_, const char *list_) : ac(ac_), list(list_)
SparseState(int positionFirst_=-1)
SparseVector() : empty()
SpecialRepresentations()
SplitRun(int position)
SplitVector() : empty()
SplitVectorWithRangeAdd(int growSize_)
SptrFromPointer(void *p)
SptrFromString(const char *cp)
StackMenu(int pos)
StackMenuNext()
StackMenuPrev()
StackNext()
StackPrev()
StandardASCII()
Start()
Start(int styleBase)
Start(int indicator, int position)
Start()
StartAt(Sci_PositionU start)
StartAt(unsigned int start, char chMask)
StartAutoComplete()
StartAutoCompleteWord(bool onlyOneWord)
StartBlockComment()
StartBoxComment()
StartCallTip()
StartDrag()
StartEndDisplayLine(Surface *surface, const EditModel &model, Sci::Position pos, bool start, const ViewStyle &vs)
StartEndDisplayLine(Sci::Position pos, bool start)
StartExpandAbbreviation()
StartIdleStyling(bool truncatedLastStyling)
StartInsertAbbreviation()
StartMacroList(const char *words)
StartPlayMacro()
StartRecordMacro()
StartRedo()
StartResize(WPARAM hitCode)
StartRun(int position)
StartSegment(Sci_PositionU pos)
StartSegment(unsigned int pos)
StartStreamComment()
StartStyling(Sci_Position position, char)
StartStyling(lua_State *L)
StartStyling(unsigned int startPos_, unsigned int length, int initStyle_)
StartUndo()
StartsWith(GUI::gui_string const &s, GUI::gui_string const &start)
StartsWith(std::string const &s, const char *start)
State(int position_, T value_) : position(position_), value(value_)
State(lua_State *L)
States()
StdStringFromDouble(double d, int precision)
StdStringFromInteger(int i)
StdStringFromSizeT(size_t i)
Stop()
StopExecute()
StopRecordMacro()
StoreOnClipboard(SelectionText *clipText)
StringDecode(const std::string &s, int codePage)
StringDecode(std::string s, int codePage)
StringEncode(const std::wstring &s, int codePage)
StringEncode(std::wstring s, int codePage)
StringEqual(const char *a, const char *b, size_t len, bool caseSensitive)
StringFromDocument(const char *s)
StringFromEOLMode(int eolMode)
StringFromInteger(long i)
StringFromLines(const std::vector<int> &lines)
StringFromLongLong(long long i)
StringFromSelectedText(const SelectionText &selectedText)
StringFromUTF8(const char *s)
StringFromUTF8(const std::string &s)
StringFromUTF8(const char *s)
StringFromUTF8(const std::string &s)
StringList(bool onlyLineEnds_ = false)
StringMapCase(const std::wstring &ws, DWORD mapFlags)
StringResult(sptr_t lParam, const char *val)
StringSplit(const T &text, int separator)
Strip() : allowMenuActions(false), childHasFocus(false), visible(false)
Strip() : fontText(0), hTheme(0), scale(96), space(2), capturedMouse(false), closeState(csNone), entered(0), lineHeight(20), visible(false)
StripDefinition(GUI::gui_string definition)
StripHasFocus()
StripTrailingSpaces()
Style(Sci::Line line)
Style() : FontSpecification()
Style(const Style &source) : FontSpecification(), FontMeasurements()
StyleAndColour() : style(INDIC_PLAIN), fore(0, 0, 0)
StyleAndColour(int style_, ColourDesired fore_ = ColourDesired(0, 0, 0)) : style(style_), fore(fore_)
StyleAndWords() : styleNumber(0)
StyleAreaBounded(PRectangle rcArea, bool scrolling)
StyleAt(Sci::Position position, bool ensureStyle = false)
StyleAt(Sci_Position position)
StyleAt(Sci::Position position)
StyleAt(Sci_Position position) const { return cb.StyleAt(position)
StyleAt(size_t i)
StyleAt(lua_State *L)
StyleAt(int position)
StyleDefinition(const char *definition)
StyleDefinitionFor(int style)
StyleFromSubStyle(int subStyle)
StyleGetMessage(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
StyleIdle(gpointer pSci)
StyleIndexAt(Sci_Position position) const { return static_cast<unsigned char>(cb.StyleAt(position))
StyleSet(GtkWidget *w, GtkStyle*, void*)
StyleSetMessage(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
StyleSetText(GtkWidget *widget, GtkStyle *, void*)
StyleString(const char *lang, int style)
StyleToAdjustingLineDuration(Sci::Position pos)
StyleToPositionInView(Sci::Position pos)
StyleWriter(GUI::ScintillaWindow &sw_)
StyledText(size_t length_, const char *text_, bool multipleStyles_, int style_, const unsigned char *styles_)
Styles(Sci::Line line)
SubLineRange(int subLine)
SubStyles(const char *baseStyles_, int styleFirst_, int stylesAvailable_, int secondaryDistance_)
SubStylesLength(int styleBase)
SubStylesStart(int styleBase)
Substitute(std::string &s, const std::string &sFind, const std::string &sReplace)
Substitute(std::wstring &s, const std::wstring &sFind, const std::wstring &sReplace)
SubstituteByPosition(Document *doc, const char *text, Sci::Position *length)
SubstituteByPosition(const char *text, Sci::Position *length)
SubstituteMarkerIfEmpty(int markerCheck, int markerDefault, const ViewStyle &vs)
SubsystemFromChar(char c)
SubsystemType(const char *cmd)
Succeeded()
Surface()
Surface(const Surface &)
SurfaceD2D()
SurfaceGDI()
SurfaceImpl() : et(singleByte)
SurfaceImpl()
Swap()
Swap(int indexA, int indexB)
SwitchDocumentAt(int index, sptr_t pdoc)
T(T (&dest)[count], const T* source)
TArray()
TList()
TMap()
Tab(bool forwards)
TabAtPoint(HWND hWnd, GUI::Point pt)
TabBarRelease(GtkNotebook *notebook, GdkEventButton *event)
TabBarReleaseSignal(GtkNotebook *notebook, GdkEventButton *event, SciTEGTK *scitew)
TabBarScroll(GdkEventScroll *event)
TabBarScrollSignal(GtkNotebook *, GdkEventScroll *event, SciTEGTK *scitew)
TabInsert(int index, const GUI::gui_char *title)
TabSelect(int index)
TabSizeCmd()
TabSizeConvertCmd()
TabSizeDialog()
TabSizeDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
TabSizeMessage(HWND hDlg, UINT message, WPARAM wParam)
TabSizeResponse(int responseID)
TabSizeSet(int &tabSize, bool &useTabs)
TabWndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
TargetAsUTF8(char *text)
Tentative()
TentativeActive()
TentativeActive() const { return cb.TentativeActive()
TentativeCommit()
TentativeCommit() { cb.TentativeCommit()
TentativeSelection(SelectionRange range)
TentativeStart()
TentativeStart() { cb.TentativeStart()
TentativeSteps()
TentativeUndo()
Text(Sci::Line line)
Text()
Text(const char *s, bool retainIfNotFound)
TextOfWindow(HWND hWnd)
TextOffset()
TextRead(FileWorker *pFileWorker)
TextReader(GUI::ScintillaWindow &sw_)
TextSegment(int start_=0, int length_=0, const Representation *representation_=0)
TextWide(const char *s, int len, bool unicodeMode, int codePage=0)
TextWidth(int style, const char *text)
TextWritten(FileWorker *pFileWorker)
ThinRectangularRange()
ThreadLockMinder()
Tick()
TickFor(TickReason reason)
TimeCommands()
TimeOut(gpointer ptt)
TimeThunk() : reason(tickCaret), scintilla(NULL), timer(0)
Timer()
TimerEnd(int mask)
TimerEnd(int \/* mask *\/)
TimerEnd(int mask)
TimerStart(int mask)
TimerStart(int \/* mask *\/)
TimerStart(int mask)
TimerTick(gpointer pSciTE)
Toggle()
ToggleButton()
ToggleChanged(WCheckDraw *, void *user)
ToggleFoldRecursive(int line, int level)
ToggleHanja()
ToggleOpenFilesHere()
ToggleOutputVisible()
Toggled(GtkWidget *, WCheckDraw *pcd)
Token(lua_State *L)
ToolIsImmediate(int item)
ToolsMenu(int item)
TopLineOfMain()
Trace(const char *s)
TrackMouse(GUI::Point pt)
TrackMouseEventSig(WINAPI *TrackMouseEventSig)(LPTRACKMOUSEEVENT)
TransformLineEnds(const char *s, size_t len, int eolModeWanted)
TranslatePath(const char *path)
TranslatedLabel(const char *original)
Trim(SelectionRange range)
TrimAndSetSelection(Sci::Position currentPos_, Sci::Position anchor_)
TrimOtherSelections(size_t r, SelectionRange range)
TrimSelection(SelectionRange range)
TypeOfGSD(GtkSelectionData *sd) { return gtk_selection_data_get_data_type(sd)
UIAvailable()
UIClosed()
UIHasFocus()
UIShouldBeFlat()
UTF16CharLength(wchar_t uch)
UTF16FromUTF32Character(unsigned int val, wchar_t *tbuf)
UTF16FromUTF8(const char *s, size_t len, wchar_t *tbuf, size_t tlen)
UTF16FromUTF8(const char *s, size_t len, gui_char *tbuf, size_t tlen)
UTF16Length(const char *s, size_t len)
UTF32Character(const unsigned char *utf8)
UTF32FromUTF8(const char *s, size_t len, unsigned int *tbuf, size_t tlen)
UTF8BytesOfLeadInitialise()
UTF8CharLength(unsigned char ch)
UTF8Classify(const unsigned char *us, int len)
UTF8DrawBytes(const unsigned char *us, int len)
UTF8FromIconv(const Converter &conv, const char *s, int len)
UTF8FromLatin1(const char *s, int len)
UTF8FromString(const gui_string &s)
UTF8FromUTF16(const wchar_t *uptr, size_t tlen, char *putf, size_t len)
UTF8FromUTF16(const wchar_t *uptr, size_t tlen, char *putf)
UTF8FromUTF32Character(int uch, char *putf)
UTF8IsAscii(int ch)
UTF8IsNEL(const unsigned char *us)
UTF8IsSeparator(const unsigned char *us)
UTF8IsTrailByte(int ch)
UTF8Iterator(const Document *doc_ = 0, Sci::Position position_ = 0)
UTF8Iterator(const Document *doc_=0, Sci::Position position_=0) : doc(doc_), position(position_)
UTF8Iterator(const UTF8Iterator &other)
UTF8Length(const wchar_t *uptr, size_t tlen)
UTF8LineEndOverlaps(Sci::Position position)
UnMap(GtkWidget *widget)
UnMapThis()
UnRealize(GtkWidget *widget)
UnRealizeThis(GtkWidget *widget)
UnRefCursor(GdkCursor *cursor)
UnSlash(char *s)
UnSlashAsNeeded(const std::string &s, bool escapes, bool regularExpression)
UnSlashLowOctal(char *s)
UnSlashLowOctalString(const char *s)
UnSlashString(const char *s)
UnclaimSelection(GdkEventSelection *selection_event)
Undo()
UndoGroup(Document *pdoc_, bool groupNeeded_=true)
UndoHistory()
UnicodeFromUTF8(const unsigned char *us)
UniqueInstance()
UniqueStringCopy(const char *text)
Unlock()
Unlock() { ::LeaveCriticalSection(&cs)
Unregister()
Unset(const char *key, int lenKey)
UnsetProperty(const char *key)
UpdateBuffersCurrent()
UpdateCursor()
UpdateOutputSize()
UpdateProgress(Worker *)
UpdateStatusBar(bool bUpdateSlowData)
UpdateSystemCaret()
UptrFromString(const char *cp)
UseContainerLexing()
UseStyleCallTip()
UserControl(UCControlType controlType_, const GUI::gui_string &text_, int item_)
UserFilePath(const GUI::gui_char *name)
UserStrip() : psd(0), extender(0), pSciTEGTK(0), tableUser(1, 1)
UserStrip() : extender(nullptr), pSciTEWin(nullptr)
UserStripClosed()
UserStripSet(int control, const char *value)
UserStripSetList(int control, const char *value)
UserStripShow(const char *description)
UserStripValue(int control)
UserVirtualSpace()
Utf16_Iter()
Utf8_16_Read()
Utf8_16_Write()
Utf8_Iter()
VCHomeDisplayPosition(Sci::Position position)
VCHomePosition(Sci::Position position)
VCHomeWrapPosition(Sci::Position position)
VFunction(void)
Valid()
ValidCodePage(int codePage)
ValidCodePage(int \/* codePage *\/)
ValidCodePage(int codePage)
ValidMargin(uptr_t wParam)
ValidStyle(size_t styleIndex)
ValidStyledText(const ViewStyle &vs, size_t styleOffset, const StyledText &st)
Value()
ValueAt(int position)
ValueAt(int indicator, int position)
ValueAt(int position)
ValueFor(const std::string &s)
ValueOfHex(const char ch)
VarBuffer(size_t length) : buffer(0)
VarChain(const char *var_=NULL, const VarChain *link_=NULL): var(var_), link(link_)
VarChain(const char*var_=NULL, const VarChain *link_=NULL): var(var_), link(link_)
Version()
VerticalCentreCaret()
View()
ViewStyle() : markers(MARKER_MAX + 1), indicators(INDIC_MAX + 1)
ViewStyle(const ViewStyle &source) : markers(MARKER_MAX + 1), indicators(INDIC_MAX + 1)
ViewWhitespace(bool view)
VirtualSpace()
VirtualSpaceFor(Sci::Position pos)
VisibleHasFocus()
WCheckDraw() : cdfn(NULL), user(NULL)
WTable(int rows_, int columns_)
WarnUser(int)
WarnUser(int warnID)
WatcherHelper(ScintillaDocument *owner_) : owner(owner_)
WatcherWithUserData(DocWatcher *watcher_=0, void *userData_=0)
WeakNotify(gpointer data, GObject *obj)
WeakNotifyThis(GObject *obj G_GNUC_UNUSED)
WhiteSpaceVisible(bool inIndent)
WhitespaceBackgroundDrawn()
WidestLineWidth(Surface *surface, const ViewStyle &vs, int styleOffset, const StyledText &st)
Widget(const GUI::Window &w)
WidgetGetAccessibleImpl(GtkWidget *widget, AtkObject **cache, gpointer widget_parent_class G_GNUC_UNUSED)
WidgetHasFocus(UserControl *ctl)
Width()
WidthChar(Font &font_, char ch)
WidthChar(Font &font, char ch)
WidthChar(Font &font_, char ch)
WidthControl(GUI::Window &w)
WidthText(Font &font_, const char *s, int len)
WidthText(Font &font, const char *s, int len)
WidthText(Font &font_, const char *s, int len)
WidthText(HFONT hfont, const GUI::gui_char *text)
Win32MapFontQuality(int extraFontFlag)
WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int)
WinMutex() { ::InitializeCriticalSection(&cs)
Window() : wid(0), cursorLast(cursorInvalid)
Window(const Window &source) : wid(source.wid), cursorLast(cursorInvalid)
Window() : wid(0)
WindowCopyData(const char *s, size_t len)
WindowFromWidget(GtkWidget *w)
WindowMessageBox(GUI::Window &w, const GUI::gui_string &msg, MessageBoxStyle style)
WindowSetFocus(GUI::ScintillaWindow &w)
Window_SendMessage(Window *w, UINT msg, WPARAM wParam=0, LPARAM lParam=0)
WithExtends(unsigned int iMessage)
WithoutUnderscore(const char *s)
WndPaint(uptr_t wParam)
WndProc(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
WndProc(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
WndProc(UINT iMessage, WPARAM wParam, LPARAM lParam)
WordAt(int n)
WordCharacterClass(unsigned int ch)
WordClassifier(int baseStyle_) : baseStyle(baseStyle_), firstStyle(0), lenStyles(0)
WordList(bool onlyLineEnds_)
WordListSet(int n, const char *wl)
WordPartLeft(Sci::Position pos)
WordPartRight(Sci::Position pos)
WordSelection(Sci::Position pos)
WorkNeeded() : items(workNone), upTo(0)
Worker() : mutex(Mutex::Create()), completed(false), cancelling(false), jobSize(1), jobProgress(0)
WorkerCommand(int cmd, Worker *pWorker)
WorkerThread(void *ptr)
WrapColour()
WrapCount(int line)
WrapLines(WrapScope ws)
WrapOneLine(Surface *surface, Sci::Line lineToWrap)
WrapPending()
Wrapped(Sci::Line line)
Wrapping()
XFromPosition(Sci::Position pos)
XFromPosition(SelectionPosition sp)
XPM(const char *const *linesForm)
XPM(const char *textForm)
XYMaximum(XYPOSITION a, XYPOSITION b)
XYMinimum(XYPOSITION a, XYPOSITION b)
XYScrollPosition(int xOffset_, Sci::Line topLine_) : xOffset(xOffset_), topLine(topLine_)
XYScrollToMakeVisible(const SelectionRange &range, const XYScrollOptions options)
absolute_index(lua_State *L, int index)
access(const wchar_t *path, int mode)
appName("Sc1")
appName("SciTE")
begin_undo_action()
callClassName("CallTip")
call_function(lua_State *L, int nargs, bool ignoreFunctionReturnValue=false)
canConvert(const QString &mime, QString flav)
canGet()
can_redo()
can_undo()
cf_global_dostring(lua_State *L)
cf_global_metatable_index(lua_State *L)
cf_global_print(lua_State *L)
cf_global_trace(lua_State *L)
cf_ifaceprop_metatable_index(lua_State *L)
cf_ifaceprop_metatable_newindex(lua_State *L)
cf_match_metatable_index(lua_State *L)
cf_match_metatable_tostring(lua_State *L)
cf_match_replace(lua_State *L)
cf_pane_append(lua_State *L)
cf_pane_findtext(lua_State *L)
cf_pane_iface_function(lua_State *L)
cf_pane_insert(lua_State *L)
cf_pane_match(lua_State *L)
cf_pane_match_generator(lua_State *L)
cf_pane_metatable_index(lua_State *L)
cf_pane_metatable_newindex(lua_State *L)
cf_pane_remove(lua_State *L)
cf_pane_textrange(lua_State *L)
cf_props_metatable_index(lua_State *L)
cf_props_metatable_newindex(lua_State *L)
cf_scite_constname(lua_State *L)
cf_scite_menu_command(lua_State *L)
cf_scite_open(lua_State *L)
cf_scite_send(lua_State *L)
cf_scite_strip_set(lua_State *L)
cf_scite_strip_set_list(lua_State *L)
cf_scite_strip_show(lua_State *L)
cf_scite_strip_value(lua_State *L)
cf_scite_update_status_bar(lua_State *L)
chdir(const wchar_t *dirname)
check_pane_object(lua_State *L, int index)
checkudata(lua_State *L, int ud, const char *tname)
clear_table(lua_State *L, int tableIdx, bool clearMetatable = true)
clone_table(lua_State *L, int srcTableIdx, bool copyMetatable = false)
cmpWords(const char *a, const char *b)
cmpWords(const void *a, const void *b)
colourNoMatch(0xff,0x66,0x66)
command(* command) (ScintillaObject *sci, int cmd, GtkWidget *window)
configFileVisibilityString("")
contains(const char *testVar)
contentViewClass(Class)
contextMenuEvent(QContextMenuEvent *event)
convert(char* buf, size_t len)
convertFromMime(const QString & \/* mime *\/, QVariant data, QString \/* flav *\/)
convertToMime(const QString & \/* mime *\/, QList<QByteArray> data, QString \/* flav *\/)
convertorName()
copy(const MultiplexExtension & copy)
copy_(void *src)
decoration_fill_range(int position, int value, int fillLength)
decorations_end(int indic, int position)
decorations_start(int indic, int position)
decorations_value_at(int indic, int position)
defaultSessionFileName("SciTE.session")
defineTexStyle(const StyleDefinition &style, FILE* fp, int istyle)
delayAlreadyElapsed(or have to be)
delayJustEnded(SCN_UPDATEUI and SC_UPDATE_CONTENT for setting indicators)
delegate(nonatomic, assign)
delete_chars(int pos, int len)
delete_undo_history()
destroyDialog(GtkWidget *, gpointer *window)
determineEncoding()
doubleFromPangoUnits(int pu)
dragEnterEvent(QDragEnterEvent *event)
dragLeaveEvent(QDragLeaveEvent * \/* event *\/)
dragMoveEvent(QDragMoveEvent *event)
draw( float x, float y )
dropEvent(QDropEvent *event)
dwordFromBGRA(byte b, byte g, byte r, byte a)
emit_error_occurred(int status)
emit_lexer_changed()
emit_modify_attempt()
emit_save_point(bool atSavePoint)
emit_style_needed(int pos)
end()
end_undo_action()
ensure_styled_to(int position)
escapeValue(unsigned char ch)
event(QEvent *event)
event_command(uptr_t wParam, sptr_t lParam)
execCommand(QAction *action)
fclose()
fe(ULONG)FormatEnumerator_AddRef(FormatEnumerator *fe)
fileRead("rb")
fileWrite("wb")
flavorFor(const QString &mime)
focusInEvent(QFocusEvent *event)
focusOutEvent(QFocusEvent *event)
fopen(const wchar_t *filename, const wchar_t *mode)
free_(void *)
fwrite(const void* p, size_t _size)
gapLength()
get()
getAscent()
getCTLine()
getCTStyle()
getCharacterSet()
getDescent()
getEncoding()
getFontID()
getFontRef()
getLeading()
getNewBuf() { return reinterpret_cast<char*>(m_pNewBuf)
getPDFRGB(const char* stylecolour)
getStringLength()
getTexRGB(char* texcolor, const char* stylecolor)
get_char_range(int position, int length)
get_character(int pos)
get_code_page()
get_end_styled()
get_eol_mode()
getcwd(wchar_t *buffer, int maxlen)
iconvhBad(GIConv)(-1)
iface_function_helper(lua_State *L, const IFaceFunction &func)
includes(const StyleAndWords &symbols, const std::string &value)
init(::AtkEditableTextIface *iface)
init(::AtkTextIface *iface)
init_pixmap(ListImage *list_image)
inputMethodEvent(QInputMethodEvent *event)
inputMethodQuery(Qt::InputMethodQuery query)
insert_string(int position, QByteArray &str)
isEncodingChar(char ch)
isSpaceChar(char ch)
is_collecting_undo()
is_cr_lf(int pos)
is_read_only()
is_save_point()
isdigitchar(int ch)
isfilenamecharforsel(char ch)
islexerwordcharforsel(char ch)
isoperator(int ch)
isprefix(const char *target, const char *prefix)
isspacechar(int ch)
isspacechar(unsigned char ch)
istrlen(const char *s)
iswordc(unsigned char x)
iswordchar(int ch)
iswordcharforsel(char ch)
iswordstart(int ch)
keyPressEvent(QKeyEvent *event)
length()
line_end(int lineno)
line_end_position(int pos)
line_from_position(int pos)
line_start(int lineno)
lines_total()
listSepString(";")
list_image_free(gpointer, gpointer value, gpointer)
main(int argc, char *argv[])
menuAccessIndicator("&")
menuAccessIndicator("_")
merge_table(lua_State *L, int destTableIdx, int srcTableIdx, bool copyMetatable = false)
messageBoxDestroy(GtkWidget *, gpointer *)
messageBoxKey(GtkWidget *w, GdkEventKey *event, gpointer p)
messageBoxOK(GtkWidget *, gpointer p)
mimeFor(QString flav)
modifierTranslated(int sciModifier)
mouseDoubleClickEvent(QMouseEvent * \/* event *\/)
mouseDoubleClickEvent(QMouseEvent *event)
mouseMoveEvent(QMouseEvent *event)
mousePressEvent(QMouseEvent *event)
mouseReleaseEvent(QMouseEvent *event)
move_position_outside_char(int pos, int move_dir, bool check_line_end)
nClipboardCopyTargets(clipboardCopyTargets)
nClipboardPasteTargets(clipboardPasteTargets)
nRanges(catRanges)
not_empty(const char *s)
notify(* notify) (ScintillaObject *sci, int id, SCNotification *scn)
notifyParent(SCNotification scn)
onIdle()
operator(const WordList &other)
operator(const ByteIterator &other)
operator(const UTF8Iterator &other)
operator()	D:\projects\_myScite\_myScite.github\src\3.7.5\scintilla\src\AutoComplete.cxx	/^	bool operator()(int a, int b)
operator()	D:\projects\_myScite\_myScite.github\src\3.7.5\scite\src\StringList.cxx	/^	bool operator()(const char *a, const char *b)
operator()
operator(int)
operator()
operator(int)
operator()
operator(const State &other)
operator(const CharacterConversion &other)
operator(const KeyModifiers &other)
operator(const SelectionPosition &other)
operator(const SelectionRange &other)
operator(const FontSpecification &other)
operator(const FilePath &other)
operator(const SelectionPosition &other)
operator(const Platform &)
operator(const Surface &)
operator(WindowID wid_)
operator(const Window &other)
operator(CharacterSet &&other)
operator(const CharacterSet &other)
operator(const ByteIterator &other)
operator(const UTF8Iterator &other)
operator(const LineMarker &other)
operator(const Style &source)
operator(WindowID wid_)
operator(const PropSetFile &assign)
operator(const ColourDesired &other)
operator(const PRectangle &rc)
operator(const State &other)
operator(const ByteIterator &other)
operator(const UTF8Iterator &other)
operator(const WatcherWithUserData &other)
operator(const Range &other)
operator(const XYScrollPosition &other)
operator(const StyleAndColour &other)
operator(const SelectionPosition &other)
operator(const SelectionRange &other)
operator(const FontSpecification &other)
operator(const FilePath &other)
operator(const Rectangle &other)
operator(const SelectionPosition &other)
operator()
operator(Sci_Position position)
operator(int position)
operator(int nIndex)
operator(ARG_KEY key)
operator(size_t ind)
operator(int position)
operator()
operator() const { return !words.empty()
operator()
other(const Action &&other)
other(const Action &other)
override(Font &font_)
override(Font &font_, char ch)
override(Font &font_, const char *s, int len)
override()
override(int points)
override()
override(PRectangle rc, Scintilla::Point from, Surface &surfaceSource)
override(PRectangle rc, int width, int height, const unsigned char *pixelsImage)
override(PRectangle rc, Font &font_, XYPOSITION ybase, const char *s, int len, ColourDesired fore)
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override(PRectangle rc, ColourDesired back)
override(PRectangle rc, Surface &surfacePattern)
override()
override(SurfaceID sid, WindowID wid)
override(WindowID wid)
override(int width, int height, Surface *surface_, WindowID wid)
override(int x_, int y_)
override(Font &font_, const char *s, int len, XYPOSITION *positions)
override(int x_, int y_)
override(ColourDesired fore)
override(Scintilla::Point *pts, int npts, ColourDesired fore, ColourDesired back)
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override()
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override(PRectangle rc)
override(int codePage_)
override(bool unicodeMode_)
override()
override(TickReason reason)
override()
override(Sci::Line nMax, Sci::Line nPage)
override(bool on)
override(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
override(const std::string &s, int caseMapping)
override(const char *label, int cmd = 0, bool enabled = true)
override()
override(const SelectionText &selectedText)
override(PRectangle rc)
override()
override(TickReason reason)
override(TickReason reason, int millis, int tolerance)
override()
override(bool focus)
override(SCNotification scn)
override()
override(WorkNeeded::workItems items, Sci::Position upTo)
override()
override(PRectangle rc)
override(Sci::Line linesToMove)
override()
override(Document *document)
override()
override(bool on)
override()
override(TickReason reason)
override()
override(Font &font_)
override(Font &font_, char ch)
override(Font &font_, const char *s, int len)
override()
override(int points)
override(const char *prefix)
override()
override(char *s, int type = -1)
override()
override(PRectangle rc, Point from, Surface &surfaceSource)
override(Window &parent, int ctrlID, Point location_, int lineHeight_, bool unicodeMode_, int technology_)
override(PRectangle rc, int width, int height, const unsigned char *pixelsImage)
override(PRectangle rc, Font &font_, XYPOSITION ybase, const char *s, int len, ColourDesired fore, ColourDesired back)
override(PRectangle rc, Font &font_, XYPOSITION ybase, const char *s, int len, ColourDesired fore)
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override(PRectangle rc, ColourDesired back)
override(PRectangle rc, Surface &surfacePattern)
override()
override(int n, char *value, int len)
override(SurfaceID sid, WindowID wid)
override(WindowID wid)
override(int width, int height, Surface *surface_, WindowID wid)
override(int x_, int y_)
override(Font &font_, const char *s, int len, XYPOSITION *positions)
override(int x_, int y_)
override(ColourDesired fore)
override(Point *pts, int npts, ColourDesired fore, ColourDesired back)
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override(int type, const char *xpm_data)
override(int type, int width, int height, const unsigned char *pixelsImage)
override()
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override(int n)
override(int width)
override(PRectangle rc)
override(int codePage)
override(Font &font)
override(const char *listText, char separator, char typesep)
override(bool unicodeMode_)
override(int rows)
override()
override(Point ptStart, Point ptNow)
override()
override(TickReason reason)
override()
override(Sci::Line nMax, Sci::Line nPage)
override(PRectangle rc)
override(bool on)
override(int codePage)
override(int key, int modifiers)
override(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
override(const std::string &s, int caseMapping)
override(const char *label, int cmd = 0, bool enabled = true)
override()
override(const SelectionText &selectedText)
override(PRectangle rc)
override(Window::Cursor c)
override()
override(TickReason reason)
override(TickReason reason, int millis, int tolerance)
override()
override(bool focus)
override(SCNotification scn)
override()
override(WorkNeeded::workItems items, Sci::Position upTo)
override()
override(Sci::Line linesToMove)
override(Document *document)
override()
override(bool on)
override()
override(const char *prefix)
override()
override(char *s, int type = -1)
override()
override(int n, char *value, int len)
override(int type, const char *xpmData)
override(int n)
override(int width)
override(CallBackAction action, void *data)
override(Font &font)
override(const char *list, char separator, char typesep)
override(int rows)
override(QMouseEvent *event)
override(Font &font)
override(Font &font, char ch)
override(Font &font, const char *s, int len)
override()
override(int points)
override()
override(PRectangle rc, Point from, Surface &surfaceSource)
override(PRectangle rc, ColourDesired back)
override(PRectangle rc, Surface &surfacePattern)
override()
override(SurfaceID sid, WindowID wid)
override(WindowID wid)
override(int x_, int y_)
override(ColourDesired fore)
override()
override(PRectangle rc)
override(int codePage_)
override(bool unicodeMode_)
override(Qt::InputMethodQuery query)
override(QEvent *event)
override(QContextMenuEvent *event)
override(QDragEnterEvent *event)
override(QDragLeaveEvent *event)
override(QDragMoveEvent *event)
override(QDropEvent *event)
override(QFocusEvent *event)
override(QInputMethodEvent *event)
override(QKeyEvent *event)
override(QMouseEvent *event)
override(QPaintEvent *event)
override(QResizeEvent *event)
override(QWheelEvent *event)
override()
override(Point ptStart, Point ptNow)
override()
override(TickReason reason)
override()
override(Sci::Line nMax, Sci::Line nPage)
override(bool on)
override(int codePage)
override(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
override(const std::string &s, int caseMapping)
override(const char *label, int cmd = 0, bool enabled = true)
override()
override(const SelectionText &selectedText)
override(PRectangle rc)
override()
override(TickReason reason)
override(TickReason reason, int millis, int tolerance)
override()
override(bool focus)
override(SCNotification scn)
override()
override(int linesToMove)
override()
override(bool on)
override()
override(QTimerEvent *event)
override(char *folded, size_t sizeFolded, const char *mixed, size_t lenMixed)
override(Document *doc, const char *text, Sci::Position *length)
override()
override(Document *document, void *userData)
override(Document *doc, void *userData, int status)
override(Document *doc, void *userData)
override(Document *document, DocModification mh, void *userData)
override(Document *document, void *userData)
override(Document *document, void *userData, bool atSavePoint)
override(Document *doc, void *userData, Sci::Position endStyleNeeded)
override()
override(Sci::Line line)
override()
override(unsigned int iMessage)
override(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
override(const char *s, unsigned int len, bool treatAsDBCS=false)
override(Point pt, unsigned int curTime, bool shift, bool ctrl, bool alt)
override(Point pt, unsigned int curTime, int modifiers)
override()
override(Document *doc, void *userData)
override(Sci::Position endStyleNeeded)
override(Point pt, unsigned int curTime, int modifiers)
override()
override(Font &font_)
override(Font &font_, char ch)
override(Font &font_, const char *s, int len)
override()
override(int points)
override(const char *prefix)
override()
override(char *s, int type = -1)
override()
override(PRectangle rc, Point from, Surface &surfaceSource)
override(Window &parent_, int ctrlID_, Point location_, int lineHeight_, bool unicodeMode_, int technology_)
override(PRectangle rc, int width, int height, const unsigned char *pixelsImage)
override(PRectangle rc, Font &font_, XYPOSITION ybase, const char *s, int len, ColourDesired fore, ColourDesired back)
override(PRectangle rc, Font &font_, XYPOSITION ybase, const char *s, int len, ColourDesired fore)
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override(PRectangle rc, ColourDesired back)
override(PRectangle rc, Surface &surfacePattern)
override()
override(int n, char *value, int len)
override(SurfaceID sid, WindowID wid)
override(WindowID wid)
override(int width, int height, Surface *surface_, WindowID wid)
override(int x_, int y_)
override(Font &font_, const char *s, int len, XYPOSITION *positions)
override(int x_, int y_)
override(ColourDesired fore)
override(Point *pts, int npts, ColourDesired fore, ColourDesired back)
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override(int type, const char *xpm_data)
override(int type, int width, int height, const unsigned char *pixelsImage)
override()
override(PRectangle rc, ColourDesired fore, ColourDesired back)
override(int n)
override(int width)
override(PRectangle rc)
override(int codePage_)
override(Font &font)
override(const char *list, char separator, char typesep)
override(bool unicodeMode_)
override(int rows)
override()
override(Point ptStart, Point ptNow)
override()
override(TickReason reason)
override()
override(Sci::Line nMax, Sci::Line nPage)
override(PRectangle rc)
override(bool on)
override(int codePage)
override()
override(unsigned int iMessage, uptr_t wParam, sptr_t lParam)
override(const std::string &s, int caseMapping)
override(const char *label, int cmd = 0, bool enabled = true)
override()
override(const SelectionText &selectedText)
override(PRectangle rc)
override()
override(TickReason reason)
override(TickReason reason, int millis, int tolerance)
override()
override(Point pt, int modifiers)
override(bool focus)
override(SCNotification scn)
override()
override(Sci::Line linesToMove)
override(int identifier)
override()
override(bool on)
override()
override(GUI::Window &w, const GUI::gui_string &msg, int style = mbsIconWarning)
override()
override(GdkEventKey *event)
override(const FilePath &directory, const char *filter)
override(bool modal)
override()
override(Worker *pWorker)
override()
override(int control)
override(GtkDirectionType direction)
override(const std::string &s)
override(GUI::ScintillaWindow &win, int selStart, int selEnd)
override()
override(const char *timestamp)
override(const char *label, int cmd = 0, bool enabled = true)
override(int wIDCheckItem, bool val)
override()
override(GtkWidget *widget)
override()
override(GtkWidget *container)
override()
override(int menuNumber, int itemID)
override(int wIDCheckItem, bool val)
override()
override(const std::string &msg, const std::string *findItem=0)
override(bool replace)
override(int *left, int *top, int *width, int *height, int *maximize)
override()
override(guint action)
override(SCNotification *notification)
override(const char *list)
override()
override(int cmd, Worker *pWorker)
override(bool)
override()
override(PropSetFile &ps)
override(bool on)
override(const char *s)
override(int buttonHeight)
override(const GUI::gui_string &explanation, size_t size, size_t progress)
override()
override(int index, const GUI::gui_char *title)
override(int index)
override()
override(int mask)
override()
override(bool bUpdateSlowData)
override(int control, const char *value)
override(const char *description)
override(int warnID)
override()
override(Pane p, int start, int end)
override(bool reverseDirection, bool showWarnings=true, bool allowRegExp=true)
override(bool inSelection)
override(Pane p, unsigned int msg, uptr_t wParam = 0, sptr_t lParam = 0)
override(const char *key)
override()
override(int cmd, Worker *pWorker)
override(int cmdID)
override(Pane p, int pos, const char *s)
override(MarkPurpose purpose=markWithBookMarks)
override()
override(const char *actionList)
override(Pane p, int start, int end)
override(bool showWarnings=true)
override()
override(const char *sFind)
override(const char *key, const char *val)
override(const char *sReplace)
override()
override(const char *s)
override()
override(const char *key)
override(bool bUpdateSlowData)
override()
override(GUI::Window &w, const GUI::gui_string &msg, MessageBoxStyle style = mbsIconWarning)
override()
override(const FilePath &directory, const GUI::gui_char *filesFilter)
override(bool modal)
override()
override(Worker *pWorker)
override(const GUI::gui_char *arg)
override()
override(int control)
override(const std::string &s)
override(GUI::ScintillaWindow &win, int selStart, int selEnd)
override()
override(const char *timestamp)
override(const std::string &cmd, const std::string &dir, JobSubsystem jobType, const std::string &input = "", int flags = 0)
override(const char *label, int cmd=0, bool enabled=true)
override(int wIDCheckItem, bool val)
override()
override(int menuNumber, int itemID)
override(int wIDCheckItem, bool val)
override()
override(const std::string &msg, const std::string *findItem = 0)
override(bool replace)
override(int *left, int *top, int *width, int *height, int *maximize)
override()
override(SCNotification *notification)
override()
override(int cmd, Worker *pWorker)
override(bool showDialog)
override()
override(PropSetFile &ps)
override(const char *s)
override(const GUI::gui_string &explanation, size_t size, size_t progress)
override()
override(int index, const GUI::gui_char *title)
override(int index)
override()
override(int mask)
override()
override(int control, const char *value)
override(const char *description)
override(int warnID)
override(int cmd, Worker *pWorker)
paintEvent(QPaintEvent *event)
pangoUnitsFromDouble(double d)
pathSepString("\\\\")
pixmap_new(gchar **xpm)
pointer()
preprocessorSymbol(in C, #)
propAbbrevFileName("abbrev.properties")
propDirectoryFileName("SciTEDirectory.properties")
propGlobalFileName("SciTEGlobal.properties")
propLocalFileName("SciTE.properties")
propUserFileName(".SciTEUser.properties")
propUserFileName("SciTEUser.properties")
push_iface_function(lua_State *L, const char *name)
push_iface_propval(lua_State *L, const char *name)
push_pane_object(lua_State *L, ExtensionAPI::Pane p)
raise_error(lua_State *L, const char *errMsg=NULL)
read(const ubyte* pRead)
redo()
reset()
resizeEvent(QResizeEvent *)
scintilla_class_init(ScintillaClass *klass)
scintilla_get_type()
scintilla_init(ScintillaObject *sci)
scintilla_new()
scintilla_object_accessible_class_init(ScintillaObjectAccessibleClass *klass)
scintilla_object_accessible_factory_class_init(AtkObjectFactoryClass * klass)
scintilla_object_accessible_factory_create_accessible(GObject *obj)
scintilla_object_accessible_factory_get_accessible_type(void)
scintilla_object_accessible_factory_init(ScintillaObjectAccessibleFactory *)
scintilla_object_accessible_finalize(GObject *object)
scintilla_object_accessible_get_type(GType parent_type G_GNUC_UNUSED)
scintilla_object_accessible_init(ScintillaObjectAccessible *accessible)
scintilla_object_accessible_initialize(AtkObject *obj, gpointer data)
scintilla_object_accessible_new(GType parent_type, GObject *obj)
scintilla_object_accessible_ref_state_set(AtkObject *accessible)
scintilla_object_accessible_widget_set(GtkAccessible *accessible)
scintilla_object_accessible_widget_unset(GtkAccessible *accessible)
scintilla_object_get_type()
scintilla_object_new()
scintilla_object_send_message(ScintillaObject *sci, unsigned int iMessage, uptr_t wParam, sptr_t lParam)
scintilla_release_resources(void)
scintilla_send_message(ScintillaObject *sci, unsigned int iMessage, uptr_t wParam, sptr_t lParam)
scintilla_set_id(ScintillaObject *sci, uptr_t id)
scite_lua_fopen(const char *filename, const char *mode)
scite_lua_popen(const char *filename, const char *mode)
scnotification_get_type(void)
scrollHorizontal(int value)
scrollVertical(int value)
scrollView(nonatomic, readonly)
setCTStyleColor(CGColor *inColor)
setContext(CGContextRef context)
setDoubleClickAction(CallBackAction action, void *data)
setEncoding(Utf8_16::encodingType eType)
setFontRef(CTFontRef inRef, int characterSet_)
setText( const UInt8* buffer, size_t byteLength, CFStringEncoding encoding, const QuartzTextStyle& r )
set_code_page(int code_page)
set_current_indicator(int indic)
set_eol_mode(int eol_mode)
set_read_only(bool read_only)
set_save_point()
set_style_for(int length, char style)
set_undo_collection(bool collect_undo)
setfile(FILE *pFile)
size()
sizeFailure(-1)
small_scroller_class_init(SmallScrollerClass *klass)
small_scroller_get_preferred_height(GtkWidget *widget, gint *min, gint *nat)
small_scroller_init(SmallScroller *)
source(const ScintillaWindow &source)
source(const StyleWriter &source)
source(const TextReader &source)
start_styling(int position, char flags)
startswith(const std::string &s, const char *keybase)
stat(const wchar_t *path, struct _stat *buffer)
stat(const wchar_t *path, struct _stat64i32 *buffer)
strchr(wchar_t *str, wchar_t c)
strcmp(const wchar_t *a, const wchar_t *b)
strcpy(wchar_t *strDestination, const wchar_t *strSource)
stripEol(bool (SciTEBase::*ischarforsel)(char ch), bool stripEol = true)
strlen(const wchar_t *str)
strrchr(wchar_t *str, wchar_t c)
style_at(int position)
swapped(int v)
texStyle(int style)
timerEvent(QTimerEvent *event)
toStart()
treeViewGetRowHeight(GtkTreeView *view)
undo()
unlink(const wchar_t *filename)
unquote(char *s)
utf8LengthFromLead(unsigned char uch)
viewOptions()
wheelEvent(QWheelEvent *event)
window(WindowID wid)
Action()
AutoComplete()
AutoLineLayout()
AutoSurface()
BreakFinder()
BufferList()
BufferedFile()
CallTip()
CaseFolder()
CaseFolderTable()
CaseMapper()
CellBuffer()
CharacterIndexer()
CharacterSet()
ClusterIterator()
ContractionState()
Converter()
Decoration()
DecorationList()
DocWatcher()
Document()
DynamicLibrary()
DynamicLibraryImpl()
EditModel()
EditView()
Editor()
Extension()
ExtensionAPI()
FileLoader()
FileReader()
FileStorer()
FileWorker()
Font()
FontAlias()
FontAndCharacterSet()
FontHandle()
FontNames()
FontRealised()
FormatAndMetrics()
GObjectWatcher()
GlobalMemory()
HanjaDic()
IMContext()
JobQueue()
KeyMap()
LMMinder()
LexInterface()
LexState()
LexerBase()
LexerLibrary()
LexerManager()
LexerModule()
LineAnnotation()
LineLayout()
LineLayoutCache()
LineLevels()
LineMarker()
LineMarkers()
LineState()
LineTabstops()
LineToItem()
LineVector()
ListBox()
ListBoxImpl()
ListWidget()
Lock()
LuaExtension()
MarkerHandleSet()
MatchMarker()
MultiplexExtension()
Mutex()
OptionSet()
Partitioning()
PerLine()
PipeEntry()
Platform()
PositionCache()
PositionCacheEntry()
PreEditString()
PropSetFile()
PropSetSimple()
QuartzTextLayout()
QuartzTextStyle()
RESearch()
RGBAImage()
RGBAImageSet()
RegexSearchBase()
RunStyles()
SciTEBase()
SciTEGTK()
SciTEWin()
ScintillaBase()
ScintillaDocument()
ScintillaEditBase()
ScintillaGTK()
ScintillaGTKAccessible()
ScintillaQt()
ScintillaWin()
Selection()
SelectionText()
SparseVector()
SplitVector()
SplitVectorWithRangeAdd()
StringList() { Clear()
Strip()
Style()
Surface()
SurfaceD2D()
SurfaceGDI()
SurfaceImpl()
TList()
TMap()
ThreadLockMinder()
UndoGroup()
UndoHistory()
UniqueInstance()
Utf8_16_Read()
Utf8_16_Write()
VarBuffer()
ViewStyle()
WCheckDraw()
WatcherHelper()
WinMutex() { ::DeleteCriticalSection(&cs)
Window()
WordList()
Worker()
XPM()
