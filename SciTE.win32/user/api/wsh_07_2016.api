##
# WindowsScriptingHost API, as fetched from MSDN. imJuli2016, Marcedo@HabmalneFrage.de (VBS)
##
#~--- Objects (VBS)
Scripting.Signer()The Scripting.Signer object enables an author to sign a script \t\nwith a digital signature and a recipient to verify the signature's authenticity and trustworthiness Signer.SignFile(File, Cert, Store) (VBS)
WScript()Provides access to root object for the Windows Script Host object model (VBS)
WshArguments()Provides access to the entire collection of command-line parameters \t\n in the order in which they were originally entered (VBS)
WshEnvironment()Provides access to the collection of Windows environment variables (VBS)
WshController()Provides access to the CreateScript() method (for creating a remote script process) (VBS)
WshNamed()Provides access to the named arguments from the command line (VBS)
WshNetwork()Provides access to the shared resources on the network to which your computer is connected WScript.Echo "User Name = " & WshNetwork.UserName (VBS)
WshRemote()Provides access to the remote script process. **  (VBS)
WshRemoteError()Provides access to the error information available when a \t\nremote script (a WshRemote object) terminates as a result of a script error (VBS)
WshScriptExec()Provides status information about a script run with Exec along \t\nwith access to the StdIn, StdOut, and StdErr streams (VBS)
WshShell()Provides access to the native Windows shell oShellLink = WshShell.CreateShortcut(strDesktop & "\Shortcut Script.lnk") (VBS)
WshShortcut()Allows you to create a shortcut programmatically (VBS)
WshSpecialFolders()Provides access to the collection of Windows special folders (VBS)
WshUnnamed()Provides access to the unnamed arguments from the command line (VBS)
WshUrlShortcut()Allows you to create a shortcut to an Internet resource programmatically (VBS)

#~---- Functions (VBS)
Abs()Returns the absolute value of a number.\t\nAbs(number) (VBS)
Array()Returns a Variant containing an array.  **\t\nArray(arglist) (VBS)
Asc()Returns the ANSI character code corresponding to the first letter in a string. **\t\nAsc(string) (VBS)
Atn()Returns the arctangent of a number. **\t\nAtn(number) (VBS)
CBool()Returns an expression that has been converted to a Variant of subtype Boolean.\t\nCBool(expression) (VBS)
CByte()Returns an expression that has been converted to a Variant nof subtype Byte.\t\nCByte(expression) (VBS)
CCur()Returns an expression that has been converted to a Variant of subtype Currency.\t\nCCur(expression) (VBS)
CDate()Returns an expression that has been converted to a Variant of subtype Date.\t\nCDate(date) (VBS)
CDbl()Returns an expression that has been converted to a Variant nof subtype Double.\t\nCDbl(expression) (VBS)
Chr()Returns the character associated with the specified ANSI character code. **\t\nChr(charcode) (VBS)
CInt()Returns an expression that has been converted to a Variant of subtype Integer. **\t\nCInt(expression) (VBS)
CLng()Returns an expression that has been converted to a Variant of subtype Long. **\t\nCLng(expression) (VBS)
Conversion()The following table lists the conversion functions in VBScript. (VBS)
Cos()Returns the cosine of an angle.\t\nCos(number) (VBS)
CreateObject(servername,typename,location)Creates and returns a reference to an Automation object.\t\nCreateObject(servername.typename [, location]) (VBS)
CSng()Returns an expression that has been converted to a Variant of subtype Single.\t\nCSng(expression)  (VBS)
CStr()Returns an expression that has been converted to a Variant of subtype String.\t\nCStr(expression) (VBS)
Date()Returns the current system date.\t\nDate (VBS)
DateAdd(interval,number,date)Returns a date to which a specified time interval has been added.\t\nDateAdd(interval, number, date) (VBS)
DateDiff(interval,date1,,date2,firstdayofweek,firstweekofyear)Returns the number of intervals between two dates.\t\nDateDiff(interval, date1, date2 [,firstdayofweek[, firstweekofyear]]) (VBS)
DatePart(interval,date,firstdayof,week,firstweekofyear)Returns the specified part of a given date.\t\nDatePart(interval, date[, firstdayofweek[, firstweekofyear]]) (VBS)
DateSerial(year,month,day)Returns a Variant of subtype Date for a specified year, month, and day.\t\nDateSerial(year, month, day) (VBS)
DateValue()Returns a Variant of subtype Date.\t\nDateValue(date) (VBS)
Day()Returns a whole number between 1 and 31, inclusive, representing the day of the month.\t\nDay(date) (VBS)
Escape(charString)Encodes a string so it contains only ASCII characters. **\t\nEscape(charString) (VBS)
Eval(expression)Evaluates an expression and returns the result. **\t\nEval(expression) (VBS)
Exp()Returns e (the base of natural logarithms) raised to a power. **\t\nExp(number) (VBS)
Filter(InputStrings,Value,Include,Compare)Returns a zero-based array containing a subset of a string array based on a specified filter criteria.\t\nFilter(InputStrings, Value[, Include[, Compare]]) (VBS)
FormatCurrency(Expression,NumDigitsAfterDecimal,IncludeLeadingDigit,UseParensForNegativeNumbers,GroupDigits)Returns an expression formatted as a currency value using \t\nthe currency symbol defined in the system control panel.  **\t\n[,UseParensForNegativeNumbers [,GroupDigits]]]])  (VBS)
FormatDateTime(Date,NamedFormat)Returns an expression formatted as a date or time.\t\nFormatDateTime(Date[, NamedFormat]) (VBS)
FormatNumber(Expression,NumDigitsAfterDecimal,IncludeLeadingDigit,UseParensForNegativeNumbers,GroupDigits)Returns an expression formatted as a number.  **\t\n[,UseParensForNegativeNumbers [,GroupDigits]]]]) (VBS)
FormatPercent(Expression,NumDigitsAfterDecimal,IncludeLeadingDigit,UseParensForNegativeNumbers,GroupDigits)Returns an expression formatted as a percentage (multiplied \t\nby 100) with a trailing % character.  **\t\n[,UseParensForNegativeNumbers [,GroupDigits]]]]) (VBS)
GetLocale()Returns the current locale ID value.\t\nGetLocale() (VBS)
GetObject(pathname,class,appname,objectype)Returns a reference to an Automation object from a file.  **\t\nGetObject([pathname] [, class]) (VBS)
GetRef(object,event,procname)Returns a reference to a procedure that can be bound to an event.\t\nSet object.eventname = GetRef(procname) (VBS)
Hex()Returns a string representing the hexadecimal value of a number.\t\nHex(number) (VBS)
Hour()Returns a whole number between 0 and 23, inclusive, representing \t\nthe hour of the day.\t\nHour(time) (VBS)
InputBox(prompt,title,default,xpos,ypos,helpfile,context)Displays a prompt in a dialog box, waits for the user to input text or click a button, and returns the contents of the text box.\t\nInputBox(prompt[, title][, default][, xpos][, ypos][, helpfile, context]) (VBS)
InStr(start,string1,string2,compare)Returns the position of the first occurrence of one string within another. **\t\nInStr([start, ]string1, string2[, compare]) (VBS)
InStrRev(string1,string2,start,compare)Returns the position of an occurrence of one string within another, from the end of string.  **\t\nInStrRev(string1, string2[, start[, compare]]) (VBS)
Int()Returns the integer portion of a number.\t\n (VBS)
IsArray()Returns a Boolean value indicating whether a variable is an array.\t\nIsArray(varname) (VBS)
IsDate()Returns a Boolean value indicating whether an expression can be converted to a date.\t\nIsDate(expression) (VBS)
IsEmpty()Returns a Boolean value indicating whether a variable has been initialized.\t\nIsEmpty(expression) (VBS)
IsNull()Returns a Boolean value that indicates whether an expression contains no valid data (Null).\t\nIsNull(expression) (VBS)
IsNumeric()Returns a Boolean value indicating whether an expression can be evaluated as a number.\t\nIsNumeric(expression) (VBS)
IsObject()Returns a Boolean value indicating whether an expression references a valid Automation object.\t\nIsObject(expression) (VBS)
Join(list,delimiter)Returns a string created by joining a number of substrings contained in an array.\t\nJoin(list[, delimiter]) (VBS)
LBound(arrayname,dimension)Returns the smallest available subscript for the indicated dimension of an array.\t\nLBound(arrayname[, dimension]) (VBS)
LCase()Returns a string that has been converted to lowercase.\t\nLCase(string) (VBS)
Left(string,length)Returns a specified number of characters from the left side of a string. **\t\nLeft(string, length) (VBS)
Len(string,varname)Returns the number of characters in a string or the number of bytes required to store a variable.  **\t\nLen(string | varname) (VBS)
LoadPicture()Returns a picture object. Available only on 32-bit platforms.\t\nLoadPicture(picturename) (VBS)
Log()Returns the natural logarithm of a number.\t\nLog(number) (VBS)
Trim()(R/L)Trim Whitespace\t\n (VBS)
Math()The following table lists the VBScript math functions.\t\n (VBS)
Mid(string,start,length)Returns a specified number of characters from a string. **\t\nMid(string, start[, length]) (VBS)
Minute()Returns a whole number between 0 and 59, inclusive, representing the minute of the hour.\t\nMinute(time) (VBS)
Month()Returns a whole number between 1 and 12, inclusive, representing the month of the year.\t\nMonth(date) (VBS)
MonthName(month,abbreviate)Returns a string indicating the specified month.MonthName(month[, abbreviate]) (VBS)
MsgBox(prompt,buttons,title,helpfile,context)Displays a message in a dialog box, waits for the user to click a button,\t\n and returns a value indicating which button the user clicked.\t\nMsgBox(prompt[, buttons][, title][, helpfile, context]) (VBS)
Now()Returns the current date and time according to the setting of your computer's system date and time.\t\nNow (VBS)
Oct()Returns a string representing the octal value of a number.Oct(number) (VBS)
Replace(expression,find,replacewith,start,count,compare)Returns a string in which a specified substring has been replaced with another substring a specified number of times.\t\nReplace(expression, find, replacewith[, start[, count[, compare]]]) (VBS)
RGB(red,green,blue)Returns a whole number representing an RGB color value.\t\nRGB(red, green, blue) (VBS)
Right(string,length)Returns a specified number of characters from the right side \t\nof a string. **\t\nRight(string, length) (VBS)
Rnd()Returns a random number. **\t\nRnd[(number)] (VBS)
Round(expression,numdecimalplaces)Returns a number rounded to a specified number of decimal places. **\t\nRound(expression[, numdecimalplaces]) (VBS)
ScriptEngine()Returns a string representing the scripting language in use.\t\nScriptEngine (VBS)
ScriptEngineBuildVersion()Returns the build version number of the scripting engine in use.\t\nScriptEngineBuildVersion (VBS)
ScriptEngineMajorVersion()Returns the major version number of the scripting engine in use.\t\nScriptEngineMajorVersion (VBS)
ScriptEngineMinorVersion()Returns the minor version number of the scripting engine in use.\t\nScriptEngineMinorVersion (VBS)
Second()Returns a whole number between 0 and 59, inclusive, representing \t\nthe second of the minute.\t\nSecond(time) (VBS)
SetLocale()Sets the global locale and returns the previous locale.\t\nSetLocale(lcid) (VBS)
Sgn()Returns an integer indicating the sign of a number.\t\nSgn(number) (VBS)
Sin()Returns the sine of an angle.\t\nSin(number) (VBS)
Space()Returns a string consisting of the specified number of spaces.\t\nSpace(number) (VBS)
Split(expression,delimiter,count,compare)Returns a zero-based, one-dimensional array containing a specified \t\nnumber of substrings.\t\nSplit(expression[, delimiter[, count[, compare]]]) (VBS)
Sqr()Returns the square root of a number.\t\nSqr(number) (VBS)
StrComp(string1,string2,compare)Returns a value indicating the result of a string comparison.\t\nStrComp(string1, string2[, compare]) (VBS)
String(number,character)Returns a repeating character string of the length specified.\t\nString(number, character) (VBS)
StrReverse()Returns a string in which the character order of a specified \t\nstring is reversed.\t\nStrReverse(string1) (VBS)
Tan()Returns the tangent of an angle.\t\nTan(number) (VBS)
Time()Returns a Variant of subtype Date indicating the current system time.\t\nTime (VBS)
Timer()Returns the number of seconds that have elapsed since 12:00 AM (midnight).\t\nTimer (VBS)
TimeSerial(hour,minute,second)Returns a Variant of subtype Date containing the time for \t\na specific hour, minute, and second.\t\nTimeSerial(hour, minute, second) (VBS)
TimeValue()Returns a Variant of subtype Date containing the time.\t\nTimeValue(time) (VBS)
TypeName()Returns a string that provides Variant subtype information about a variable.\t\nTypeName(varname) (VBS)
UBound(arrayname,dimension)Returns the largest available subscript for the indicated dimension of an array.\t\nUBound(arrayname[, dimension]) (VBS)
UCase()Returns a string that has been converted to uppercase.\t\nUCase(string) (VBS)
Unescape(charString)Decodes a string encoded with the Escape function.\t\nUnescape(charString) (VBS)
VarType()Returns a value indicating the subtype of a variable. **\t\nVarType(varname) (VBS)
Weekday(date,firstdayofweek)Returns a whole number representing the day of the week.\t\nWeekday(date, [firstdayofweek]) (VBS)
WeekdayName(weekday,abbreviate,firstdayofweek)Returns a string indicating the specified day of the week.\t\nWeekdayName(weekday, abbreviate, firstdayofweek) (VBS)
Year()Returns a whole number representing the year.\t\nYear(date) (VBS)

#~---- Properties (VBS)
Arguments()Returns the WshArguments object (a collection of arguments).\t\nobject.Arguments (VBS)
Arguments()Sets the arguments for a shortcut, or identifies a shortcut's arguments.\t\nobject.Arguments (VBS)
AtEndOfLine()Returns a Boolean value indicating whether the end of a line in an input stream has been reached.\t\nobject.AtEndOfLine  (VBS)
AtEndOfStream()Returns a Boolean value indicating whether the end of an input stream has been reached.\t\nobject.AtEndOfStream  (VBS)
BuildVersion( )Returns the Windows Script Host build version number.\t\nObject.BuildVersion (VBS)
Character()Reports the specific character in a line of code that contains an error.\t\nObject.Character (VBS)
Column()Returns the column number of the current character position \t\nin an input stream.\t\nobject.Column  (VBS)
ComputerName()Returns the name of the computer system.\t\nobject.ComputerName  (VBS)
CurrentDirectory()Retrieves or changes the current active directory.\t\nobject.CurrentDirectory (VBS)
Description()Returns a shortcut's description.\t\nobject.Description  (VBS)
Description()Contains a brief description of the error that caused the remote script to terminate.\t\nObject.Description (VBS)
Environment(strType)Returns the WshEnvironment object (a collection of environment variables). **\t\nobject.Environment ([strType])  (VBS)
Error()Exposes the WshRemoteError object, which holds information \t\nabout the error that caused the remote script to terminate prematurely.\t\nObject.Error (VBS)
ExitCode( )Returns the exit code set by a script or program run using the Exec() method.\t\nObject.ExitCode (VBS)
FullName()Returns the fully qualified path of the host executable (CScript.exe or WScript.exe).\t\nobject.FullName  (VBS)
FullName()Returns the fully qualified path of the shortcut object's target.\t\nobject.FullName  (VBS)
Hotkey(strHotkey,KeyModifier,KeyName)Assigns a key-combination to a shortcut, or identifies the \t\nkey-combination assigned to a shortcut. **\t\nobject.Hotkey = strHotkey (VBS)
IconLocation(strIconLocation)Assigns an icon to a shortcut, or identifies the icon assigned to a shortcut.\t\nobject.IconLocation = strIconLocation  (VBS)
Interactive()Sets the script mode, or identifies the script mode.\t\nobject.Interactive  (VBS)
Item(natIndex)Exposes a specified item from a collection.\t\nObject.Item(natIndex)  (VBS)
Item(key)Provides access to the items in the WshNamed object.\t\nObject.Item(key) (VBS)
Item(key)Returns an item using a zero-based index.\t\nObject.Item(key) (VBS)
length()Returns the number of command-line parameters belonging to a script \t\n(the number of items in an argument's collection).\t\nobject.length  (VBS)
length()Returns the number of Windows environment variables on the local computer system\t\n(the number of items in an Environment collection).\t\nobject.length  (VBS)
length()Returns the number of Windows special folders on the local computer system\t\n(the number of items in a SpecialFolders collection).\t\nobject.length  (VBS)
Line(strStream)Returns the current line number in an input stream.\t\nobject.strStream.Line  (VBS)
Line()Identifies the line in a script that contains an error.\t\nObject.Line (VBS)
Name()Returns the name of the WScript object (the host executable file).\t\nobject.Name  (VBS)
Named( )Returns the WshNamed object (a collection of named arguments).\t\nObject.Named (VBS)
Number()Reports the error number representing a script error.\t\nObject.Number (VBS)
Path()Returns the name of the directory containing the host executable (CScript.\t\nexe or WScript.exe).\t\nobject.Path  (VBS)
ProcessID( )The process ID (PID) for a process started with the WshScriptExec object.\t\nObject.ProcessID (VBS)
RelativePath()Assigns a relative path to a shortcut, or identifies the relative path of a shortcut.\t\nobject.RelativePath (VBS)
ScriptFullName()Returns the full path of the currently running script.\t\nobject.ScriptFullName (VBS)
ScriptName()Returns the file name of the currently running script.\t\nobject.ScriptName (VBS)
Source()Identifies the COM object responsible for causing the script error.\t\nObject.Source (VBS)
SourceText()Contains the line of source code that caused an error.\t\nObject.SourceText (VBS)
SpecialFolders(objWshSpecialFolders)Returns a SpecialFolders object (a collection of special folders).\t\nobject.SpecialFolders(objWshSpecialFolders)  (VBS)
Status()Reports the current status of the remote script.\t\nObject.Status (VBS)
Status(WshRunning,(,=,0),WshFinished,(,=,1))Provides status information about a script run with the Exec() method.\t\nObject.Status (VBS)
StdErr()Exposes the write-only error output stream for the current script.\t\nobject.StdErr  (VBS)
StdErr()Provides access to the stderr output stream of the Exec object.\t\nObject.StdErr (VBS)
StdIn()Exposes the read-only input stream for the current script.\t\nobject.StdIn  (VBS)
StdIn()Exposes the stdin input stream of the Exec object.\t\nObject.StdIn (VBS)
StdOut()Exposes the write-only output stream for the current script.\t\nobject.StdOut  (VBS)
StdOut()Exposes the write-only stdout output stream of the Exec object.\t\nObject.StdOut (VBS)
TargetPath()The path to the shortcut's executable.\t\nobject.TargetPath (VBS)
Unnamed( )Returns the WshUnnamed object (a collection of unnamed arguments).\t\nObject.Unnamed (VBS)
UserDomain()Returns a user's domain name.\t\nobject.UserDomain (VBS)
UserName()Returns the name of a user.\t\nobject.UserName  (VBS)
Version()Returns the version of Windows Script Host.\t\nobject.Version  (VBS)
WindowStyle(intWindowStyle)Assigns a window style to a shortcut, or identifies the type \t\nof window style used by a shortcut.\t\nobject.WindowStyle = intWindowStyle (VBS)
WorkingDirectory(strWorkingDirectory)Assign a working directory to a shortcut, or identifies the \t\nworking directory used by a shortcut.\t\nobject.WorkingDirectory = strWorkingDirectory (VBS)

#~--- Methods (VBS)
AddPrinterConnection(strLocalName,strRemoteName,bUpdateProfile,strUser,strPassword)Adds a remote MS-DOS-based printer connection to your computer system.\t\nobject.AddPrinterConnection(strLocalName, strRemoteName[,bUpdateProfile][,strUser][,strPassword]) (VBS)
AddWindowsPrinterConnection(strPrinterPath,strDriverName,strPort)Adds a Windows-based printer connection to your computer system. Windows NT/2000:\t\nobject.AddWindowsPrinterConnection(strPrinterPath) (VBS)
AppActivate(title)Activates an application window. **\t\nobject.AppActivate title  (VBS)
Close()Closes a text stream.\t\nobject.Close  (VBS)
ConnectObject(objEventSource,strPrefix)Connects the object's event sources to functions with a given prefix.\t\nobject.ConnectObject(objEventSource, strPrefix) (VBS)
Count()Returns the number of members in an object.\t\nobject.Count (VBS)
CreateObject(strProgID,strPrefix)Creates a COM object. **\t\nobject.CreateObject(strProgID[,strPrefix])  (VBS)
CreateScript(Commandline,MachineName)Creates a WshRemote object.\t\nobject.CreateScript(CommandLine,[MachineName]) (VBS)
CreateShortcut(strPathname)Creates a new shortcut, or opens an existing shortcut. **\t\nobject.CreateShortcut(strPathname)  (VBS)
DisconnectObject(obj)Disconnects a connected object's event sources.\t\nobject.DisconnectObject(obj) (VBS)
Echo(Arg1,,Arg2,,Arg3,...)Outputs text to either a message box or the command console window.\t\nobject.Echo [Arg1] [,Arg2] [,Arg3] ...  (VBS)
EnumNetworkDrives(objDrives)Returns the current network drive mapping information.\t\nobjDrives = object.EnumNetworkDrives (VBS)
EnumPrinterConnections(objPrinters)Returns the current network printer mapping information.\t\nobjPrinters = object.EnumPrinterConnections  (VBS)
Exec(strCommand)Runs an application in a child command-shell, providing access to the StdIn/Out/Err streams.\t\nobject.Exec(strCommand) (VBS)
Execute()Starts execution of a remote script object.\t\nobject.Execute (VBS)
Exists(Key)Indicates whether a specific key value exists in the WshNamed object.\t\nobject.Exists(key) (VBS)
ExpandEnvironmentStrings(strString)Returns an environment variable's expanded value.\t\nobject.ExpandEnvironmentStrings(strString)  (VBS)
GetObject(strPathname,strProgID,strPrefix)Retrieves an existing object with the specified ProgID, or creates a new one from a file.\t\nobject.GetObject(strPathname [,strProgID], [strPrefix])  (VBS)
getResource(resourceID)Returns the value of a resource defined with the <resource> element.\t\ngetResource(resourceID)  (VBS)
LogEvent(intType,strMessage,strTarget)Adds an event entry to a log file.\t\nobject.LogEvent(intType, strMessage [,strTarget])  (VBS)
MapNetworkDrive(strLocalName,strRemoteName,bUpdateProfile,strUser,strPassword)Adds a shared network drive to your computer system.\t\nobject.MapNetworkDrive(strLocalName, strRemoteName, [bUpdateProfile], [strUser], [strPassword]) (VBS)
Popup(strText,nSecondsToWait,strTitle,nType,intButton)Displays text in a pop-up message box.\t\nintButton = object.Popup(strText,[nSecondsToWait],[strTitle],[nType])  (VBS)
Quit(intErrorCode)Forces script execution to stop at any time.\t\nobject.Quit([intErrorCode]) (VBS)
Read(characters)Returns a specified number of characters from an input stream.\t\nobject.Read(characters)  (VBS)
ReadAll()Returns all characters from an input stream.\t\nobject.ReadAll  (VBS)
ReadLine()Returns an entire line from an input stream. **\t\nobject.ReadLine  (VBS)
RegDelete(strName)Deletes a key or one of its values from the registry.\t\nobject.RegDelete(strName) (VBS)
RegRead(strName)Returns the value of a key or value-name from the registry.\t\nobject.RegRead(strName)  (VBS)
RegWrite(strName,anyValue,strType)Creates a new key, adds another value-name to an existing key (and assigns it a value),\t\nor changes the value of an existing value-name. **\t\nobject.RegWrite(strName, anyValue [,strType]) (VBS)
Remove(strName)Removes an existing environment variable.\t\nobject.Remove(strName)  (VBS)
RemoveNetworkDrive(strName,bForce,bUpdateProfile)Removes a shared network drive from your computer system.\t\nobject.RemoveNetworkDrive(strName, [bForce], [bUpdateProfile]) (VBS)
RemovePrinterConnection(strName,bForce,bUpdateProfile)Removes a shared network printer connection from your computer system.\t\nobject.RemovePrinterConnection(strName, [bForce], [bUpdateProfile]) (VBS)
Run(strCommand,intWindowStyle,bWaitOnReturn)Runs a program in a new process.\t\nobject.Run(strCommand, [intWindowStyle], [bWaitOnReturn])  (VBS)
Save()Saves a shortcut object to disk.\t\nobject.Save  (VBS)
SendKeys(string)Sends one or more keystrokes to the active window (as if typed on the keyboard).**\t\nobject.SendKeys(string) (VBS)
SetDefaultPrinter(strPrinterName)Assigns a remote printer the role Default Printer.\t\nobject.SetDefaultPrinter(strPrinterName) (VBS)
ShowUsage()Makes a script self-documenting by displaying information about how it should be used.\t\n**\t\nobject.ShowUsage (VBS)
Sign(FileExtension,Text,Certificate,Store)Signs a script stored in a string.\t\nObject.Sign (FileExtension, Text, Certificate, Store) (VBS)
SignFile(FileName,Certificate,Store)Signs a script using a digital signature.\t\nObject.SignFile (FileName, Certificate, Store) (VBS)
Skip(characters)Skips a specified number of characters when reading from an \t\ninput text stream.\t\nobject.Skip(characters)  (VBS)
SkipLine()Skips the next line when reading from an input text stream.\t\nobject.SkipLine  (VBS)
Sleep(intTime)Suspends script execution for a specified length of time, then continues execution. **\t\nobject.Sleep(intTime)  (VBS)
Terminate()Instructs the script engine to end the process started by the Exec method.\t\nobject.Terminate (VBS)
Verify(FileExtension,Text,ShowUI)Verifies a digital signature retrieved as a string. **\t\nobject.Verify (FileExtension, Text, ShowUI) (VBS)
VerifyFile(FileName,ShowUI)Verifies the digital signature encapsulated in a script. **\t\nObject.VerifyFile (FileName, ShowUI) (VBS)
Write(strText)Sends a string to an output stream.\t\nobject.Write(strText)  (VBS)
WriteBlankLines(intLines)Sends a specified number of newline characters to an output stream.\t\nobject.WriteBlankLines(intLines)  (VBS)
WriteLine(strText)Sends a string with a newline character to an output stream.\t\nobject.WriteLine([strText])  (VBS)

#~--- Events (VBS)
_End()Event that is fired when the remote script completes.\t\nvar WshController = new ActiveXObject("WSHController"),\t\nvar RemoteProc = WshController.CreateScript("app.wsf", "remotemachine"),\t\nWScript.ConnectObject(RemoteProc, "RemoteProc_"),\t\nvar Done = false,\t\nRemoteProc.Execute(),\t\nwhile (!Done)\t\nWScript.Sleep(100),\t\nfunction RemoteProc_End()\t\n{\t\nWScript.Echo("The process has ended"),\t\nDone = true,\t\n}\t\nfunction RemoteProc_Error()\t\n{\t\nWScript.Echo("An error has occurred: " + RemoteProc.Error.Description),\t\nDone = true,\t\n}\t\nfunction RemoteProc_Start()\t\n{\t\nWScript.Echo("The process has started"),\t\n} (VBS)
_Error()Event that is fired when an error occurs in the remote script.\t\nObject_Error (VBS)
_Start()Event that is fired when the remote script begins executing.\t\nObject_Start (VBS)

#~--xml 
<description> 
<example> 
<job 
id=" 
<named 
name= 
helpstring= 
type= 
required= 
<object> 
guid= 
progID= 
hookevents= 
<package> 
<reference> 
version=" 
<resource> 
<runtime> 
<script> 
language=" 
src=" 
<unnamed> 
many= 
<usage> 
