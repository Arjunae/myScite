#
# SciTE settings for WindowsScriptingHost code.
##imJuli2016, Marcedo@HabmalneFrage.de;

# --- Handle .vbs (vbScript)

# VBS: VBScript, DSM: Visual[ex. Dev] Studio macro
#file.patterns.vbs=*.vbs;*.dsm;*.wsf

file.patterns.winscript=*.vbs;*.wsf;*.hta;*.htc;*.api
filter.winscript=winscript (vbs wsf)|$(file.patterns.winscript)|

# ---- * Wildcard is used to collect marked properties 
# ----  used to dynamically build the Language Menu
*filter.winscript=$(filter.wscript)
*source.patterns.winscript=$(file.patterns.winscript);

# Uncomment if you want to display vbScript in the Lang menu

*language.winScript=vbScr&ipt|vbs||
lexer.$(file.patterns.winscript)=freebasic

word.chars.winscript= $(chars.alpha)$(chars.numeric)-'#
word.characters.$(file.patterns.winscript)=$(word.chars.winscript)

# --------- Syntax Highlitening
# ---- Begin wsh.keywords

# Code Flow & Methods use style2 
keywordclass.wsh=\
addprinterconnection  addwindowsprinterconnection appactivate close connectobject \
count createobject createscript createshortcut disconnectobject echo enumnetworkdrives enumprinterconnections \
exec execute exists expandenvironmentstrings getobject getresource logevent mapnetworkdrive popup quit\
read readall readline regdelete regread regwrite remove removenetworkdrive removeprinterconnection \
run save sendkeys setdefaultprinter showusage sign signfile skip skipline sleep terminate verify verifyfile \
write writeblanklines writeline binary byref byval date dim sub end function do loop else empty error false for get input is len let lock me mid new next nothing null on option optional  set  step string then time to true withevents


 # properties
keywordclass.wsh2=unnamed userdomain username version windowstyle  stderr stdin stdin stdout stdout targetpath \
 processid relativepath scriptfullname scriptname source sourcetext specialfolders status status stderr \
 number path  name  length line  iconlocation interactive item  column computername currentdirectory \
 description description environment error exitcode fullname  arguments atendofline atendofstream buildversion character \
 
# objects
keywordclass.wsh4= \
 <?job?> <?xml?> <description> <example> <job> <named> <object> <package> <reference> <resource> <runtime> \
 <script> <unnamed> <usage>  scriptingsigner wscript wsharguments wshcontroller wshenvironment \
 wshnamed wshnetwork wshremote wshremoteerror wshscriptexec wshshell wshshortcut wshspecialfolders \
 wshunnamed wshurlshortcut  _end _error _start

# ---- End wsh.keywords

# flow of control aka if else do loop ....
keywords.$(file.patterns.winscript)=$(keywordclass.wsh) $(keywordclass.wsh2) 

#keywords2.$(file.patterns.winscript)=$(keywordclass.wsh2) 
# specials (objects, Selectors)
keywords2.$(file.patterns.winscript)=$(keywordclass.wsh4) 

# ------- Calltips ( api parameter) 
autocomplete.freebasic.start.characters=$(chars.alpha)$(chars.numeric)$_<
autocomplete.freebasic.fillups=(
autocomplete.freebasic.ignorecase=1

#------ \t\n makes a calltip multiline
calltip.freebasic.use.escapes=1

calltip.freebasic.word.characters=$(chars.alpha)$(chars.numeric)
calltip.freebasic.ignorecase=1
calltip.freebasic.end.definition=)
calltip.freebasic.parameters.start=(|
calltip.freebasic.parameters.separators=, 
calltip.freebasic.parameters.end=)|

api.$(file.patterns.winscript)=$(SciteDefaultHome)/user/api/wsh_07_2016.api

# -------- Comments
comment.block.winscript='~

# -------- Indentation
statement.indent.$(file.patterns.winscript)=3 else elseif for  if while
indent.maintain.$(file.patterns.winscript)=1
#statement.lookback.$(file.patterns.winscript)=20
#comment.block.at.line.start.winscript=1

# ---------Wsh styles

# Default
style.freebasic.32=$(colour.default)

# White space
style.freebasic.0=$(colour.default)
# Comment
style.freebasic.1=$(colour.comment.line),$(font.comment.line)
# Number
style.freebasic.2=$(colour.number)
# Keyword
style.freebasic.3=$(colour.keyword)
# String
style.freebasic.4=$(colour.string)
# Preprocessor (directives)
style.freebasic.5=$(colour.preproc)
# Operator
style.freebasic.6=$(colour.operator)
# Identifier
style.freebasic.7=$(colour.identifier)
# Date
style.freebasic.8=$(colour.number)
# End of line where string is not closed
style.freebasic.9=$(colour.eolstringnotclosed)
# Other keywords (bozo test colors :-)
style.freebasic.10=$(style.vb.5)
style.freebasic.11=$(style.vb.5)
style.freebasic.12=$(style.vb.5)

command.help.$(file.patterns.winscript)=$(CurrentWord)!C:\Program Files\Microsoft Visual Studio\MSDN\2001OCT\1033\MSDN130.COL
command.help.subsystem.$(file.patterns.wscript)=4

# Normal go Comand with wScript, use cScript for console.
command.go.$(file.patterns.winscript)=cscript.exe /Nologo //D  $(FilePath)
command.go.subsystem.$(file.patterns.winscript)=2

# note we have no real "build"; rather "execute and capture
# compiletime and runtime errors"
command.build.$(file.patterns.winscript)=cscript.exe //Nologo //D $(FilePath)
command.build.subsystem.$(file.patterns.winscript)=2

